
ProjectOne.elf:     file format elf32-littlenios2
ProjectOne.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001d0

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000d9b0 memsz 0x0000d9b0 flags r-x
    LOAD off    0x0000e9d0 vaddr 0x0000d9d0 paddr 0x0000f430 align 2**12
         filesz 0x00001a60 memsz 0x00001a60 flags rw-
    LOAD off    0x00010e90 vaddr 0x00010e90 paddr 0x00010e90 align 2**12
         filesz 0x00000000 memsz 0x00000460 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001b0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d3f0  000001d0  000001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000410  0000d5c0  0000d5c0  0000e5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a60  0000d9d0  0000f430  0000e9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000460  00010e90  00010e90  00010e90  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d78  00000000  00000000  00010458  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001512  00000000  00000000  000111d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025902  00000000  00000000  000126e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000824f  00000000  00000000  00037fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001492d  00000000  00000000  00040233  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a94  00000000  00000000  00054b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002353  00000000  00000000  000565f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c315  00000000  00000000  00058947  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00064c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00064c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00068806  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00068809  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0006880c  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0006880d  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00068811  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00068815  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00068819  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00068822  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0006882b  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00068834  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000028  00000000  00000000  0006883f  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006a1c7  00000000  00000000  00068867  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001d0 l    d  .text	00000000 .text
0000d5c0 l    d  .rodata	00000000 .rodata
0000d9d0 l    d  .rwdata	00000000 .rwdata
00010e90 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000208 l       .text	00000000 alt_after_alt_main
000000b4 l       .exceptions	00000000 GOTO
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alarm_handler.c
00000000 l    df *ABS*	00000000 project1.c
00000000 l    df *ABS*	00000000 tcb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000b1c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001618 l     F .text	00000058 __sprint_r
0000d706 l     O .rodata	00000010 blanks.3452
0000d6f6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003694 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000050bc l     F .text	00000058 std
000051c8 l     F .text	00000008 __fp_lock
000051d0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000ddd8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0000f404 l     O .rwdata	00000004 charset
0000d73c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000d884 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00008dcc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000a804 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000a864 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000a968 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000aa8c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000ab6c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000accc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b194 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000f420 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0000b5f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e38c l     O .rwdata	00001060 JTAG_UART
0000b6e0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000b920 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000bb48 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000c1c4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000c394 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c7a4 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000c8f4 l     F .text	000000f8 alt_file_locked
0000cb78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000d3a8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000d55c l     F .text	00000040 alt_sim_halt
0000676c g     F .text	00000094 _mprec_log10
00006858 g     F .text	00000088 __any_on
00007fa0 g     F .text	00000070 _isatty_r
0000d85c g     O .rodata	00000028 __mprec_tinytens
0000ad2c g     F .text	0000006c alt_main
00001480 g     F .text	000000a0 _puts_r
00011060 g     O .bss	00000100 alt_irq
00008010 g     F .text	00000078 _lseek_r
0000f430 g       *ABS*	00000000 __flash_rwdata_start
000098ec g     F .text	00000088 __eqdf2
000112f0 g       *ABS*	00000000 __alt_heap_start
00001408 g     F .text	00000044 printf
00007a58 g     F .text	00000068 __sseek
00005124 g     F .text	000000a4 __sinit
0000d128 g     F .text	00000130 __swbuf_r
00005e30 g     F .text	00000084 _setlocale_r
00005224 g     F .text	0000009c __sfmoreglue
0000adb8 g     F .text	00000020 __malloc_unlock
0000024c g     F .text	00000060 initialize_alarm
000061e8 g     F .text	000000e0 memmove
00005214 g     F .text	00000010 _cleanup
000068e0 g     F .text	000000bc _Balloc
000099fc g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00007f2c g     F .text	00000074 _fstat_r
00010ea8 g     O .bss	00000004 errno
00010ebc g     O .bss	00000004 alt_argv
000173ec g       *ABS*	00000000 _gp
0000e20c g     O .rwdata	00000180 alt_fd_list
0000cbf8 g     F .text	00000094 alt_find_dev
00006148 g     F .text	000000a0 memcpy
00005208 g     F .text	0000000c _cleanup_r
00009b94 g     F .text	000000f8 __floatsidf
00000434 g     F .text	00000028 check_interrupt
0000c87c g     F .text	00000078 alt_io_redirect
00009b0c g     F .text	00000088 __ltdf2
0000d5c0 g       *ABS*	00000000 __DTOR_END__
00001520 g     F .text	00000014 puts
0000cbd8 g     F .text	00000020 altera_nios2_irq_init
000066bc g     F .text	000000b0 __ratio
0000bd60 g     F .text	00000224 altera_avalon_jtag_uart_read
00000cb4 g     F .text	00000014 malloc
0000144c g     F .text	00000034 _printf_r
00000c58 g     F .text	00000008 __udivsi3
0000a9c8 g     F .text	000000c4 isatty
0000d76c g     O .rodata	000000c8 __mprec_tens
00005e0c g     F .text	00000008 __locale_charset
00010e9c g     O .bss	00000004 __malloc_top_pad
000002ac g     F .text	00000064 reset_alarm
0000f400 g     O .rwdata	00000004 __mb_cur_max
00005e14 g     F .text	0000000c _localeconv_r
00007044 g     F .text	0000003c __i2b
000057f0 g     F .text	0000049c __sfvwrite_r
00001534 g     F .text	00000070 _sbrk_r
00008088 g     F .text	00000078 _read_r
0000e1d8 g     O .rwdata	0000000c __lc_ctype
0000f418 g     O .rwdata	00000004 alt_max_fd
0000a3b0 g     F .text	00000138 __unpack_d
00007e08 g     F .text	00000110 _fclose_r
00005088 g     F .text	00000034 fflush
00010f10 g     O .bss	00000150 threads
00010ea0 g     O .bss	00000004 __malloc_max_sbrked_mem
00000514 g     F .text	0000006c destroy_thread
0000925c g     F .text	00000074 __adddf3
0000659c g     F .text	00000120 __b2d
00010e94 g     O .bss	00000004 current_thread
0000876c g     F .text	00000660 __umoddi3
0000abd8 g     F .text	000000f4 lseek
0000f3fc g     O .rwdata	00000004 _global_impure_ptr
000073ec g     F .text	000005f4 _realloc_r
000112f0 g       *ABS*	00000000 __bss_end
0000c6ac g     F .text	000000f8 alt_iic_isr_register
0000b3c0 g     F .text	0000010c alt_tick
00008100 g     F .text	0000066c __udivdi3
0000d834 g     O .rodata	00000028 __mprec_bigtens
000072cc g     F .text	00000120 __s2b
00009d64 g     F .text	00000194 __floatunsidf
000064bc g     F .text	00000060 __mcmp
000051f0 g     F .text	00000018 __fp_lock_all
0000c664 g     F .text	00000048 alt_ic_irq_enabled
00010ef8 g     O .bss	00000018 alarm
0000b328 g     F .text	00000098 alt_alarm_stop
00010ecc g     O .bss	00000004 alt_irq_active
00000108 g     F .exceptions	000000c8 alt_irq_handler
0000e1e4 g     O .rwdata	00000028 alt_dev_null
0000c2c4 g     F .text	0000001c alt_dcache_flush_all
00006388 g     F .text	00000070 __hi0bits
00009c8c g     F .text	000000d8 __fixdfsi
0000020c g     F .text	00000040 my_interrupt_handler
0000f430 g       *ABS*	00000000 __ram_rwdata_end
0000f410 g     O .rwdata	00000008 alt_dev_list
0000b4cc g     F .text	00000124 write
0000d040 g     F .text	000000e8 _putc_r
0000d9d0 g       *ABS*	00000000 __ram_rodata_end
0000a890 g     F .text	000000d8 fstat
0000045c g     F .text	00000060 my_thread
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000071ac g     F .text	00000120 __pow5mult
00010eac g     O .bss	00000004 __nlocale_changed
00000c60 g     F .text	00000008 __umodsi3
000112f0 g       *ABS*	00000000 end
0000b860 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000d5bc g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000c234 g     F .text	00000090 alt_avalon_timer_sc_init
0000a01c g     F .text	00000080 __clzsi2
000004bc g     F .text	00000058 join_thread
0000bf84 g     F .text	00000240 altera_avalon_jtag_uart_write
00005114 g     F .text	00000004 __sfp_lock_acquire
00006064 g     F .text	000000e4 memchr
00001670 g     F .text	00001ec4 ___vfprintf_internal_r
000054dc g     F .text	00000314 _free_r
0000add8 g     F .text	00000258 alt_printf
0000d3ac g     F .text	000001b0 __call_exitprocs
00010eb0 g     O .bss	00000004 __mlocale_changed
0000f3f4 g     O .rwdata	00000004 __malloc_sbrk_base
000001d0 g     F .text	0000003c _start
00010ec4 g     O .bss	00000004 _alt_tick_rate
00006ca4 g     F .text	0000014c __lshift
00010ec8 g     O .bss	00000004 _alt_nticks
0000b070 g     F .text	00000124 read
0000b684 g     F .text	0000005c alt_sys_init
0000d274 g     F .text	00000134 __register_exitproc
00006df0 g     F .text	00000254 __multiply
0000bbf8 g     F .text	00000074 altera_avalon_jtag_uart_close
00000c68 g     F .text	00000038 __mulsi3
0000d9d0 g       *ABS*	00000000 __ram_rwdata_start
0000d5c0 g       *ABS*	00000000 __ram_rodata_start
00010ed0 g     O .bss	00000028 __malloc_current_mallinfo
0000699c g     F .text	0000017c __d2b
00000580 g     F .text	00000294 initialize_thread
0000b718 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000cdac g     F .text	000000d0 alt_get_fd
0000a4e8 g     F .text	000000c8 __fpcmp_parts_d
00007d98 g     F .text	00000070 _close_r
0000cec8 g     F .text	00000074 memcmp
0000b7c8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000112f0 g       *ABS*	00000000 __alt_stack_base
0000b810 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00003558 g     F .text	0000013c __swsetup_r
00009694 g     F .text	00000258 __divdf3
000052c0 g     F .text	000000f0 __sfp
00006800 g     F .text	00000058 __copybits
0000d9d0 g     O .rwdata	00000408 __malloc_av_
00005120 g     F .text	00000004 __sinit_lock_release
000092d0 g     F .text	000003c4 __muldf3
00007b3c g     F .text	00000060 __sread
0000f3ec g     O .rwdata	00000004 first_run
0000cc8c g     F .text	00000120 alt_find_file
0000c2e0 g     F .text	000000b4 alt_dev_llist_insert
0000ad98 g     F .text	00000020 __malloc_lock
0000b26c g     F .text	000000bc sbrk
00004e8c g     F .text	000001fc _fflush_r
00007cd0 g     F .text	000000c8 _calloc_r
00010e90 g       *ABS*	00000000 __bss_start
000062c8 g     F .text	00000098 memset
00000310 g     F .text	000000e4 main
00010ec0 g     O .bss	00000004 alt_envp
00010ea4 g     O .bss	00000004 __malloc_max_total_mem
0000b770 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000d258 g     F .text	0000001c __swbuf
00007a50 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00007f18 g     F .text	00000014 fclose
00011160 g     O .bss	00000190 _atexit0
000038d8 g     F .text	000015b4 _dtoa_r
00000cc8 g     F .text	00000740 _malloc_r
0000f41c g     O .rwdata	00000004 alt_errno
00005d54 g     F .text	000000b8 _fwalk
0000cf3c g     F .text	00000104 putc
00000b98 g     F .text	00000060 __divsi3
0000d890 g     O .rodata	00000014 __thenan_df
000053b0 g     F .text	0000012c _malloc_trim_r
0000d5c0 g       *ABS*	00000000 __CTOR_END__
00007b9c g     F .text	000000bc strcmp
0000d5c0 g       *ABS*	00000000 __flash_rodata_start
0000d5c0 g       *ABS*	00000000 __DTOR_LIST__
00000814 g     F .text	00000308 my_scheduler
00009974 g     F .text	00000088 __nedf2
0000b650 g     F .text	00000034 alt_irq_init
0000b1f4 g     F .text	00000078 alt_release_fd
0000d8a4 g     O .rodata	00000100 __clz_tab
00010eb4 g     O .bss	00000004 _PathLocale
0000ce7c g     F .text	00000014 atexit
00007c58 g     F .text	00000078 _write_r
00005eb4 g     F .text	0000001c setlocale
0000f3f8 g     O .rwdata	00000004 _impure_ptr
00010eb8 g     O .bss	00000004 alt_argc
00010e90 g     O .bss	00000004 from_handler
0000c458 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
0000651c g     F .text	00000080 __ulp
000079e0 g     F .text	00000040 __isinfd
000051d8 g     F .text	00000018 __fp_unlock_all
0000f408 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005e20 g     F .text	00000010 localeconv
0000c4d8 g     F .text	00000050 alt_ic_isr_register
0000f430 g       *ABS*	00000000 _edata
000112f0 g       *ABS*	00000000 _end
000001d0 g       *ABS*	00000000 __ram_exceptions_end
0000bc6c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00010e98 g     O .bss	00000004 main_context
000003f4 g     F .text	00000040 prototype_os
0000c5c4 g     F .text	000000a0 alt_ic_irq_disable
00007ac0 g     F .text	0000007c __swrite
0000f3f0 g     O .rwdata	00000004 __malloc_trim_threshold
0000ce90 g     F .text	00000038 exit
00005c8c g     F .text	000000c8 _fwalk_reent
00006b18 g     F .text	0000018c __mdiff
00000bf8 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005118 g     F .text	00000004 __sfp_lock_release
0000d59c g     F .text	00000020 _exit
00007a20 g     F .text	00000030 __isnand
0000a5b0 g     F .text	00000154 alt_alarm_start
00009ef8 g     F .text	00000124 __muldi3
00005ed0 g     F .text	00000194 __smakebuf_r
000015a4 g     F .text	00000074 strlen
0000c9ec g     F .text	0000018c open
00009a84 g     F .text	00000088 __gedf2
0000b030 g     F .text	00000040 alt_putchar
08000000 g       *ABS*	00000000 __alt_mem_SRAM
0000c4bc g     F .text	0000001c alt_icache_flush_all
0000f42c g     O .rwdata	00000004 alt_priority_mask
0000c528 g     F .text	0000009c alt_ic_irq_enable
00003534 g     F .text	00000024 __vfprintf_internal
000091dc g     F .text	00000080 __subdf3
000063f8 g     F .text	000000c4 __lo0bits
0000f424 g     O .rwdata	00000008 alt_alarm_list
0000c3f4 g     F .text	00000064 _do_ctors
09000000 g       *ABS*	00000000 __alt_mem_Onchip_memory
0000a704 g     F .text	00000100 close
0000aaec g     F .text	00000080 alt_load
0000a09c g     F .text	00000314 __pack_d
00000ca0 g     F .text	00000014 free
0000511c g     F .text	00000004 __sinit_lock_acquire
00007080 g     F .text	0000012c __multadd
00006360 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08407414 	ori	at,at,464
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
.section .exceptions.exit.user, "xa"
call check_interrupt
  98:	00004340 	call	434 <check_interrupt>
beq r0, r2, GOTO
  9c:	00800526 	beq	zero,r2,b4 <GOTO>
addi r4, sp, 0
  a0:	d9000004 	addi	r4,sp,0
call my_scheduler
  a4:	00008140 	call	814 <my_scheduler>
stw  fp, -4(sp)
  a8:	df3fff15 	stw	fp,-4(sp)
addi sp, r2,0
  ac:	16c00004 	addi	sp,r2,0
ldw  fp, -4(sp)
  b0:	df3fff17 	ldw	fp,-4(sp)

000000b4 <GOTO>:
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 100:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 118:	0005313a 	rdctl	r2,ipending
 11c:	e0bffc15 	stw	r2,-16(fp)

  return active;
 120:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 124:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 128:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 12c:	00800044 	movi	r2,1
 130:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 134:	e0ffff17 	ldw	r3,-4(fp)
 138:	e0bffe17 	ldw	r2,-8(fp)
 13c:	1884703a 	and	r2,r3,r2
 140:	1005003a 	cmpeq	r2,r2,zero
 144:	1000161e 	bne	r2,zero,1a0 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	e0bffd17 	ldw	r2,-12(fp)
 14c:	00c00074 	movhi	r3,1
 150:	18c41804 	addi	r3,r3,4192
 154:	100490fa 	slli	r2,r2,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	11400017 	ldw	r5,0(r2)
 160:	e0bffd17 	ldw	r2,-12(fp)
 164:	00c00074 	movhi	r3,1
 168:	18c41804 	addi	r3,r3,4192
 16c:	100490fa 	slli	r2,r2,3
 170:	10c5883a 	add	r2,r2,r3
 174:	10800104 	addi	r2,r2,4
 178:	11000017 	ldw	r4,0(r2)
 17c:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bffb15 	stw	r2,-20(fp)

  return active;
 188:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 18c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	1004c03a 	cmpne	r2,r2,zero
 198:	103fe31e 	bne	r2,zero,128 <alt_irq_handler+0x20>
 19c:	00000706 	br	1bc <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1a0:	e0bffe17 	ldw	r2,-8(fp)
 1a4:	1085883a 	add	r2,r2,r2
 1a8:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1ac:	e0bffd17 	ldw	r2,-12(fp)
 1b0:	10800044 	addi	r2,r2,1
 1b4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b8:	003fde06 	br	134 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

Disassembly of section .text:

000001d0 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1d0:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1d4:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1d8:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1dc:	d69cfb14 	ori	gp,gp,29676
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1e0:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1e4:	1083a414 	ori	r2,r2,3728

    movhi r3, %hi(__bss_end)
     1e8:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1ec:	18c4bc14 	ori	r3,r3,4848

    beq r2, r3, 1f
     1f0:	10c00326 	beq	r2,r3,200 <_start+0x30>

0:
    stw zero, (r2)
     1f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1fc:	10fffd36 	bltu	r2,r3,1f4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     200:	000aaec0 	call	aaec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     204:	000ad2c0 	call	ad2c <alt_main>

00000208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     208:	003fff06 	br	208 <alt_after_alt_main>

0000020c <my_interrupt_handler>:
// enable an interrupt
#define ENABLE_INTERRUPTS() { \
asm("movi et, 1"); \
asm("wrctl status, et"); \
}
alt_u32 my_interrupt_handler(){
     20c:	defffe04 	addi	sp,sp,-8
     210:	dfc00115 	stw	ra,4(sp)
     214:	df000015 	stw	fp,0(sp)
     218:	d839883a 	mov	fp,sp
	DISABLE_INTERRUPTS();
     21c:	0001703a 	wrctl	status,zero
	printf("handler\n");
     220:	01000074 	movhi	r4,1
     224:	21357004 	addi	r4,r4,-10816
     228:	00015200 	call	1520 <puts>
	from_handler = 1;
     22c:	00800044 	movi	r2,1
     230:	d0a6a915 	stw	r2,-25948(gp)
	return 0;
     234:	0005883a 	mov	r2,zero
}
     238:	e037883a 	mov	sp,fp
     23c:	dfc00117 	ldw	ra,4(sp)
     240:	df000017 	ldw	fp,0(sp)
     244:	dec00204 	addi	sp,sp,8
     248:	f800283a 	ret

0000024c <initialize_alarm>:

void initialize_alarm(){
     24c:	defffe04 	addi	sp,sp,-8
     250:	dfc00115 	stw	ra,4(sp)
     254:	df000015 	stw	fp,0(sp)
     258:	d839883a 	mov	fp,sp
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     25c:	00800074 	movhi	r2,1
     260:	1083b104 	addi	r2,r2,3780
     264:	10800017 	ldw	r2,0(r2)
     268:	100b883a 	mov	r5,r2
	if(alt_alarm_start(&alarm, alt_ticks_per_second(), my_interrupt_handler, NULL) != 0){
     26c:	01000074 	movhi	r4,1
     270:	2103be04 	addi	r4,r4,3832
     274:	01800034 	movhi	r6,0
     278:	31808304 	addi	r6,r6,524
     27c:	000f883a 	mov	r7,zero
     280:	000a5b00 	call	a5b0 <alt_alarm_start>
     284:	1005003a 	cmpeq	r2,r2,zero
     288:	1000031e 	bne	r2,zero,298 <initialize_alarm+0x4c>
				printf("ERROR WITH TIMER");
     28c:	01000074 	movhi	r4,1
     290:	21357204 	addi	r4,r4,-10808
     294:	00014080 	call	1408 <printf>
			}
}
     298:	e037883a 	mov	sp,fp
     29c:	dfc00117 	ldw	ra,4(sp)
     2a0:	df000017 	ldw	fp,0(sp)
     2a4:	dec00204 	addi	sp,sp,8
     2a8:	f800283a 	ret

000002ac <reset_alarm>:

void reset_alarm(alt_u32 ticks){
     2ac:	defffd04 	addi	sp,sp,-12
     2b0:	dfc00215 	stw	ra,8(sp)
     2b4:	df000115 	stw	fp,4(sp)
     2b8:	df000104 	addi	fp,sp,4
     2bc:	e13fff15 	stw	r4,-4(fp)
	alt_alarm_stop(&alarm);
     2c0:	01000074 	movhi	r4,1
     2c4:	2103be04 	addi	r4,r4,3832
     2c8:	000b3280 	call	b328 <alt_alarm_stop>
	if(alt_alarm_start(&alarm, ticks, my_interrupt_handler, NULL) != 0){
     2cc:	01000074 	movhi	r4,1
     2d0:	2103be04 	addi	r4,r4,3832
     2d4:	e17fff17 	ldw	r5,-4(fp)
     2d8:	01800034 	movhi	r6,0
     2dc:	31808304 	addi	r6,r6,524
     2e0:	000f883a 	mov	r7,zero
     2e4:	000a5b00 	call	a5b0 <alt_alarm_start>
     2e8:	1005003a 	cmpeq	r2,r2,zero
     2ec:	1000031e 	bne	r2,zero,2fc <reset_alarm+0x50>
				printf("ERROR WITH TIMER");
     2f0:	01000074 	movhi	r4,1
     2f4:	21357204 	addi	r4,r4,-10808
     2f8:	00014080 	call	1408 <printf>
			}
}
     2fc:	e037883a 	mov	sp,fp
     300:	dfc00117 	ldw	ra,4(sp)
     304:	df000017 	ldw	fp,0(sp)
     308:	dec00204 	addi	sp,sp,8
     30c:	f800283a 	ret

00000310 <main>:
#define ALARMTICKS(x) ((alt_ticks_per_second()*(x))/10)
#define MAX 2555

// Note that ALARMTICKS(5) = 1 * 5 / 10 or 0.5 seconds
int main()
{
     310:	defffd04 	addi	sp,sp,-12
     314:	dfc00215 	stw	ra,8(sp)
     318:	df000115 	stw	fp,4(sp)
     31c:	df000104 	addi	fp,sp,4
	int i;
	for(i=0;i<5;i++){
     320:	e03fff15 	stw	zero,-4(fp)
     324:	00000606 	br	340 <main+0x30>
		initialize_thread(i, 0);
     328:	e13fff17 	ldw	r4,-4(fp)
     32c:	000b883a 	mov	r5,zero
     330:	00005800 	call	580 <initialize_thread>

// Note that ALARMTICKS(5) = 1 * 5 / 10 or 0.5 seconds
int main()
{
	int i;
	for(i=0;i<5;i++){
     334:	e0bfff17 	ldw	r2,-4(fp)
     338:	10800044 	addi	r2,r2,1
     33c:	e0bfff15 	stw	r2,-4(fp)
     340:	e0bfff17 	ldw	r2,-4(fp)
     344:	10800150 	cmplti	r2,r2,5
     348:	103ff71e 	bne	r2,zero,328 <main+0x18>
		initialize_thread(i, 0);
	}
	for(i=5;i<8;i++){
     34c:	00800144 	movi	r2,5
     350:	e0bfff15 	stw	r2,-4(fp)
     354:	00000606 	br	370 <main+0x60>
		initialize_thread(i, 1);
     358:	e13fff17 	ldw	r4,-4(fp)
     35c:	01400044 	movi	r5,1
     360:	00005800 	call	580 <initialize_thread>
{
	int i;
	for(i=0;i<5;i++){
		initialize_thread(i, 0);
	}
	for(i=5;i<8;i++){
     364:	e0bfff17 	ldw	r2,-4(fp)
     368:	10800044 	addi	r2,r2,1
     36c:	e0bfff15 	stw	r2,-4(fp)
     370:	e0bfff17 	ldw	r2,-4(fp)
     374:	10800210 	cmplti	r2,r2,8
     378:	103ff71e 	bne	r2,zero,358 <main+0x48>
		initialize_thread(i, 1);
	}
	for(i=8;i<12;i++){
     37c:	00800204 	movi	r2,8
     380:	e0bfff15 	stw	r2,-4(fp)
     384:	00000606 	br	3a0 <main+0x90>
		initialize_thread(i, 2);
     388:	e13fff17 	ldw	r4,-4(fp)
     38c:	01400084 	movi	r5,2
     390:	00005800 	call	580 <initialize_thread>
		initialize_thread(i, 0);
	}
	for(i=5;i<8;i++){
		initialize_thread(i, 1);
	}
	for(i=8;i<12;i++){
     394:	e0bfff17 	ldw	r2,-4(fp)
     398:	10800044 	addi	r2,r2,1
     39c:	e0bfff15 	stw	r2,-4(fp)
     3a0:	e0bfff17 	ldw	r2,-4(fp)
     3a4:	10800310 	cmplti	r2,r2,12
     3a8:	103ff71e 	bne	r2,zero,388 <main+0x78>
		initialize_thread(i, 2);
	}
	initialize_alarm();
     3ac:	000024c0 	call	24c <initialize_alarm>
	//alt_printf("This is my prototype OS.\n");

	for(i=0;i<12;i++){
     3b0:	e03fff15 	stw	zero,-4(fp)
     3b4:	00000506 	br	3cc <main+0xbc>
		join_thread(i);
     3b8:	e13fff17 	ldw	r4,-4(fp)
     3bc:	00004bc0 	call	4bc <join_thread>
		initialize_thread(i, 2);
	}
	initialize_alarm();
	//alt_printf("This is my prototype OS.\n");

	for(i=0;i<12;i++){
     3c0:	e0bfff17 	ldw	r2,-4(fp)
     3c4:	10800044 	addi	r2,r2,1
     3c8:	e0bfff15 	stw	r2,-4(fp)
     3cc:	e0bfff17 	ldw	r2,-4(fp)
     3d0:	10800310 	cmplti	r2,r2,12
     3d4:	103ff81e 	bne	r2,zero,3b8 <main+0xa8>
		join_thread(i);
	}
	prototype_os();
     3d8:	00003f40 	call	3f4 <prototype_os>
	return 0;
     3dc:	0005883a 	mov	r2,zero
}
     3e0:	e037883a 	mov	sp,fp
     3e4:	dfc00117 	ldw	ra,4(sp)
     3e8:	df000017 	ldw	fp,0(sp)
     3ec:	dec00204 	addi	sp,sp,8
     3f0:	f800283a 	ret

000003f4 <prototype_os>:
void prototype_os()
{
     3f4:	defffd04 	addi	sp,sp,-12
     3f8:	dfc00215 	stw	ra,8(sp)
     3fc:	df000115 	stw	fp,4(sp)
     400:	df000104 	addi	fp,sp,4
	// initialize the timer and its interrupt handler

	while (1)
	{
		printf("This is my prototype OS.\n");
     404:	01000074 	movhi	r4,1
     408:	21357704 	addi	r4,r4,-10788
     40c:	00015200 	call	1520 <puts>
		int j;
	// a delay loop is used below. Try adjust the value of MAX
	for (j = 0; j < 2554; j++){
     410:	e03fff15 	stw	zero,-4(fp)
     414:	00000306 	br	424 <prototype_os+0x30>
     418:	e0bfff17 	ldw	r2,-4(fp)
     41c:	10800044 	addi	r2,r2,1
     420:	e0bfff15 	stw	r2,-4(fp)
     424:	e0bfff17 	ldw	r2,-4(fp)
     428:	10827e90 	cmplti	r2,r2,2554
     42c:	103ffa1e 	bne	r2,zero,418 <prototype_os+0x24>

	}
	}
     430:	003ff406 	br	404 <prototype_os+0x10>

00000434 <check_interrupt>:
	alt_u32 runs;
};
struct thread threads[12];
alt_u32 current_thread = 0;
extern from_handler;
int check_interrupt(){
     434:	deffff04 	addi	sp,sp,-4
     438:	df000015 	stw	fp,0(sp)
     43c:	d839883a 	mov	fp,sp
	if(from_handler == 1){
	//printf("check:%x\n",current_thread );
		}
	return from_handler;
     440:	00800074 	movhi	r2,1
     444:	1083a404 	addi	r2,r2,3728
     448:	10800017 	ldw	r2,0(r2)
}
     44c:	e037883a 	mov	sp,fp
     450:	df000017 	ldw	fp,0(sp)
     454:	dec00104 	addi	sp,sp,4
     458:	f800283a 	ret

0000045c <my_thread>:
void my_thread(alt_u32 thread_id){
     45c:	defffc04 	addi	sp,sp,-16
     460:	dfc00315 	stw	ra,12(sp)
     464:	df000215 	stw	fp,8(sp)
     468:	df000204 	addi	fp,sp,8
     46c:	e13fff15 	stw	r4,-4(fp)
	//DISABLE_INTERRUPTS();
	int i = 0;
     470:	e03ffe15 	stw	zero,-8(fp)
	for(i=0; i<0xFFFFF; i++){
     474:	e03ffe15 	stw	zero,-8(fp)
     478:	00000306 	br	488 <my_thread+0x2c>
     47c:	e0bffe17 	ldw	r2,-8(fp)
     480:	10800044 	addi	r2,r2,1
     484:	e0bffe15 	stw	r2,-8(fp)
     488:	e0fffe17 	ldw	r3,-8(fp)
     48c:	00800434 	movhi	r2,16
     490:	10bfff84 	addi	r2,r2,-2
     494:	10fff90e 	bge	r2,r3,47c <my_thread+0x20>

	}
	alt_printf("This is my thread:%x\n", thread_id);
     498:	01000074 	movhi	r4,1
     49c:	21357e04 	addi	r4,r4,-10760
     4a0:	e17fff17 	ldw	r5,-4(fp)
     4a4:	000add80 	call	add8 <alt_printf>
	//DISABLE_INTERRUPTS();
}
     4a8:	e037883a 	mov	sp,fp
     4ac:	dfc00117 	ldw	ra,4(sp)
     4b0:	df000017 	ldw	fp,0(sp)
     4b4:	dec00204 	addi	sp,sp,8
     4b8:	f800283a 	ret

000004bc <join_thread>:
void join_thread(alt_u32 id){
     4bc:	defffc04 	addi	sp,sp,-16
     4c0:	dfc00315 	stw	ra,12(sp)
     4c4:	df000215 	stw	fp,8(sp)
     4c8:	dc000115 	stw	r16,4(sp)
     4cc:	df000104 	addi	fp,sp,4
     4d0:	e13fff15 	stw	r4,-4(fp)
	while(threads[id].state != 2){
     4d4:	e13fff17 	ldw	r4,-4(fp)
     4d8:	04000074 	movhi	r16,1
     4dc:	8403c404 	addi	r16,r16,3856
     4e0:	01400704 	movi	r5,28
     4e4:	0000c680 	call	c68 <__mulsi3>
     4e8:	1405883a 	add	r2,r2,r16
     4ec:	10800404 	addi	r2,r2,16
     4f0:	10800017 	ldw	r2,0(r2)
     4f4:	10800098 	cmpnei	r2,r2,2
     4f8:	103ff61e 	bne	r2,zero,4d4 <join_thread+0x18>

	}
}
     4fc:	e037883a 	mov	sp,fp
     500:	dfc00217 	ldw	ra,8(sp)
     504:	df000117 	ldw	fp,4(sp)
     508:	dc000017 	ldw	r16,0(sp)
     50c:	dec00304 	addi	sp,sp,12
     510:	f800283a 	ret

00000514 <destroy_thread>:
void destroy_thread(){
     514:	defffc04 	addi	sp,sp,-16
     518:	dfc00315 	stw	ra,12(sp)
     51c:	df000215 	stw	fp,8(sp)
     520:	dc000115 	stw	r16,4(sp)
     524:	df000104 	addi	fp,sp,4
	DISABLE_INTERRUPTS();
     528:	0001703a 	wrctl	status,zero
	//free(threads[current_thread].stack_address);
	threads[current_thread].state = 2;
     52c:	d126aa17 	ldw	r4,-25944(gp)
     530:	04000074 	movhi	r16,1
     534:	8403c404 	addi	r16,r16,3856
     538:	01400704 	movi	r5,28
     53c:	0000c680 	call	c68 <__mulsi3>
     540:	1405883a 	add	r2,r2,r16
     544:	10c00404 	addi	r3,r2,16
     548:	00800084 	movi	r2,2
     54c:	18800015 	stw	r2,0(r3)
	ENABLE_INTERRUPTS();
     550:	06000044 	movi	et,1
     554:	c001703a 	wrctl	status,et
	while(1){
		int i = 0;
     558:	e03fff15 	stw	zero,-4(fp)
		for(i=0; i<2555; i++){
     55c:	e03fff15 	stw	zero,-4(fp)
     560:	00000306 	br	570 <destroy_thread+0x5c>
     564:	e0bfff17 	ldw	r2,-4(fp)
     568:	10800044 	addi	r2,r2,1
     56c:	e0bfff15 	stw	r2,-4(fp)
     570:	e0bfff17 	ldw	r2,-4(fp)
     574:	10827ed0 	cmplti	r2,r2,2555
     578:	103ffa1e 	bne	r2,zero,564 <destroy_thread+0x50>

		}
	}
     57c:	003ff606 	br	558 <destroy_thread+0x44>

00000580 <initialize_thread>:
}

void initialize_thread(int num_thread, int priority){
     580:	defff904 	addi	sp,sp,-28
     584:	dfc00615 	stw	ra,24(sp)
     588:	df000515 	stw	fp,20(sp)
     58c:	dc800415 	stw	r18,16(sp)
     590:	dc400315 	stw	r17,12(sp)
     594:	dc000215 	stw	r16,8(sp)
     598:	df000204 	addi	fp,sp,8
     59c:	e13ffe15 	stw	r4,-8(fp)
     5a0:	e17fff15 	stw	r5,-4(fp)

		threads[num_thread].stack_size = 700;
     5a4:	e13ffe17 	ldw	r4,-8(fp)
     5a8:	04000074 	movhi	r16,1
     5ac:	8403c404 	addi	r16,r16,3856
     5b0:	01400704 	movi	r5,28
     5b4:	0000c680 	call	c68 <__mulsi3>
     5b8:	1405883a 	add	r2,r2,r16
     5bc:	10c00204 	addi	r3,r2,8
     5c0:	0080af04 	movi	r2,700
     5c4:	18800015 	stw	r2,0(r3)
		threads[num_thread].stack_address = malloc(threads[num_thread].stack_size);
     5c8:	e4bffe17 	ldw	r18,-8(fp)
     5cc:	e13ffe17 	ldw	r4,-8(fp)
     5d0:	04000074 	movhi	r16,1
     5d4:	8403c404 	addi	r16,r16,3856
     5d8:	01400704 	movi	r5,28
     5dc:	0000c680 	call	c68 <__mulsi3>
     5e0:	1405883a 	add	r2,r2,r16
     5e4:	10800204 	addi	r2,r2,8
     5e8:	11000017 	ldw	r4,0(r2)
     5ec:	0000cb40 	call	cb4 <malloc>
     5f0:	1023883a 	mov	r17,r2
     5f4:	04000074 	movhi	r16,1
     5f8:	8403c404 	addi	r16,r16,3856
     5fc:	9009883a 	mov	r4,r18
     600:	01400704 	movi	r5,28
     604:	0000c680 	call	c68 <__mulsi3>
     608:	1405883a 	add	r2,r2,r16
     60c:	10800104 	addi	r2,r2,4
     610:	14400015 	stw	r17,0(r2)
		threads[num_thread].stack_pointer = (threads[num_thread].stack_address+threads[num_thread].stack_size-19);
     614:	e4bffe17 	ldw	r18,-8(fp)
     618:	e13ffe17 	ldw	r4,-8(fp)
     61c:	04000074 	movhi	r16,1
     620:	8403c404 	addi	r16,r16,3856
     624:	01400704 	movi	r5,28
     628:	0000c680 	call	c68 <__mulsi3>
     62c:	1405883a 	add	r2,r2,r16
     630:	10800104 	addi	r2,r2,4
     634:	14400017 	ldw	r17,0(r2)
     638:	e13ffe17 	ldw	r4,-8(fp)
     63c:	04000074 	movhi	r16,1
     640:	8403c404 	addi	r16,r16,3856
     644:	01400704 	movi	r5,28
     648:	0000c680 	call	c68 <__mulsi3>
     64c:	1405883a 	add	r2,r2,r16
     650:	10800204 	addi	r2,r2,8
     654:	10800017 	ldw	r2,0(r2)
     658:	1085883a 	add	r2,r2,r2
     65c:	1085883a 	add	r2,r2,r2
     660:	8885883a 	add	r2,r17,r2
     664:	147fed04 	addi	r17,r2,-76
     668:	04000074 	movhi	r16,1
     66c:	8403c404 	addi	r16,r16,3856
     670:	9009883a 	mov	r4,r18
     674:	01400704 	movi	r5,28
     678:	0000c680 	call	c68 <__mulsi3>
     67c:	1405883a 	add	r2,r2,r16
     680:	10800304 	addi	r2,r2,12
     684:	14400015 	stw	r17,0(r2)
		//threads[num_thread].stack_pointer = (alt_u32 *)(threads[num_thread].stack_address+threads[num_thread].stack_size/2);
		threads[num_thread].state = 0;
     688:	e13ffe17 	ldw	r4,-8(fp)
     68c:	04000074 	movhi	r16,1
     690:	8403c404 	addi	r16,r16,3856
     694:	01400704 	movi	r5,28
     698:	0000c680 	call	c68 <__mulsi3>
     69c:	1405883a 	add	r2,r2,r16
     6a0:	10800404 	addi	r2,r2,16
     6a4:	10000015 	stw	zero,0(r2)
		threads[num_thread].priority=priority;
     6a8:	e13ffe17 	ldw	r4,-8(fp)
     6ac:	e47fff17 	ldw	r17,-4(fp)
     6b0:	04000074 	movhi	r16,1
     6b4:	8403c404 	addi	r16,r16,3856
     6b8:	01400704 	movi	r5,28
     6bc:	0000c680 	call	c68 <__mulsi3>
     6c0:	1405883a 	add	r2,r2,r16
     6c4:	10800504 	addi	r2,r2,20
     6c8:	14400015 	stw	r17,0(r2)

		//initialize stack
		threads[num_thread].stack_pointer[-1] = threads[num_thread].stack_address+threads[num_thread].stack_size;
     6cc:	e13ffe17 	ldw	r4,-8(fp)
     6d0:	04000074 	movhi	r16,1
     6d4:	8403c404 	addi	r16,r16,3856
     6d8:	01400704 	movi	r5,28
     6dc:	0000c680 	call	c68 <__mulsi3>
     6e0:	1405883a 	add	r2,r2,r16
     6e4:	10800304 	addi	r2,r2,12
     6e8:	10800017 	ldw	r2,0(r2)
     6ec:	147fff04 	addi	r17,r2,-4
     6f0:	e13ffe17 	ldw	r4,-8(fp)
     6f4:	04000074 	movhi	r16,1
     6f8:	8403c404 	addi	r16,r16,3856
     6fc:	01400704 	movi	r5,28
     700:	0000c680 	call	c68 <__mulsi3>
     704:	1405883a 	add	r2,r2,r16
     708:	10800104 	addi	r2,r2,4
     70c:	14800017 	ldw	r18,0(r2)
     710:	e13ffe17 	ldw	r4,-8(fp)
     714:	04000074 	movhi	r16,1
     718:	8403c404 	addi	r16,r16,3856
     71c:	01400704 	movi	r5,28
     720:	0000c680 	call	c68 <__mulsi3>
     724:	1405883a 	add	r2,r2,r16
     728:	10800204 	addi	r2,r2,8
     72c:	10800017 	ldw	r2,0(r2)
     730:	1085883a 	add	r2,r2,r2
     734:	1085883a 	add	r2,r2,r2
     738:	9085883a 	add	r2,r18,r2
     73c:	88800015 	stw	r2,0(r17)
		threads[num_thread].stack_pointer[0] = &destroy_thread;
     740:	e13ffe17 	ldw	r4,-8(fp)
     744:	04000074 	movhi	r16,1
     748:	8403c404 	addi	r16,r16,3856
     74c:	01400704 	movi	r5,28
     750:	0000c680 	call	c68 <__mulsi3>
     754:	1405883a 	add	r2,r2,r16
     758:	10800304 	addi	r2,r2,12
     75c:	10c00017 	ldw	r3,0(r2)
     760:	00800034 	movhi	r2,0
     764:	10814504 	addi	r2,r2,1300
     768:	18800015 	stw	r2,0(r3)
		threads[num_thread].stack_pointer[5] = num_thread;
     76c:	e13ffe17 	ldw	r4,-8(fp)
     770:	04000074 	movhi	r16,1
     774:	8403c404 	addi	r16,r16,3856
     778:	01400704 	movi	r5,28
     77c:	0000c680 	call	c68 <__mulsi3>
     780:	1405883a 	add	r2,r2,r16
     784:	10800304 	addi	r2,r2,12
     788:	10800017 	ldw	r2,0(r2)
     78c:	10c00504 	addi	r3,r2,20
     790:	e0bffe17 	ldw	r2,-8(fp)
     794:	18800015 	stw	r2,0(r3)
		threads[num_thread].stack_pointer[18] = &my_thread; //72
     798:	e13ffe17 	ldw	r4,-8(fp)
     79c:	04000074 	movhi	r16,1
     7a0:	8403c404 	addi	r16,r16,3856
     7a4:	01400704 	movi	r5,28
     7a8:	0000c680 	call	c68 <__mulsi3>
     7ac:	1405883a 	add	r2,r2,r16
     7b0:	10800304 	addi	r2,r2,12
     7b4:	10800017 	ldw	r2,0(r2)
     7b8:	10c01204 	addi	r3,r2,72
     7bc:	00800034 	movhi	r2,0
     7c0:	10811704 	addi	r2,r2,1116
     7c4:	18800015 	stw	r2,0(r3)
		threads[num_thread].stack_pointer[17] = 1;
     7c8:	e13ffe17 	ldw	r4,-8(fp)
     7cc:	04000074 	movhi	r16,1
     7d0:	8403c404 	addi	r16,r16,3856
     7d4:	01400704 	movi	r5,28
     7d8:	0000c680 	call	c68 <__mulsi3>
     7dc:	1405883a 	add	r2,r2,r16
     7e0:	10800304 	addi	r2,r2,12
     7e4:	10800017 	ldw	r2,0(r2)
     7e8:	10c01104 	addi	r3,r2,68
     7ec:	00800044 	movi	r2,1
     7f0:	18800015 	stw	r2,0(r3)
}
     7f4:	e037883a 	mov	sp,fp
     7f8:	dfc00417 	ldw	ra,16(sp)
     7fc:	df000317 	ldw	fp,12(sp)
     800:	dc800217 	ldw	r18,8(sp)
     804:	dc400117 	ldw	r17,4(sp)
     808:	dc000017 	ldw	r16,0(sp)
     80c:	dec00504 	addi	sp,sp,20
     810:	f800283a 	ret

00000814 <my_scheduler>:
int first_run = 1;
alt_u32 *main_context;
alt_u32 my_scheduler(alt_u32 sp){//round robin
     814:	defff704 	addi	sp,sp,-36
     818:	dfc00815 	stw	ra,32(sp)
     81c:	df000715 	stw	fp,28(sp)
     820:	dc800615 	stw	r18,24(sp)
     824:	dc400515 	stw	r17,20(sp)
     828:	dc000415 	stw	r16,16(sp)
     82c:	df000404 	addi	fp,sp,16
     830:	e13ffe15 	stw	r4,-8(fp)
	from_handler = 0;
     834:	00800074 	movhi	r2,1
     838:	1083a404 	addi	r2,r2,3728
     83c:	10000015 	stw	zero,0(r2)
	if(first_run == 1){
     840:	d0a00017 	ldw	r2,-32768(gp)
     844:	10800058 	cmpnei	r2,r2,1
     848:	1000031e 	bne	r2,zero,858 <my_scheduler+0x44>
		main_context = sp;
     84c:	e0bffe17 	ldw	r2,-8(fp)
     850:	d0a6ab15 	stw	r2,-25940(gp)
		first_run =0;
     854:	d0200015 	stw	zero,-32768(gp)
	}



	/* This section of code is for testing to make sure the threads haven't finished */
	int thread_count = 0;
     858:	e03ffd15 	stw	zero,-12(fp)
	if(threads[current_thread].state == 1)						//Check to see if thread is in "Running" state
     85c:	d126aa17 	ldw	r4,-25944(gp)
     860:	04000074 	movhi	r16,1
     864:	8403c404 	addi	r16,r16,3856
     868:	01400704 	movi	r5,28
     86c:	0000c680 	call	c68 <__mulsi3>
     870:	1405883a 	add	r2,r2,r16
     874:	10800404 	addi	r2,r2,16
     878:	10800017 	ldw	r2,0(r2)
     87c:	10800058 	cmpnei	r2,r2,1
     880:	10002c1e 	bne	r2,zero,934 <my_scheduler+0x120>
	{
		alt_printf("This test ran\n");
     884:	01000074 	movhi	r4,1
     888:	21358404 	addi	r4,r4,-10736
     88c:	000add80 	call	add8 <alt_printf>
		threads[current_thread].state = 3;//If so we change the state to paused
     890:	d126aa17 	ldw	r4,-25944(gp)
     894:	04000074 	movhi	r16,1
     898:	8403c404 	addi	r16,r16,3856
     89c:	01400704 	movi	r5,28
     8a0:	0000c680 	call	c68 <__mulsi3>
     8a4:	1405883a 	add	r2,r2,r16
     8a8:	10c00404 	addi	r3,r2,16
     8ac:	008000c4 	movi	r2,3
     8b0:	18800015 	stw	r2,0(r3)
		threads[current_thread].stack_pointer = sp;
     8b4:	d126aa17 	ldw	r4,-25944(gp)
     8b8:	e47ffe17 	ldw	r17,-8(fp)
     8bc:	04000074 	movhi	r16,1
     8c0:	8403c404 	addi	r16,r16,3856
     8c4:	01400704 	movi	r5,28
     8c8:	0000c680 	call	c68 <__mulsi3>
     8cc:	1405883a 	add	r2,r2,r16
     8d0:	10800304 	addi	r2,r2,12
     8d4:	14400015 	stw	r17,0(r2)
		alt_printf("stack pointer_after run thread[%x]: %x\n", current_thread, sp);
     8d8:	d166aa17 	ldw	r5,-25944(gp)
     8dc:	01000074 	movhi	r4,1
     8e0:	21358804 	addi	r4,r4,-10720
     8e4:	e1bffe17 	ldw	r6,-8(fp)
     8e8:	000add80 	call	add8 <alt_printf>
		current_thread = (current_thread+1)%12;					//and move on to the next thread
     8ec:	d0a6aa17 	ldw	r2,-25944(gp)
     8f0:	11000044 	addi	r4,r2,1
     8f4:	01400304 	movi	r5,12
     8f8:	0000c600 	call	c60 <__umodsi3>
     8fc:	d0a6aa15 	stw	r2,-25944(gp)
	}
	while(threads[current_thread].state == 2 && thread_count < 12)
     900:	00000c06 	br	934 <my_scheduler+0x120>
	{
		alt_printf("thread %x is dead\n", current_thread);
     904:	d166aa17 	ldw	r5,-25944(gp)
     908:	01000074 	movhi	r4,1
     90c:	21359204 	addi	r4,r4,-10680
     910:	000add80 	call	add8 <alt_printf>
		thread_count++;											//This is used to keep track to see how many times we've run through the code
     914:	e0bffd17 	ldw	r2,-12(fp)
     918:	10800044 	addi	r2,r2,1
     91c:	e0bffd15 	stw	r2,-12(fp)
		current_thread = (current_thread+1)%12;					//Move to the next thread
     920:	d0a6aa17 	ldw	r2,-25944(gp)
     924:	11000044 	addi	r4,r2,1
     928:	01400304 	movi	r5,12
     92c:	0000c600 	call	c60 <__umodsi3>
     930:	d0a6aa15 	stw	r2,-25944(gp)
		threads[current_thread].state = 3;//If so we change the state to paused
		threads[current_thread].stack_pointer = sp;
		alt_printf("stack pointer_after run thread[%x]: %x\n", current_thread, sp);
		current_thread = (current_thread+1)%12;					//and move on to the next thread
	}
	while(threads[current_thread].state == 2 && thread_count < 12)
     934:	d126aa17 	ldw	r4,-25944(gp)
     938:	04000074 	movhi	r16,1
     93c:	8403c404 	addi	r16,r16,3856
     940:	01400704 	movi	r5,28
     944:	0000c680 	call	c68 <__mulsi3>
     948:	1405883a 	add	r2,r2,r16
     94c:	10800404 	addi	r2,r2,16
     950:	10800017 	ldw	r2,0(r2)
     954:	10800098 	cmpnei	r2,r2,2
     958:	1000031e 	bne	r2,zero,968 <my_scheduler+0x154>
     95c:	e0bffd17 	ldw	r2,-12(fp)
     960:	10800310 	cmplti	r2,r2,12
     964:	103fe71e 	bne	r2,zero,904 <my_scheduler+0xf0>
		current_thread = (current_thread+1)%12;					//Move to the next thread
	}
	if(threads[current_thread].runs == 1){
		//printf("Test:%x", *sp);
	}
if(thread_count == 12){ // all are dead
     968:	e0bffd17 	ldw	r2,-12(fp)
     96c:	10800318 	cmpnei	r2,r2,12
     970:	1000031e 	bne	r2,zero,980 <my_scheduler+0x16c>
	//first_run = 1;
	//alt_alarm_stop(&alarm);
	return main_context;
     974:	d0a6ab17 	ldw	r2,-25940(gp)
     978:	e0bfff15 	stw	r2,-4(fp)
     97c:	00005e06 	br	af8 <my_scheduler+0x2e4>
}
	threads[current_thread].state = 1;  // set to running
     980:	d126aa17 	ldw	r4,-25944(gp)
     984:	04000074 	movhi	r16,1
     988:	8403c404 	addi	r16,r16,3856
     98c:	01400704 	movi	r5,28
     990:	0000c680 	call	c68 <__mulsi3>
     994:	1405883a 	add	r2,r2,r16
     998:	10c00404 	addi	r3,r2,16
     99c:	00800044 	movi	r2,1
     9a0:	18800015 	stw	r2,0(r3)
	//alt_printf("test:%x\n",current_thread );
	//threads[current_thread].stack_pointer[0] =  &destroy_thread;


	/* This is for setting the run quantum time */
	int x = 1;
     9a4:	00800044 	movi	r2,1
     9a8:	e0bffc15 	stw	r2,-16(fp)
	if(threads[current_thread].priority == 0)
     9ac:	d126aa17 	ldw	r4,-25944(gp)
     9b0:	04000074 	movhi	r16,1
     9b4:	8403c404 	addi	r16,r16,3856
     9b8:	01400704 	movi	r5,28
     9bc:	0000c680 	call	c68 <__mulsi3>
     9c0:	1405883a 	add	r2,r2,r16
     9c4:	10800504 	addi	r2,r2,20
     9c8:	10800017 	ldw	r2,0(r2)
     9cc:	1004c03a 	cmpne	r2,r2,zero
     9d0:	1000021e 	bne	r2,zero,9dc <my_scheduler+0x1c8>
		x = 2;
     9d4:	00800084 	movi	r2,2
     9d8:	e0bffc15 	stw	r2,-16(fp)
	if(threads[current_thread].priority == 1)
     9dc:	d126aa17 	ldw	r4,-25944(gp)
     9e0:	04000074 	movhi	r16,1
     9e4:	8403c404 	addi	r16,r16,3856
     9e8:	01400704 	movi	r5,28
     9ec:	0000c680 	call	c68 <__mulsi3>
     9f0:	1405883a 	add	r2,r2,r16
     9f4:	10800504 	addi	r2,r2,20
     9f8:	10800017 	ldw	r2,0(r2)
     9fc:	10800058 	cmpnei	r2,r2,1
     a00:	1000021e 	bne	r2,zero,a0c <my_scheduler+0x1f8>
		x = 1.5;
     a04:	00800044 	movi	r2,1
     a08:	e0bffc15 	stw	r2,-16(fp)
     a0c:	00800074 	movhi	r2,1
     a10:	1083b104 	addi	r2,r2,3780
     a14:	10800017 	ldw	r2,0(r2)
     a18:	1009883a 	mov	r4,r2
	reset_alarm(alt_ticks_per_second()*x);
     a1c:	e17ffc17 	ldw	r5,-16(fp)
     a20:	0000c680 	call	c68 <__mulsi3>
     a24:	1009883a 	mov	r4,r2
     a28:	00002ac0 	call	2ac <reset_alarm>
	threads[current_thread].runs++;
     a2c:	d466aa17 	ldw	r17,-25944(gp)
     a30:	04000074 	movhi	r16,1
     a34:	8403c404 	addi	r16,r16,3856
     a38:	8809883a 	mov	r4,r17
     a3c:	01400704 	movi	r5,28
     a40:	0000c680 	call	c68 <__mulsi3>
     a44:	1405883a 	add	r2,r2,r16
     a48:	10800604 	addi	r2,r2,24
     a4c:	10800017 	ldw	r2,0(r2)
     a50:	14800044 	addi	r18,r2,1
     a54:	04000074 	movhi	r16,1
     a58:	8403c404 	addi	r16,r16,3856
     a5c:	8809883a 	mov	r4,r17
     a60:	01400704 	movi	r5,28
     a64:	0000c680 	call	c68 <__mulsi3>
     a68:	1405883a 	add	r2,r2,r16
     a6c:	10800604 	addi	r2,r2,24
     a70:	14800015 	stw	r18,0(r2)
	alt_printf("Stack pointer_prerun thread[%x]: %x\n", current_thread,threads[current_thread].stack_pointer);
     a74:	d466aa17 	ldw	r17,-25944(gp)
     a78:	d126aa17 	ldw	r4,-25944(gp)
     a7c:	04000074 	movhi	r16,1
     a80:	8403c404 	addi	r16,r16,3856
     a84:	01400704 	movi	r5,28
     a88:	0000c680 	call	c68 <__mulsi3>
     a8c:	1405883a 	add	r2,r2,r16
     a90:	10800304 	addi	r2,r2,12
     a94:	11800017 	ldw	r6,0(r2)
     a98:	01000074 	movhi	r4,1
     a9c:	21359704 	addi	r4,r4,-10660
     aa0:	880b883a 	mov	r5,r17
     aa4:	000add80 	call	add8 <alt_printf>
	alt_printf("Run count: %x\n",threads[current_thread].runs);
     aa8:	d126aa17 	ldw	r4,-25944(gp)
     aac:	04000074 	movhi	r16,1
     ab0:	8403c404 	addi	r16,r16,3856
     ab4:	01400704 	movi	r5,28
     ab8:	0000c680 	call	c68 <__mulsi3>
     abc:	1405883a 	add	r2,r2,r16
     ac0:	10800604 	addi	r2,r2,24
     ac4:	11400017 	ldw	r5,0(r2)
     ac8:	01000074 	movhi	r4,1
     acc:	2135a104 	addi	r4,r4,-10620
     ad0:	000add80 	call	add8 <alt_printf>

	return threads[current_thread].stack_pointer;
     ad4:	d126aa17 	ldw	r4,-25944(gp)
     ad8:	04000074 	movhi	r16,1
     adc:	8403c404 	addi	r16,r16,3856
     ae0:	01400704 	movi	r5,28
     ae4:	0000c680 	call	c68 <__mulsi3>
     ae8:	1405883a 	add	r2,r2,r16
     aec:	10800304 	addi	r2,r2,12
     af0:	10800017 	ldw	r2,0(r2)
     af4:	e0bfff15 	stw	r2,-4(fp)
     af8:	e0bfff17 	ldw	r2,-4(fp)

	//return sp;
}
     afc:	e037883a 	mov	sp,fp
     b00:	dfc00417 	ldw	ra,16(sp)
     b04:	df000317 	ldw	fp,12(sp)
     b08:	dc800217 	ldw	r18,8(sp)
     b0c:	dc400117 	ldw	r17,4(sp)
     b10:	dc000017 	ldw	r16,0(sp)
     b14:	dec00504 	addi	sp,sp,20
     b18:	f800283a 	ret

00000b1c <udivmodsi4>:
     b1c:	29001b2e 	bgeu	r5,r4,b8c <udivmodsi4+0x70>
     b20:	28001a16 	blt	r5,zero,b8c <udivmodsi4+0x70>
     b24:	00800044 	movi	r2,1
     b28:	0007883a 	mov	r3,zero
     b2c:	01c007c4 	movi	r7,31
     b30:	00000306 	br	b40 <udivmodsi4+0x24>
     b34:	19c01326 	beq	r3,r7,b84 <udivmodsi4+0x68>
     b38:	18c00044 	addi	r3,r3,1
     b3c:	28000416 	blt	r5,zero,b50 <udivmodsi4+0x34>
     b40:	294b883a 	add	r5,r5,r5
     b44:	1085883a 	add	r2,r2,r2
     b48:	293ffa36 	bltu	r5,r4,b34 <udivmodsi4+0x18>
     b4c:	10000d26 	beq	r2,zero,b84 <udivmodsi4+0x68>
     b50:	0007883a 	mov	r3,zero
     b54:	21400236 	bltu	r4,r5,b60 <udivmodsi4+0x44>
     b58:	2149c83a 	sub	r4,r4,r5
     b5c:	1886b03a 	or	r3,r3,r2
     b60:	1004d07a 	srli	r2,r2,1
     b64:	280ad07a 	srli	r5,r5,1
     b68:	103ffa1e 	bne	r2,zero,b54 <udivmodsi4+0x38>
     b6c:	30000226 	beq	r6,zero,b78 <udivmodsi4+0x5c>
     b70:	2005883a 	mov	r2,r4
     b74:	f800283a 	ret
     b78:	1809883a 	mov	r4,r3
     b7c:	2005883a 	mov	r2,r4
     b80:	f800283a 	ret
     b84:	0007883a 	mov	r3,zero
     b88:	003ff806 	br	b6c <udivmodsi4+0x50>
     b8c:	00800044 	movi	r2,1
     b90:	0007883a 	mov	r3,zero
     b94:	003fef06 	br	b54 <udivmodsi4+0x38>

00000b98 <__divsi3>:
     b98:	defffe04 	addi	sp,sp,-8
     b9c:	dc000015 	stw	r16,0(sp)
     ba0:	dfc00115 	stw	ra,4(sp)
     ba4:	0021883a 	mov	r16,zero
     ba8:	20000c16 	blt	r4,zero,bdc <__divsi3+0x44>
     bac:	000d883a 	mov	r6,zero
     bb0:	28000e16 	blt	r5,zero,bec <__divsi3+0x54>
     bb4:	0000b1c0 	call	b1c <udivmodsi4>
     bb8:	1007883a 	mov	r3,r2
     bbc:	8005003a 	cmpeq	r2,r16,zero
     bc0:	1000011e 	bne	r2,zero,bc8 <__divsi3+0x30>
     bc4:	00c7c83a 	sub	r3,zero,r3
     bc8:	1805883a 	mov	r2,r3
     bcc:	dfc00117 	ldw	ra,4(sp)
     bd0:	dc000017 	ldw	r16,0(sp)
     bd4:	dec00204 	addi	sp,sp,8
     bd8:	f800283a 	ret
     bdc:	0109c83a 	sub	r4,zero,r4
     be0:	04000044 	movi	r16,1
     be4:	000d883a 	mov	r6,zero
     be8:	283ff20e 	bge	r5,zero,bb4 <__divsi3+0x1c>
     bec:	014bc83a 	sub	r5,zero,r5
     bf0:	8021003a 	cmpeq	r16,r16,zero
     bf4:	003fef06 	br	bb4 <__divsi3+0x1c>

00000bf8 <__modsi3>:
     bf8:	deffff04 	addi	sp,sp,-4
     bfc:	dfc00015 	stw	ra,0(sp)
     c00:	01800044 	movi	r6,1
     c04:	2807883a 	mov	r3,r5
     c08:	20000416 	blt	r4,zero,c1c <__modsi3+0x24>
     c0c:	28000c16 	blt	r5,zero,c40 <__modsi3+0x48>
     c10:	dfc00017 	ldw	ra,0(sp)
     c14:	dec00104 	addi	sp,sp,4
     c18:	0000b1c1 	jmpi	b1c <udivmodsi4>
     c1c:	0109c83a 	sub	r4,zero,r4
     c20:	28000b16 	blt	r5,zero,c50 <__modsi3+0x58>
     c24:	180b883a 	mov	r5,r3
     c28:	01800044 	movi	r6,1
     c2c:	0000b1c0 	call	b1c <udivmodsi4>
     c30:	0085c83a 	sub	r2,zero,r2
     c34:	dfc00017 	ldw	ra,0(sp)
     c38:	dec00104 	addi	sp,sp,4
     c3c:	f800283a 	ret
     c40:	014bc83a 	sub	r5,zero,r5
     c44:	dfc00017 	ldw	ra,0(sp)
     c48:	dec00104 	addi	sp,sp,4
     c4c:	0000b1c1 	jmpi	b1c <udivmodsi4>
     c50:	0147c83a 	sub	r3,zero,r5
     c54:	003ff306 	br	c24 <__modsi3+0x2c>

00000c58 <__udivsi3>:
     c58:	000d883a 	mov	r6,zero
     c5c:	0000b1c1 	jmpi	b1c <udivmodsi4>

00000c60 <__umodsi3>:
     c60:	01800044 	movi	r6,1
     c64:	0000b1c1 	jmpi	b1c <udivmodsi4>

00000c68 <__mulsi3>:
     c68:	20000a26 	beq	r4,zero,c94 <__mulsi3+0x2c>
     c6c:	0007883a 	mov	r3,zero
     c70:	2080004c 	andi	r2,r4,1
     c74:	1005003a 	cmpeq	r2,r2,zero
     c78:	2008d07a 	srli	r4,r4,1
     c7c:	1000011e 	bne	r2,zero,c84 <__mulsi3+0x1c>
     c80:	1947883a 	add	r3,r3,r5
     c84:	294b883a 	add	r5,r5,r5
     c88:	203ff91e 	bne	r4,zero,c70 <__mulsi3+0x8>
     c8c:	1805883a 	mov	r2,r3
     c90:	f800283a 	ret
     c94:	0007883a 	mov	r3,zero
     c98:	1805883a 	mov	r2,r3
     c9c:	f800283a 	ret

00000ca0 <free>:
     ca0:	00800074 	movhi	r2,1
     ca4:	10bcfe04 	addi	r2,r2,-3080
     ca8:	200b883a 	mov	r5,r4
     cac:	11000017 	ldw	r4,0(r2)
     cb0:	00054dc1 	jmpi	54dc <_free_r>

00000cb4 <malloc>:
     cb4:	00800074 	movhi	r2,1
     cb8:	10bcfe04 	addi	r2,r2,-3080
     cbc:	200b883a 	mov	r5,r4
     cc0:	11000017 	ldw	r4,0(r2)
     cc4:	0000cc81 	jmpi	cc8 <_malloc_r>

00000cc8 <_malloc_r>:
     cc8:	defff604 	addi	sp,sp,-40
     ccc:	28c002c4 	addi	r3,r5,11
     cd0:	00800584 	movi	r2,22
     cd4:	dc800215 	stw	r18,8(sp)
     cd8:	dfc00915 	stw	ra,36(sp)
     cdc:	df000815 	stw	fp,32(sp)
     ce0:	ddc00715 	stw	r23,28(sp)
     ce4:	dd800615 	stw	r22,24(sp)
     ce8:	dd400515 	stw	r21,20(sp)
     cec:	dd000415 	stw	r20,16(sp)
     cf0:	dcc00315 	stw	r19,12(sp)
     cf4:	dc400115 	stw	r17,4(sp)
     cf8:	dc000015 	stw	r16,0(sp)
     cfc:	2025883a 	mov	r18,r4
     d00:	10c01236 	bltu	r2,r3,d4c <_malloc_r+0x84>
     d04:	04400404 	movi	r17,16
     d08:	8940142e 	bgeu	r17,r5,d5c <_malloc_r+0x94>
     d0c:	00800304 	movi	r2,12
     d10:	0007883a 	mov	r3,zero
     d14:	90800015 	stw	r2,0(r18)
     d18:	1805883a 	mov	r2,r3
     d1c:	dfc00917 	ldw	ra,36(sp)
     d20:	df000817 	ldw	fp,32(sp)
     d24:	ddc00717 	ldw	r23,28(sp)
     d28:	dd800617 	ldw	r22,24(sp)
     d2c:	dd400517 	ldw	r21,20(sp)
     d30:	dd000417 	ldw	r20,16(sp)
     d34:	dcc00317 	ldw	r19,12(sp)
     d38:	dc800217 	ldw	r18,8(sp)
     d3c:	dc400117 	ldw	r17,4(sp)
     d40:	dc000017 	ldw	r16,0(sp)
     d44:	dec00a04 	addi	sp,sp,40
     d48:	f800283a 	ret
     d4c:	00bffe04 	movi	r2,-8
     d50:	18a2703a 	and	r17,r3,r2
     d54:	883fed16 	blt	r17,zero,d0c <_malloc_r+0x44>
     d58:	897fec36 	bltu	r17,r5,d0c <_malloc_r+0x44>
     d5c:	9009883a 	mov	r4,r18
     d60:	000ad980 	call	ad98 <__malloc_lock>
     d64:	00807dc4 	movi	r2,503
     d68:	14402b2e 	bgeu	r2,r17,e18 <_malloc_r+0x150>
     d6c:	8806d27a 	srli	r3,r17,9
     d70:	18003f1e 	bne	r3,zero,e70 <_malloc_r+0x1a8>
     d74:	880cd0fa 	srli	r6,r17,3
     d78:	300490fa 	slli	r2,r6,3
     d7c:	02c00074 	movhi	r11,1
     d80:	5af67404 	addi	r11,r11,-9776
     d84:	12cb883a 	add	r5,r2,r11
     d88:	2c000317 	ldw	r16,12(r5)
     d8c:	580f883a 	mov	r7,r11
     d90:	2c00041e 	bne	r5,r16,da4 <_malloc_r+0xdc>
     d94:	00000a06 	br	dc0 <_malloc_r+0xf8>
     d98:	1800860e 	bge	r3,zero,fb4 <_malloc_r+0x2ec>
     d9c:	84000317 	ldw	r16,12(r16)
     da0:	2c000726 	beq	r5,r16,dc0 <_malloc_r+0xf8>
     da4:	80800117 	ldw	r2,4(r16)
     da8:	00ffff04 	movi	r3,-4
     dac:	10c8703a 	and	r4,r2,r3
     db0:	2447c83a 	sub	r3,r4,r17
     db4:	008003c4 	movi	r2,15
     db8:	10fff70e 	bge	r2,r3,d98 <_malloc_r+0xd0>
     dbc:	31bfffc4 	addi	r6,r6,-1
     dc0:	32400044 	addi	r9,r6,1
     dc4:	02800074 	movhi	r10,1
     dc8:	52b67604 	addi	r10,r10,-9768
     dcc:	54000217 	ldw	r16,8(r10)
     dd0:	8280a026 	beq	r16,r10,1054 <_malloc_r+0x38c>
     dd4:	80800117 	ldw	r2,4(r16)
     dd8:	00ffff04 	movi	r3,-4
     ddc:	10ca703a 	and	r5,r2,r3
     de0:	2c4dc83a 	sub	r6,r5,r17
     de4:	008003c4 	movi	r2,15
     de8:	11808316 	blt	r2,r6,ff8 <_malloc_r+0x330>
     dec:	52800315 	stw	r10,12(r10)
     df0:	52800215 	stw	r10,8(r10)
     df4:	30002916 	blt	r6,zero,e9c <_malloc_r+0x1d4>
     df8:	8147883a 	add	r3,r16,r5
     dfc:	18800117 	ldw	r2,4(r3)
     e00:	9009883a 	mov	r4,r18
     e04:	10800054 	ori	r2,r2,1
     e08:	18800115 	stw	r2,4(r3)
     e0c:	000adb80 	call	adb8 <__malloc_unlock>
     e10:	80c00204 	addi	r3,r16,8
     e14:	003fc006 	br	d18 <_malloc_r+0x50>
     e18:	02c00074 	movhi	r11,1
     e1c:	5af67404 	addi	r11,r11,-9776
     e20:	8ac5883a 	add	r2,r17,r11
     e24:	14000317 	ldw	r16,12(r2)
     e28:	580f883a 	mov	r7,r11
     e2c:	8806d0fa 	srli	r3,r17,3
     e30:	14006c26 	beq	r2,r16,fe4 <_malloc_r+0x31c>
     e34:	80c00117 	ldw	r3,4(r16)
     e38:	00bfff04 	movi	r2,-4
     e3c:	81800317 	ldw	r6,12(r16)
     e40:	1886703a 	and	r3,r3,r2
     e44:	80c7883a 	add	r3,r16,r3
     e48:	18800117 	ldw	r2,4(r3)
     e4c:	81400217 	ldw	r5,8(r16)
     e50:	9009883a 	mov	r4,r18
     e54:	10800054 	ori	r2,r2,1
     e58:	18800115 	stw	r2,4(r3)
     e5c:	31400215 	stw	r5,8(r6)
     e60:	29800315 	stw	r6,12(r5)
     e64:	000adb80 	call	adb8 <__malloc_unlock>
     e68:	80c00204 	addi	r3,r16,8
     e6c:	003faa06 	br	d18 <_malloc_r+0x50>
     e70:	00800104 	movi	r2,4
     e74:	10c0052e 	bgeu	r2,r3,e8c <_malloc_r+0x1c4>
     e78:	00800504 	movi	r2,20
     e7c:	10c07836 	bltu	r2,r3,1060 <_malloc_r+0x398>
     e80:	198016c4 	addi	r6,r3,91
     e84:	300490fa 	slli	r2,r6,3
     e88:	003fbc06 	br	d7c <_malloc_r+0xb4>
     e8c:	8804d1ba 	srli	r2,r17,6
     e90:	11800e04 	addi	r6,r2,56
     e94:	300490fa 	slli	r2,r6,3
     e98:	003fb806 	br	d7c <_malloc_r+0xb4>
     e9c:	00807fc4 	movi	r2,511
     ea0:	1140bb36 	bltu	r2,r5,1190 <_malloc_r+0x4c8>
     ea4:	2806d0fa 	srli	r3,r5,3
     ea8:	573ffe04 	addi	fp,r10,-8
     eac:	00800044 	movi	r2,1
     eb0:	180890fa 	slli	r4,r3,3
     eb4:	1807d0ba 	srai	r3,r3,2
     eb8:	e1c00117 	ldw	r7,4(fp)
     ebc:	5909883a 	add	r4,r11,r4
     ec0:	21400217 	ldw	r5,8(r4)
     ec4:	10c4983a 	sll	r2,r2,r3
     ec8:	81000315 	stw	r4,12(r16)
     ecc:	81400215 	stw	r5,8(r16)
     ed0:	388eb03a 	or	r7,r7,r2
     ed4:	2c000315 	stw	r16,12(r5)
     ed8:	24000215 	stw	r16,8(r4)
     edc:	e1c00115 	stw	r7,4(fp)
     ee0:	4807883a 	mov	r3,r9
     ee4:	4800cd16 	blt	r9,zero,121c <_malloc_r+0x554>
     ee8:	1807d0ba 	srai	r3,r3,2
     eec:	00800044 	movi	r2,1
     ef0:	10c8983a 	sll	r4,r2,r3
     ef4:	39004436 	bltu	r7,r4,1008 <_malloc_r+0x340>
     ef8:	21c4703a 	and	r2,r4,r7
     efc:	10000a1e 	bne	r2,zero,f28 <_malloc_r+0x260>
     f00:	2109883a 	add	r4,r4,r4
     f04:	00bfff04 	movi	r2,-4
     f08:	4884703a 	and	r2,r9,r2
     f0c:	3906703a 	and	r3,r7,r4
     f10:	12400104 	addi	r9,r2,4
     f14:	1800041e 	bne	r3,zero,f28 <_malloc_r+0x260>
     f18:	2109883a 	add	r4,r4,r4
     f1c:	3904703a 	and	r2,r7,r4
     f20:	4a400104 	addi	r9,r9,4
     f24:	103ffc26 	beq	r2,zero,f18 <_malloc_r+0x250>
     f28:	480490fa 	slli	r2,r9,3
     f2c:	4819883a 	mov	r12,r9
     f30:	023fff04 	movi	r8,-4
     f34:	589b883a 	add	r13,r11,r2
     f38:	6807883a 	mov	r3,r13
     f3c:	014003c4 	movi	r5,15
     f40:	1c000317 	ldw	r16,12(r3)
     f44:	1c00041e 	bne	r3,r16,f58 <_malloc_r+0x290>
     f48:	0000a706 	br	11e8 <_malloc_r+0x520>
     f4c:	3000ab0e 	bge	r6,zero,11fc <_malloc_r+0x534>
     f50:	84000317 	ldw	r16,12(r16)
     f54:	1c00a426 	beq	r3,r16,11e8 <_malloc_r+0x520>
     f58:	80800117 	ldw	r2,4(r16)
     f5c:	1204703a 	and	r2,r2,r8
     f60:	144dc83a 	sub	r6,r2,r17
     f64:	29bff90e 	bge	r5,r6,f4c <_malloc_r+0x284>
     f68:	81000317 	ldw	r4,12(r16)
     f6c:	80c00217 	ldw	r3,8(r16)
     f70:	89400054 	ori	r5,r17,1
     f74:	8445883a 	add	r2,r16,r17
     f78:	20c00215 	stw	r3,8(r4)
     f7c:	19000315 	stw	r4,12(r3)
     f80:	81400115 	stw	r5,4(r16)
     f84:	1187883a 	add	r3,r2,r6
     f88:	31000054 	ori	r4,r6,1
     f8c:	50800315 	stw	r2,12(r10)
     f90:	50800215 	stw	r2,8(r10)
     f94:	19800015 	stw	r6,0(r3)
     f98:	11000115 	stw	r4,4(r2)
     f9c:	12800215 	stw	r10,8(r2)
     fa0:	12800315 	stw	r10,12(r2)
     fa4:	9009883a 	mov	r4,r18
     fa8:	000adb80 	call	adb8 <__malloc_unlock>
     fac:	80c00204 	addi	r3,r16,8
     fb0:	003f5906 	br	d18 <_malloc_r+0x50>
     fb4:	8109883a 	add	r4,r16,r4
     fb8:	20800117 	ldw	r2,4(r4)
     fbc:	80c00217 	ldw	r3,8(r16)
     fc0:	81400317 	ldw	r5,12(r16)
     fc4:	10800054 	ori	r2,r2,1
     fc8:	20800115 	stw	r2,4(r4)
     fcc:	28c00215 	stw	r3,8(r5)
     fd0:	19400315 	stw	r5,12(r3)
     fd4:	9009883a 	mov	r4,r18
     fd8:	000adb80 	call	adb8 <__malloc_unlock>
     fdc:	80c00204 	addi	r3,r16,8
     fe0:	003f4d06 	br	d18 <_malloc_r+0x50>
     fe4:	80800204 	addi	r2,r16,8
     fe8:	14000317 	ldw	r16,12(r2)
     fec:	143f911e 	bne	r2,r16,e34 <_malloc_r+0x16c>
     ff0:	1a400084 	addi	r9,r3,2
     ff4:	003f7306 	br	dc4 <_malloc_r+0xfc>
     ff8:	88c00054 	ori	r3,r17,1
     ffc:	8445883a 	add	r2,r16,r17
    1000:	80c00115 	stw	r3,4(r16)
    1004:	003fdf06 	br	f84 <_malloc_r+0x2bc>
    1008:	e4000217 	ldw	r16,8(fp)
    100c:	00bfff04 	movi	r2,-4
    1010:	80c00117 	ldw	r3,4(r16)
    1014:	802d883a 	mov	r22,r16
    1018:	18aa703a 	and	r21,r3,r2
    101c:	ac401636 	bltu	r21,r17,1078 <_malloc_r+0x3b0>
    1020:	ac49c83a 	sub	r4,r21,r17
    1024:	008003c4 	movi	r2,15
    1028:	1100130e 	bge	r2,r4,1078 <_malloc_r+0x3b0>
    102c:	88800054 	ori	r2,r17,1
    1030:	8447883a 	add	r3,r16,r17
    1034:	80800115 	stw	r2,4(r16)
    1038:	20800054 	ori	r2,r4,1
    103c:	18800115 	stw	r2,4(r3)
    1040:	e0c00215 	stw	r3,8(fp)
    1044:	9009883a 	mov	r4,r18
    1048:	000adb80 	call	adb8 <__malloc_unlock>
    104c:	80c00204 	addi	r3,r16,8
    1050:	003f3106 	br	d18 <_malloc_r+0x50>
    1054:	39c00117 	ldw	r7,4(r7)
    1058:	573ffe04 	addi	fp,r10,-8
    105c:	003fa006 	br	ee0 <_malloc_r+0x218>
    1060:	00801504 	movi	r2,84
    1064:	10c06736 	bltu	r2,r3,1204 <_malloc_r+0x53c>
    1068:	8804d33a 	srli	r2,r17,12
    106c:	11801b84 	addi	r6,r2,110
    1070:	300490fa 	slli	r2,r6,3
    1074:	003f4106 	br	d7c <_malloc_r+0xb4>
    1078:	d0a6ac17 	ldw	r2,-25936(gp)
    107c:	d0e00217 	ldw	r3,-32760(gp)
    1080:	053fffc4 	movi	r20,-1
    1084:	10800404 	addi	r2,r2,16
    1088:	88a7883a 	add	r19,r17,r2
    108c:	1d000326 	beq	r3,r20,109c <_malloc_r+0x3d4>
    1090:	98c3ffc4 	addi	r3,r19,4095
    1094:	00bc0004 	movi	r2,-4096
    1098:	18a6703a 	and	r19,r3,r2
    109c:	9009883a 	mov	r4,r18
    10a0:	980b883a 	mov	r5,r19
    10a4:	00015340 	call	1534 <_sbrk_r>
    10a8:	1009883a 	mov	r4,r2
    10ac:	15000426 	beq	r2,r20,10c0 <_malloc_r+0x3f8>
    10b0:	854b883a 	add	r5,r16,r21
    10b4:	1029883a 	mov	r20,r2
    10b8:	11405a2e 	bgeu	r2,r5,1224 <_malloc_r+0x55c>
    10bc:	87000c26 	beq	r16,fp,10f0 <_malloc_r+0x428>
    10c0:	e4000217 	ldw	r16,8(fp)
    10c4:	80c00117 	ldw	r3,4(r16)
    10c8:	00bfff04 	movi	r2,-4
    10cc:	1884703a 	and	r2,r3,r2
    10d0:	14400336 	bltu	r2,r17,10e0 <_malloc_r+0x418>
    10d4:	1449c83a 	sub	r4,r2,r17
    10d8:	008003c4 	movi	r2,15
    10dc:	113fd316 	blt	r2,r4,102c <_malloc_r+0x364>
    10e0:	9009883a 	mov	r4,r18
    10e4:	000adb80 	call	adb8 <__malloc_unlock>
    10e8:	0007883a 	mov	r3,zero
    10ec:	003f0a06 	br	d18 <_malloc_r+0x50>
    10f0:	05c00074 	movhi	r23,1
    10f4:	bdc3b404 	addi	r23,r23,3792
    10f8:	b8800017 	ldw	r2,0(r23)
    10fc:	988d883a 	add	r6,r19,r2
    1100:	b9800015 	stw	r6,0(r23)
    1104:	d0e00217 	ldw	r3,-32760(gp)
    1108:	00bfffc4 	movi	r2,-1
    110c:	18808e26 	beq	r3,r2,1348 <_malloc_r+0x680>
    1110:	2145c83a 	sub	r2,r4,r5
    1114:	3085883a 	add	r2,r6,r2
    1118:	b8800015 	stw	r2,0(r23)
    111c:	20c001cc 	andi	r3,r4,7
    1120:	18005f1e 	bne	r3,zero,12a0 <_malloc_r+0x5d8>
    1124:	000b883a 	mov	r5,zero
    1128:	a4c5883a 	add	r2,r20,r19
    112c:	1083ffcc 	andi	r2,r2,4095
    1130:	00c40004 	movi	r3,4096
    1134:	1887c83a 	sub	r3,r3,r2
    1138:	28e7883a 	add	r19,r5,r3
    113c:	9009883a 	mov	r4,r18
    1140:	980b883a 	mov	r5,r19
    1144:	00015340 	call	1534 <_sbrk_r>
    1148:	1007883a 	mov	r3,r2
    114c:	00bfffc4 	movi	r2,-1
    1150:	18807a26 	beq	r3,r2,133c <_malloc_r+0x674>
    1154:	1d05c83a 	sub	r2,r3,r20
    1158:	9885883a 	add	r2,r19,r2
    115c:	10c00054 	ori	r3,r2,1
    1160:	b8800017 	ldw	r2,0(r23)
    1164:	a021883a 	mov	r16,r20
    1168:	a0c00115 	stw	r3,4(r20)
    116c:	9885883a 	add	r2,r19,r2
    1170:	b8800015 	stw	r2,0(r23)
    1174:	e5000215 	stw	r20,8(fp)
    1178:	b7003626 	beq	r22,fp,1254 <_malloc_r+0x58c>
    117c:	018003c4 	movi	r6,15
    1180:	35404b36 	bltu	r6,r21,12b0 <_malloc_r+0x5e8>
    1184:	00800044 	movi	r2,1
    1188:	a0800115 	stw	r2,4(r20)
    118c:	003fcd06 	br	10c4 <_malloc_r+0x3fc>
    1190:	2808d27a 	srli	r4,r5,9
    1194:	2000371e 	bne	r4,zero,1274 <_malloc_r+0x5ac>
    1198:	2808d0fa 	srli	r4,r5,3
    119c:	200690fa 	slli	r3,r4,3
    11a0:	1ad1883a 	add	r8,r3,r11
    11a4:	41800217 	ldw	r6,8(r8)
    11a8:	41805b26 	beq	r8,r6,1318 <_malloc_r+0x650>
    11ac:	30800117 	ldw	r2,4(r6)
    11b0:	00ffff04 	movi	r3,-4
    11b4:	10c4703a 	and	r2,r2,r3
    11b8:	2880022e 	bgeu	r5,r2,11c4 <_malloc_r+0x4fc>
    11bc:	31800217 	ldw	r6,8(r6)
    11c0:	41bffa1e 	bne	r8,r6,11ac <_malloc_r+0x4e4>
    11c4:	32000317 	ldw	r8,12(r6)
    11c8:	39c00117 	ldw	r7,4(r7)
    11cc:	82000315 	stw	r8,12(r16)
    11d0:	81800215 	stw	r6,8(r16)
    11d4:	07000074 	movhi	fp,1
    11d8:	e7367404 	addi	fp,fp,-9776
    11dc:	34000315 	stw	r16,12(r6)
    11e0:	44000215 	stw	r16,8(r8)
    11e4:	003f3e06 	br	ee0 <_malloc_r+0x218>
    11e8:	63000044 	addi	r12,r12,1
    11ec:	608000cc 	andi	r2,r12,3
    11f0:	10005d26 	beq	r2,zero,1368 <_malloc_r+0x6a0>
    11f4:	18c00204 	addi	r3,r3,8
    11f8:	003f5106 	br	f40 <_malloc_r+0x278>
    11fc:	8089883a 	add	r4,r16,r2
    1200:	003f6d06 	br	fb8 <_malloc_r+0x2f0>
    1204:	00805504 	movi	r2,340
    1208:	10c02036 	bltu	r2,r3,128c <_malloc_r+0x5c4>
    120c:	8804d3fa 	srli	r2,r17,15
    1210:	11801dc4 	addi	r6,r2,119
    1214:	300490fa 	slli	r2,r6,3
    1218:	003ed806 	br	d7c <_malloc_r+0xb4>
    121c:	48c000c4 	addi	r3,r9,3
    1220:	003f3106 	br	ee8 <_malloc_r+0x220>
    1224:	05c00074 	movhi	r23,1
    1228:	bdc3b404 	addi	r23,r23,3792
    122c:	b8800017 	ldw	r2,0(r23)
    1230:	988d883a 	add	r6,r19,r2
    1234:	b9800015 	stw	r6,0(r23)
    1238:	293fb21e 	bne	r5,r4,1104 <_malloc_r+0x43c>
    123c:	2083ffcc 	andi	r2,r4,4095
    1240:	103fb01e 	bne	r2,zero,1104 <_malloc_r+0x43c>
    1244:	e4000217 	ldw	r16,8(fp)
    1248:	9d45883a 	add	r2,r19,r21
    124c:	10800054 	ori	r2,r2,1
    1250:	80800115 	stw	r2,4(r16)
    1254:	b8c00017 	ldw	r3,0(r23)
    1258:	d0a6ad17 	ldw	r2,-25932(gp)
    125c:	10c0012e 	bgeu	r2,r3,1264 <_malloc_r+0x59c>
    1260:	d0e6ad15 	stw	r3,-25932(gp)
    1264:	d0a6ae17 	ldw	r2,-25928(gp)
    1268:	10ff962e 	bgeu	r2,r3,10c4 <_malloc_r+0x3fc>
    126c:	d0e6ae15 	stw	r3,-25928(gp)
    1270:	003f9406 	br	10c4 <_malloc_r+0x3fc>
    1274:	00800104 	movi	r2,4
    1278:	11001e36 	bltu	r2,r4,12f4 <_malloc_r+0x62c>
    127c:	2804d1ba 	srli	r2,r5,6
    1280:	11000e04 	addi	r4,r2,56
    1284:	200690fa 	slli	r3,r4,3
    1288:	003fc506 	br	11a0 <_malloc_r+0x4d8>
    128c:	00815504 	movi	r2,1364
    1290:	10c01d2e 	bgeu	r2,r3,1308 <_malloc_r+0x640>
    1294:	01801f84 	movi	r6,126
    1298:	0080fc04 	movi	r2,1008
    129c:	003eb706 	br	d7c <_malloc_r+0xb4>
    12a0:	00800204 	movi	r2,8
    12a4:	10cbc83a 	sub	r5,r2,r3
    12a8:	2169883a 	add	r20,r4,r5
    12ac:	003f9e06 	br	1128 <_malloc_r+0x460>
    12b0:	00bffe04 	movi	r2,-8
    12b4:	a93ffd04 	addi	r4,r21,-12
    12b8:	2088703a 	and	r4,r4,r2
    12bc:	b10b883a 	add	r5,r22,r4
    12c0:	00c00144 	movi	r3,5
    12c4:	28c00215 	stw	r3,8(r5)
    12c8:	28c00115 	stw	r3,4(r5)
    12cc:	b0800117 	ldw	r2,4(r22)
    12d0:	1080004c 	andi	r2,r2,1
    12d4:	2084b03a 	or	r2,r4,r2
    12d8:	b0800115 	stw	r2,4(r22)
    12dc:	313fdd2e 	bgeu	r6,r4,1254 <_malloc_r+0x58c>
    12e0:	b1400204 	addi	r5,r22,8
    12e4:	9009883a 	mov	r4,r18
    12e8:	00054dc0 	call	54dc <_free_r>
    12ec:	e4000217 	ldw	r16,8(fp)
    12f0:	003fd806 	br	1254 <_malloc_r+0x58c>
    12f4:	00800504 	movi	r2,20
    12f8:	11001536 	bltu	r2,r4,1350 <_malloc_r+0x688>
    12fc:	210016c4 	addi	r4,r4,91
    1300:	200690fa 	slli	r3,r4,3
    1304:	003fa606 	br	11a0 <_malloc_r+0x4d8>
    1308:	8804d4ba 	srli	r2,r17,18
    130c:	11801f04 	addi	r6,r2,124
    1310:	300490fa 	slli	r2,r6,3
    1314:	003e9906 	br	d7c <_malloc_r+0xb4>
    1318:	2009d0ba 	srai	r4,r4,2
    131c:	01400074 	movhi	r5,1
    1320:	29767404 	addi	r5,r5,-9776
    1324:	00c00044 	movi	r3,1
    1328:	28800117 	ldw	r2,4(r5)
    132c:	1906983a 	sll	r3,r3,r4
    1330:	10c4b03a 	or	r2,r2,r3
    1334:	28800115 	stw	r2,4(r5)
    1338:	003fa306 	br	11c8 <_malloc_r+0x500>
    133c:	0027883a 	mov	r19,zero
    1340:	00c00044 	movi	r3,1
    1344:	003f8606 	br	1160 <_malloc_r+0x498>
    1348:	d1200215 	stw	r4,-32760(gp)
    134c:	003f7306 	br	111c <_malloc_r+0x454>
    1350:	00801504 	movi	r2,84
    1354:	11001936 	bltu	r2,r4,13bc <_malloc_r+0x6f4>
    1358:	2804d33a 	srli	r2,r5,12
    135c:	11001b84 	addi	r4,r2,110
    1360:	200690fa 	slli	r3,r4,3
    1364:	003f8e06 	br	11a0 <_malloc_r+0x4d8>
    1368:	480b883a 	mov	r5,r9
    136c:	6807883a 	mov	r3,r13
    1370:	288000cc 	andi	r2,r5,3
    1374:	18fffe04 	addi	r3,r3,-8
    1378:	297fffc4 	addi	r5,r5,-1
    137c:	10001526 	beq	r2,zero,13d4 <_malloc_r+0x70c>
    1380:	18800217 	ldw	r2,8(r3)
    1384:	10fffa26 	beq	r2,r3,1370 <_malloc_r+0x6a8>
    1388:	2109883a 	add	r4,r4,r4
    138c:	393f1e36 	bltu	r7,r4,1008 <_malloc_r+0x340>
    1390:	203f1d26 	beq	r4,zero,1008 <_malloc_r+0x340>
    1394:	21c4703a 	and	r2,r4,r7
    1398:	10000226 	beq	r2,zero,13a4 <_malloc_r+0x6dc>
    139c:	6013883a 	mov	r9,r12
    13a0:	003ee106 	br	f28 <_malloc_r+0x260>
    13a4:	2109883a 	add	r4,r4,r4
    13a8:	3904703a 	and	r2,r7,r4
    13ac:	63000104 	addi	r12,r12,4
    13b0:	103ffc26 	beq	r2,zero,13a4 <_malloc_r+0x6dc>
    13b4:	6013883a 	mov	r9,r12
    13b8:	003edb06 	br	f28 <_malloc_r+0x260>
    13bc:	00805504 	movi	r2,340
    13c0:	11000836 	bltu	r2,r4,13e4 <_malloc_r+0x71c>
    13c4:	2804d3fa 	srli	r2,r5,15
    13c8:	11001dc4 	addi	r4,r2,119
    13cc:	200690fa 	slli	r3,r4,3
    13d0:	003f7306 	br	11a0 <_malloc_r+0x4d8>
    13d4:	0104303a 	nor	r2,zero,r4
    13d8:	388e703a 	and	r7,r7,r2
    13dc:	e1c00115 	stw	r7,4(fp)
    13e0:	003fe906 	br	1388 <_malloc_r+0x6c0>
    13e4:	00815504 	movi	r2,1364
    13e8:	1100032e 	bgeu	r2,r4,13f8 <_malloc_r+0x730>
    13ec:	01001f84 	movi	r4,126
    13f0:	00c0fc04 	movi	r3,1008
    13f4:	003f6a06 	br	11a0 <_malloc_r+0x4d8>
    13f8:	2804d4ba 	srli	r2,r5,18
    13fc:	11001f04 	addi	r4,r2,124
    1400:	200690fa 	slli	r3,r4,3
    1404:	003f6606 	br	11a0 <_malloc_r+0x4d8>

00001408 <printf>:
    1408:	defffb04 	addi	sp,sp,-20
    140c:	dfc00115 	stw	ra,4(sp)
    1410:	d9400215 	stw	r5,8(sp)
    1414:	d9800315 	stw	r6,12(sp)
    1418:	d9c00415 	stw	r7,16(sp)
    141c:	00800074 	movhi	r2,1
    1420:	10bcfe04 	addi	r2,r2,-3080
    1424:	10c00017 	ldw	r3,0(r2)
    1428:	200b883a 	mov	r5,r4
    142c:	d8800204 	addi	r2,sp,8
    1430:	19000217 	ldw	r4,8(r3)
    1434:	100d883a 	mov	r6,r2
    1438:	d8800015 	stw	r2,0(sp)
    143c:	00035340 	call	3534 <__vfprintf_internal>
    1440:	dfc00117 	ldw	ra,4(sp)
    1444:	dec00504 	addi	sp,sp,20
    1448:	f800283a 	ret

0000144c <_printf_r>:
    144c:	defffc04 	addi	sp,sp,-16
    1450:	dfc00115 	stw	ra,4(sp)
    1454:	d9800215 	stw	r6,8(sp)
    1458:	d9c00315 	stw	r7,12(sp)
    145c:	280d883a 	mov	r6,r5
    1460:	21400217 	ldw	r5,8(r4)
    1464:	d8c00204 	addi	r3,sp,8
    1468:	180f883a 	mov	r7,r3
    146c:	d8c00015 	stw	r3,0(sp)
    1470:	00016700 	call	1670 <___vfprintf_internal_r>
    1474:	dfc00117 	ldw	ra,4(sp)
    1478:	dec00404 	addi	sp,sp,16
    147c:	f800283a 	ret

00001480 <_puts_r>:
    1480:	defff604 	addi	sp,sp,-40
    1484:	dc400715 	stw	r17,28(sp)
    1488:	2023883a 	mov	r17,r4
    148c:	2809883a 	mov	r4,r5
    1490:	dfc00915 	stw	ra,36(sp)
    1494:	dcc00815 	stw	r19,32(sp)
    1498:	2827883a 	mov	r19,r5
    149c:	00015a40 	call	15a4 <strlen>
    14a0:	89400217 	ldw	r5,8(r17)
    14a4:	00c00074 	movhi	r3,1
    14a8:	18f5a504 	addi	r3,r3,-10604
    14ac:	01c00044 	movi	r7,1
    14b0:	12000044 	addi	r8,r2,1
    14b4:	d8c00515 	stw	r3,20(sp)
    14b8:	d9c00615 	stw	r7,24(sp)
    14bc:	d8c00304 	addi	r3,sp,12
    14c0:	01c00084 	movi	r7,2
    14c4:	8809883a 	mov	r4,r17
    14c8:	d80d883a 	mov	r6,sp
    14cc:	d8c00015 	stw	r3,0(sp)
    14d0:	dcc00315 	stw	r19,12(sp)
    14d4:	da000215 	stw	r8,8(sp)
    14d8:	d9c00115 	stw	r7,4(sp)
    14dc:	d8800415 	stw	r2,16(sp)
    14e0:	00057f00 	call	57f0 <__sfvwrite_r>
    14e4:	00ffffc4 	movi	r3,-1
    14e8:	10000626 	beq	r2,zero,1504 <_puts_r+0x84>
    14ec:	1805883a 	mov	r2,r3
    14f0:	dfc00917 	ldw	ra,36(sp)
    14f4:	dcc00817 	ldw	r19,32(sp)
    14f8:	dc400717 	ldw	r17,28(sp)
    14fc:	dec00a04 	addi	sp,sp,40
    1500:	f800283a 	ret
    1504:	00c00284 	movi	r3,10
    1508:	1805883a 	mov	r2,r3
    150c:	dfc00917 	ldw	ra,36(sp)
    1510:	dcc00817 	ldw	r19,32(sp)
    1514:	dc400717 	ldw	r17,28(sp)
    1518:	dec00a04 	addi	sp,sp,40
    151c:	f800283a 	ret

00001520 <puts>:
    1520:	00800074 	movhi	r2,1
    1524:	10bcfe04 	addi	r2,r2,-3080
    1528:	200b883a 	mov	r5,r4
    152c:	11000017 	ldw	r4,0(r2)
    1530:	00014801 	jmpi	1480 <_puts_r>

00001534 <_sbrk_r>:
    1534:	defffd04 	addi	sp,sp,-12
    1538:	dc000015 	stw	r16,0(sp)
    153c:	04000074 	movhi	r16,1
    1540:	8403aa04 	addi	r16,r16,3752
    1544:	dc400115 	stw	r17,4(sp)
    1548:	80000015 	stw	zero,0(r16)
    154c:	2023883a 	mov	r17,r4
    1550:	2809883a 	mov	r4,r5
    1554:	dfc00215 	stw	ra,8(sp)
    1558:	000b26c0 	call	b26c <sbrk>
    155c:	1007883a 	mov	r3,r2
    1560:	00bfffc4 	movi	r2,-1
    1564:	18800626 	beq	r3,r2,1580 <_sbrk_r+0x4c>
    1568:	1805883a 	mov	r2,r3
    156c:	dfc00217 	ldw	ra,8(sp)
    1570:	dc400117 	ldw	r17,4(sp)
    1574:	dc000017 	ldw	r16,0(sp)
    1578:	dec00304 	addi	sp,sp,12
    157c:	f800283a 	ret
    1580:	80800017 	ldw	r2,0(r16)
    1584:	103ff826 	beq	r2,zero,1568 <_sbrk_r+0x34>
    1588:	88800015 	stw	r2,0(r17)
    158c:	1805883a 	mov	r2,r3
    1590:	dfc00217 	ldw	ra,8(sp)
    1594:	dc400117 	ldw	r17,4(sp)
    1598:	dc000017 	ldw	r16,0(sp)
    159c:	dec00304 	addi	sp,sp,12
    15a0:	f800283a 	ret

000015a4 <strlen>:
    15a4:	208000cc 	andi	r2,r4,3
    15a8:	2011883a 	mov	r8,r4
    15ac:	1000161e 	bne	r2,zero,1608 <strlen+0x64>
    15b0:	20c00017 	ldw	r3,0(r4)
    15b4:	017fbff4 	movhi	r5,65279
    15b8:	297fbfc4 	addi	r5,r5,-257
    15bc:	01e02074 	movhi	r7,32897
    15c0:	39e02004 	addi	r7,r7,-32640
    15c4:	1945883a 	add	r2,r3,r5
    15c8:	11c4703a 	and	r2,r2,r7
    15cc:	00c6303a 	nor	r3,zero,r3
    15d0:	1886703a 	and	r3,r3,r2
    15d4:	18000c1e 	bne	r3,zero,1608 <strlen+0x64>
    15d8:	280d883a 	mov	r6,r5
    15dc:	380b883a 	mov	r5,r7
    15e0:	21000104 	addi	r4,r4,4
    15e4:	20800017 	ldw	r2,0(r4)
    15e8:	1187883a 	add	r3,r2,r6
    15ec:	1946703a 	and	r3,r3,r5
    15f0:	0084303a 	nor	r2,zero,r2
    15f4:	10c4703a 	and	r2,r2,r3
    15f8:	103ff926 	beq	r2,zero,15e0 <strlen+0x3c>
    15fc:	20800007 	ldb	r2,0(r4)
    1600:	10000326 	beq	r2,zero,1610 <strlen+0x6c>
    1604:	21000044 	addi	r4,r4,1
    1608:	20800007 	ldb	r2,0(r4)
    160c:	103ffd1e 	bne	r2,zero,1604 <strlen+0x60>
    1610:	2205c83a 	sub	r2,r4,r8
    1614:	f800283a 	ret

00001618 <__sprint_r>:
    1618:	30800217 	ldw	r2,8(r6)
    161c:	defffe04 	addi	sp,sp,-8
    1620:	dc000015 	stw	r16,0(sp)
    1624:	dfc00115 	stw	ra,4(sp)
    1628:	3021883a 	mov	r16,r6
    162c:	0007883a 	mov	r3,zero
    1630:	1000061e 	bne	r2,zero,164c <__sprint_r+0x34>
    1634:	1805883a 	mov	r2,r3
    1638:	30000115 	stw	zero,4(r6)
    163c:	dfc00117 	ldw	ra,4(sp)
    1640:	dc000017 	ldw	r16,0(sp)
    1644:	dec00204 	addi	sp,sp,8
    1648:	f800283a 	ret
    164c:	00057f00 	call	57f0 <__sfvwrite_r>
    1650:	1007883a 	mov	r3,r2
    1654:	1805883a 	mov	r2,r3
    1658:	80000115 	stw	zero,4(r16)
    165c:	80000215 	stw	zero,8(r16)
    1660:	dfc00117 	ldw	ra,4(sp)
    1664:	dc000017 	ldw	r16,0(sp)
    1668:	dec00204 	addi	sp,sp,8
    166c:	f800283a 	ret

00001670 <___vfprintf_internal_r>:
    1670:	defea404 	addi	sp,sp,-1392
    1674:	dd815815 	stw	r22,1376(sp)
    1678:	dc015215 	stw	r16,1352(sp)
    167c:	d9c15115 	stw	r7,1348(sp)
    1680:	dfc15b15 	stw	ra,1388(sp)
    1684:	df015a15 	stw	fp,1384(sp)
    1688:	ddc15915 	stw	r23,1380(sp)
    168c:	dd415715 	stw	r21,1372(sp)
    1690:	dd015615 	stw	r20,1368(sp)
    1694:	dcc15515 	stw	r19,1364(sp)
    1698:	dc815415 	stw	r18,1360(sp)
    169c:	dc415315 	stw	r17,1356(sp)
    16a0:	282d883a 	mov	r22,r5
    16a4:	3021883a 	mov	r16,r6
    16a8:	d9014f15 	stw	r4,1340(sp)
    16ac:	0005e140 	call	5e14 <_localeconv_r>
    16b0:	10800017 	ldw	r2,0(r2)
    16b4:	d9c15117 	ldw	r7,1348(sp)
    16b8:	d8814915 	stw	r2,1316(sp)
    16bc:	d8814f17 	ldw	r2,1340(sp)
    16c0:	10000226 	beq	r2,zero,16cc <___vfprintf_internal_r+0x5c>
    16c4:	10800e17 	ldw	r2,56(r2)
    16c8:	10020d26 	beq	r2,zero,1f00 <___vfprintf_internal_r+0x890>
    16cc:	b080030b 	ldhu	r2,12(r22)
    16d0:	1080020c 	andi	r2,r2,8
    16d4:	10020e26 	beq	r2,zero,1f10 <___vfprintf_internal_r+0x8a0>
    16d8:	b0800417 	ldw	r2,16(r22)
    16dc:	10020c26 	beq	r2,zero,1f10 <___vfprintf_internal_r+0x8a0>
    16e0:	b200030b 	ldhu	r8,12(r22)
    16e4:	00800284 	movi	r2,10
    16e8:	40c0068c 	andi	r3,r8,26
    16ec:	18802f1e 	bne	r3,r2,17ac <___vfprintf_internal_r+0x13c>
    16f0:	b080038f 	ldh	r2,14(r22)
    16f4:	10002d16 	blt	r2,zero,17ac <___vfprintf_internal_r+0x13c>
    16f8:	b240038b 	ldhu	r9,14(r22)
    16fc:	b2800717 	ldw	r10,28(r22)
    1700:	b2c00917 	ldw	r11,36(r22)
    1704:	d9014f17 	ldw	r4,1340(sp)
    1708:	dc402904 	addi	r17,sp,164
    170c:	d8804004 	addi	r2,sp,256
    1710:	00c10004 	movi	r3,1024
    1714:	423fff4c 	andi	r8,r8,65533
    1718:	800d883a 	mov	r6,r16
    171c:	880b883a 	mov	r5,r17
    1720:	da002c0d 	sth	r8,176(sp)
    1724:	da402c8d 	sth	r9,178(sp)
    1728:	da803015 	stw	r10,192(sp)
    172c:	dac03215 	stw	r11,200(sp)
    1730:	d8802d15 	stw	r2,180(sp)
    1734:	d8c02e15 	stw	r3,184(sp)
    1738:	d8802915 	stw	r2,164(sp)
    173c:	d8c02b15 	stw	r3,172(sp)
    1740:	d8002f15 	stw	zero,188(sp)
    1744:	00016700 	call	1670 <___vfprintf_internal_r>
    1748:	d8814b15 	stw	r2,1324(sp)
    174c:	10000416 	blt	r2,zero,1760 <___vfprintf_internal_r+0xf0>
    1750:	d9014f17 	ldw	r4,1340(sp)
    1754:	880b883a 	mov	r5,r17
    1758:	0004e8c0 	call	4e8c <_fflush_r>
    175c:	1002321e 	bne	r2,zero,2028 <___vfprintf_internal_r+0x9b8>
    1760:	d8802c0b 	ldhu	r2,176(sp)
    1764:	1080100c 	andi	r2,r2,64
    1768:	10000326 	beq	r2,zero,1778 <___vfprintf_internal_r+0x108>
    176c:	b080030b 	ldhu	r2,12(r22)
    1770:	10801014 	ori	r2,r2,64
    1774:	b080030d 	sth	r2,12(r22)
    1778:	d8814b17 	ldw	r2,1324(sp)
    177c:	dfc15b17 	ldw	ra,1388(sp)
    1780:	df015a17 	ldw	fp,1384(sp)
    1784:	ddc15917 	ldw	r23,1380(sp)
    1788:	dd815817 	ldw	r22,1376(sp)
    178c:	dd415717 	ldw	r21,1372(sp)
    1790:	dd015617 	ldw	r20,1368(sp)
    1794:	dcc15517 	ldw	r19,1364(sp)
    1798:	dc815417 	ldw	r18,1360(sp)
    179c:	dc415317 	ldw	r17,1356(sp)
    17a0:	dc015217 	ldw	r16,1352(sp)
    17a4:	dec15c04 	addi	sp,sp,1392
    17a8:	f800283a 	ret
    17ac:	0005883a 	mov	r2,zero
    17b0:	0007883a 	mov	r3,zero
    17b4:	dd401904 	addi	r21,sp,100
    17b8:	d8814215 	stw	r2,1288(sp)
    17bc:	802f883a 	mov	r23,r16
    17c0:	d8c14315 	stw	r3,1292(sp)
    17c4:	d8014b15 	stw	zero,1324(sp)
    17c8:	d8014815 	stw	zero,1312(sp)
    17cc:	d8014415 	stw	zero,1296(sp)
    17d0:	d8014715 	stw	zero,1308(sp)
    17d4:	dd400c15 	stw	r21,48(sp)
    17d8:	d8000e15 	stw	zero,56(sp)
    17dc:	d8000d15 	stw	zero,52(sp)
    17e0:	b8800007 	ldb	r2,0(r23)
    17e4:	10001926 	beq	r2,zero,184c <___vfprintf_internal_r+0x1dc>
    17e8:	00c00944 	movi	r3,37
    17ec:	10c01726 	beq	r2,r3,184c <___vfprintf_internal_r+0x1dc>
    17f0:	b821883a 	mov	r16,r23
    17f4:	00000106 	br	17fc <___vfprintf_internal_r+0x18c>
    17f8:	10c00326 	beq	r2,r3,1808 <___vfprintf_internal_r+0x198>
    17fc:	84000044 	addi	r16,r16,1
    1800:	80800007 	ldb	r2,0(r16)
    1804:	103ffc1e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x188>
    1808:	85e7c83a 	sub	r19,r16,r23
    180c:	98000e26 	beq	r19,zero,1848 <___vfprintf_internal_r+0x1d8>
    1810:	dc800e17 	ldw	r18,56(sp)
    1814:	dc400d17 	ldw	r17,52(sp)
    1818:	008001c4 	movi	r2,7
    181c:	94e5883a 	add	r18,r18,r19
    1820:	8c400044 	addi	r17,r17,1
    1824:	adc00015 	stw	r23,0(r21)
    1828:	dc800e15 	stw	r18,56(sp)
    182c:	acc00115 	stw	r19,4(r21)
    1830:	dc400d15 	stw	r17,52(sp)
    1834:	14428b16 	blt	r2,r17,2264 <___vfprintf_internal_r+0xbf4>
    1838:	ad400204 	addi	r21,r21,8
    183c:	d9014b17 	ldw	r4,1324(sp)
    1840:	24c9883a 	add	r4,r4,r19
    1844:	d9014b15 	stw	r4,1324(sp)
    1848:	802f883a 	mov	r23,r16
    184c:	b8800007 	ldb	r2,0(r23)
    1850:	10013c26 	beq	r2,zero,1d44 <___vfprintf_internal_r+0x6d4>
    1854:	bdc00044 	addi	r23,r23,1
    1858:	d8000405 	stb	zero,16(sp)
    185c:	b8c00007 	ldb	r3,0(r23)
    1860:	04ffffc4 	movi	r19,-1
    1864:	d8014c15 	stw	zero,1328(sp)
    1868:	d8014a15 	stw	zero,1320(sp)
    186c:	d8c14d15 	stw	r3,1332(sp)
    1870:	bdc00044 	addi	r23,r23,1
    1874:	d9414d17 	ldw	r5,1332(sp)
    1878:	00801604 	movi	r2,88
    187c:	28fff804 	addi	r3,r5,-32
    1880:	10c06036 	bltu	r2,r3,1a04 <___vfprintf_internal_r+0x394>
    1884:	18c5883a 	add	r2,r3,r3
    1888:	1085883a 	add	r2,r2,r2
    188c:	00c00034 	movhi	r3,0
    1890:	18c62804 	addi	r3,r3,6304
    1894:	10c5883a 	add	r2,r2,r3
    1898:	11000017 	ldw	r4,0(r2)
    189c:	2000683a 	jmp	r4
    18a0:	00002814 	movui	zero,160
    18a4:	00001a04 	movi	zero,104
    18a8:	00001a04 	movi	zero,104
    18ac:	00002800 	call	280 <initialize_alarm+0x34>
    18b0:	00001a04 	movi	zero,104
    18b4:	00001a04 	movi	zero,104
    18b8:	00001a04 	movi	zero,104
    18bc:	00001a04 	movi	zero,104
    18c0:	00001a04 	movi	zero,104
    18c4:	00001a04 	movi	zero,104
    18c8:	000025e0 	cmpeqi	zero,zero,151
    18cc:	000027f0 	cmpltui	zero,zero,159
    18d0:	00001a04 	movi	zero,104
    18d4:	000025f8 	rdprs	zero,zero,151
    18d8:	00002898 	cmpnei	zero,zero,162
    18dc:	00001a04 	movi	zero,104
    18e0:	00002884 	movi	zero,162
    18e4:	00002840 	call	284 <initialize_alarm+0x38>
    18e8:	00002840 	call	284 <initialize_alarm+0x38>
    18ec:	00002840 	call	284 <initialize_alarm+0x38>
    18f0:	00002840 	call	284 <initialize_alarm+0x38>
    18f4:	00002840 	call	284 <initialize_alarm+0x38>
    18f8:	00002840 	call	284 <initialize_alarm+0x38>
    18fc:	00002840 	call	284 <initialize_alarm+0x38>
    1900:	00002840 	call	284 <initialize_alarm+0x38>
    1904:	00002840 	call	284 <initialize_alarm+0x38>
    1908:	00001a04 	movi	zero,104
    190c:	00001a04 	movi	zero,104
    1910:	00001a04 	movi	zero,104
    1914:	00001a04 	movi	zero,104
    1918:	00001a04 	movi	zero,104
    191c:	00001a04 	movi	zero,104
    1920:	00001a04 	movi	zero,104
    1924:	00001a04 	movi	zero,104
    1928:	00001a04 	movi	zero,104
    192c:	00001a04 	movi	zero,104
    1930:	0000205c 	xori	zero,zero,129
    1934:	000026c8 	cmpgei	zero,zero,155
    1938:	00001a04 	movi	zero,104
    193c:	000026c8 	cmpgei	zero,zero,155
    1940:	00001a04 	movi	zero,104
    1944:	00001a04 	movi	zero,104
    1948:	00001a04 	movi	zero,104
    194c:	00001a04 	movi	zero,104
    1950:	0000282c 	andhi	zero,zero,160
    1954:	00001a04 	movi	zero,104
    1958:	00001a04 	movi	zero,104
    195c:	00002110 	cmplti	zero,zero,132
    1960:	00001a04 	movi	zero,104
    1964:	00001a04 	movi	zero,104
    1968:	00001a04 	movi	zero,104
    196c:	00001a04 	movi	zero,104
    1970:	00001a04 	movi	zero,104
    1974:	0000215c 	xori	zero,zero,133
    1978:	00001a04 	movi	zero,104
    197c:	00001a04 	movi	zero,104
    1980:	0000277c 	xorhi	zero,zero,157
    1984:	00001a04 	movi	zero,104
    1988:	00001a04 	movi	zero,104
    198c:	00001a04 	movi	zero,104
    1990:	00001a04 	movi	zero,104
    1994:	00001a04 	movi	zero,104
    1998:	00001a04 	movi	zero,104
    199c:	00001a04 	movi	zero,104
    19a0:	00001a04 	movi	zero,104
    19a4:	00001a04 	movi	zero,104
    19a8:	00001a04 	movi	zero,104
    19ac:	00002750 	cmplti	zero,zero,157
    19b0:	00002068 	cmpgeui	zero,zero,129
    19b4:	000026c8 	cmpgei	zero,zero,155
    19b8:	000026c8 	cmpgei	zero,zero,155
    19bc:	000026c8 	cmpgei	zero,zero,155
    19c0:	000026b4 	movhi	zero,154
    19c4:	00002068 	cmpgeui	zero,zero,129
    19c8:	00001a04 	movi	zero,104
    19cc:	00001a04 	movi	zero,104
    19d0:	0000263c 	xorhi	zero,zero,152
    19d4:	00001a04 	movi	zero,104
    19d8:	0000260c 	andi	zero,zero,152
    19dc:	0000211c 	xori	zero,zero,132
    19e0:	0000266c 	andhi	zero,zero,153
    19e4:	00002658 	cmpnei	zero,zero,153
    19e8:	00001a04 	movi	zero,104
    19ec:	00002900 	call	290 <initialize_alarm+0x44>
    19f0:	00001a04 	movi	zero,104
    19f4:	00002168 	cmpgeui	zero,zero,133
    19f8:	00001a04 	movi	zero,104
    19fc:	00001a04 	movi	zero,104
    1a00:	000027e0 	cmpeqi	zero,zero,159
    1a04:	d9014d17 	ldw	r4,1332(sp)
    1a08:	2000ce26 	beq	r4,zero,1d44 <___vfprintf_internal_r+0x6d4>
    1a0c:	01400044 	movi	r5,1
    1a10:	d9800f04 	addi	r6,sp,60
    1a14:	d9c14015 	stw	r7,1280(sp)
    1a18:	d9414515 	stw	r5,1300(sp)
    1a1c:	d9814115 	stw	r6,1284(sp)
    1a20:	280f883a 	mov	r7,r5
    1a24:	d9000f05 	stb	r4,60(sp)
    1a28:	d8000405 	stb	zero,16(sp)
    1a2c:	d8014615 	stw	zero,1304(sp)
    1a30:	d8c14c17 	ldw	r3,1328(sp)
    1a34:	1880008c 	andi	r2,r3,2
    1a38:	1005003a 	cmpeq	r2,r2,zero
    1a3c:	d8815015 	stw	r2,1344(sp)
    1a40:	1000031e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3e0>
    1a44:	d9014517 	ldw	r4,1300(sp)
    1a48:	21000084 	addi	r4,r4,2
    1a4c:	d9014515 	stw	r4,1300(sp)
    1a50:	d9414c17 	ldw	r5,1328(sp)
    1a54:	2940210c 	andi	r5,r5,132
    1a58:	d9414e15 	stw	r5,1336(sp)
    1a5c:	28002d1e 	bne	r5,zero,1b14 <___vfprintf_internal_r+0x4a4>
    1a60:	d9814a17 	ldw	r6,1320(sp)
    1a64:	d8814517 	ldw	r2,1300(sp)
    1a68:	30a1c83a 	sub	r16,r6,r2
    1a6c:	0400290e 	bge	zero,r16,1b14 <___vfprintf_internal_r+0x4a4>
    1a70:	00800404 	movi	r2,16
    1a74:	14045e0e 	bge	r2,r16,2bf0 <___vfprintf_internal_r+0x1580>
    1a78:	dc800e17 	ldw	r18,56(sp)
    1a7c:	dc400d17 	ldw	r17,52(sp)
    1a80:	1027883a 	mov	r19,r2
    1a84:	07000074 	movhi	fp,1
    1a88:	e735c184 	addi	fp,fp,-10490
    1a8c:	050001c4 	movi	r20,7
    1a90:	00000306 	br	1aa0 <___vfprintf_internal_r+0x430>
    1a94:	843ffc04 	addi	r16,r16,-16
    1a98:	ad400204 	addi	r21,r21,8
    1a9c:	9c00130e 	bge	r19,r16,1aec <___vfprintf_internal_r+0x47c>
    1aa0:	94800404 	addi	r18,r18,16
    1aa4:	8c400044 	addi	r17,r17,1
    1aa8:	af000015 	stw	fp,0(r21)
    1aac:	acc00115 	stw	r19,4(r21)
    1ab0:	dc800e15 	stw	r18,56(sp)
    1ab4:	dc400d15 	stw	r17,52(sp)
    1ab8:	a47ff60e 	bge	r20,r17,1a94 <___vfprintf_internal_r+0x424>
    1abc:	d9014f17 	ldw	r4,1340(sp)
    1ac0:	b00b883a 	mov	r5,r22
    1ac4:	d9800c04 	addi	r6,sp,48
    1ac8:	d9c15115 	stw	r7,1348(sp)
    1acc:	00016180 	call	1618 <__sprint_r>
    1ad0:	d9c15117 	ldw	r7,1348(sp)
    1ad4:	10009e1e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    1ad8:	843ffc04 	addi	r16,r16,-16
    1adc:	dc800e17 	ldw	r18,56(sp)
    1ae0:	dc400d17 	ldw	r17,52(sp)
    1ae4:	dd401904 	addi	r21,sp,100
    1ae8:	9c3fed16 	blt	r19,r16,1aa0 <___vfprintf_internal_r+0x430>
    1aec:	9425883a 	add	r18,r18,r16
    1af0:	8c400044 	addi	r17,r17,1
    1af4:	008001c4 	movi	r2,7
    1af8:	af000015 	stw	fp,0(r21)
    1afc:	ac000115 	stw	r16,4(r21)
    1b00:	dc800e15 	stw	r18,56(sp)
    1b04:	dc400d15 	stw	r17,52(sp)
    1b08:	1441f516 	blt	r2,r17,22e0 <___vfprintf_internal_r+0xc70>
    1b0c:	ad400204 	addi	r21,r21,8
    1b10:	00000206 	br	1b1c <___vfprintf_internal_r+0x4ac>
    1b14:	dc800e17 	ldw	r18,56(sp)
    1b18:	dc400d17 	ldw	r17,52(sp)
    1b1c:	d8800407 	ldb	r2,16(sp)
    1b20:	10000b26 	beq	r2,zero,1b50 <___vfprintf_internal_r+0x4e0>
    1b24:	00800044 	movi	r2,1
    1b28:	94800044 	addi	r18,r18,1
    1b2c:	8c400044 	addi	r17,r17,1
    1b30:	a8800115 	stw	r2,4(r21)
    1b34:	d8c00404 	addi	r3,sp,16
    1b38:	008001c4 	movi	r2,7
    1b3c:	a8c00015 	stw	r3,0(r21)
    1b40:	dc800e15 	stw	r18,56(sp)
    1b44:	dc400d15 	stw	r17,52(sp)
    1b48:	1441da16 	blt	r2,r17,22b4 <___vfprintf_internal_r+0xc44>
    1b4c:	ad400204 	addi	r21,r21,8
    1b50:	d9015017 	ldw	r4,1344(sp)
    1b54:	20000b1e 	bne	r4,zero,1b84 <___vfprintf_internal_r+0x514>
    1b58:	d8800444 	addi	r2,sp,17
    1b5c:	94800084 	addi	r18,r18,2
    1b60:	8c400044 	addi	r17,r17,1
    1b64:	a8800015 	stw	r2,0(r21)
    1b68:	00c00084 	movi	r3,2
    1b6c:	008001c4 	movi	r2,7
    1b70:	a8c00115 	stw	r3,4(r21)
    1b74:	dc800e15 	stw	r18,56(sp)
    1b78:	dc400d15 	stw	r17,52(sp)
    1b7c:	1441c216 	blt	r2,r17,2288 <___vfprintf_internal_r+0xc18>
    1b80:	ad400204 	addi	r21,r21,8
    1b84:	d9414e17 	ldw	r5,1336(sp)
    1b88:	00802004 	movi	r2,128
    1b8c:	2880b126 	beq	r5,r2,1e54 <___vfprintf_internal_r+0x7e4>
    1b90:	d8c14617 	ldw	r3,1304(sp)
    1b94:	19e1c83a 	sub	r16,r3,r7
    1b98:	0400260e 	bge	zero,r16,1c34 <___vfprintf_internal_r+0x5c4>
    1b9c:	00800404 	movi	r2,16
    1ba0:	1403cf0e 	bge	r2,r16,2ae0 <___vfprintf_internal_r+0x1470>
    1ba4:	1027883a 	mov	r19,r2
    1ba8:	07000074 	movhi	fp,1
    1bac:	e735bd84 	addi	fp,fp,-10506
    1bb0:	050001c4 	movi	r20,7
    1bb4:	00000306 	br	1bc4 <___vfprintf_internal_r+0x554>
    1bb8:	843ffc04 	addi	r16,r16,-16
    1bbc:	ad400204 	addi	r21,r21,8
    1bc0:	9c00130e 	bge	r19,r16,1c10 <___vfprintf_internal_r+0x5a0>
    1bc4:	94800404 	addi	r18,r18,16
    1bc8:	8c400044 	addi	r17,r17,1
    1bcc:	af000015 	stw	fp,0(r21)
    1bd0:	acc00115 	stw	r19,4(r21)
    1bd4:	dc800e15 	stw	r18,56(sp)
    1bd8:	dc400d15 	stw	r17,52(sp)
    1bdc:	a47ff60e 	bge	r20,r17,1bb8 <___vfprintf_internal_r+0x548>
    1be0:	d9014f17 	ldw	r4,1340(sp)
    1be4:	b00b883a 	mov	r5,r22
    1be8:	d9800c04 	addi	r6,sp,48
    1bec:	d9c15115 	stw	r7,1348(sp)
    1bf0:	00016180 	call	1618 <__sprint_r>
    1bf4:	d9c15117 	ldw	r7,1348(sp)
    1bf8:	1000551e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    1bfc:	843ffc04 	addi	r16,r16,-16
    1c00:	dc800e17 	ldw	r18,56(sp)
    1c04:	dc400d17 	ldw	r17,52(sp)
    1c08:	dd401904 	addi	r21,sp,100
    1c0c:	9c3fed16 	blt	r19,r16,1bc4 <___vfprintf_internal_r+0x554>
    1c10:	9425883a 	add	r18,r18,r16
    1c14:	8c400044 	addi	r17,r17,1
    1c18:	008001c4 	movi	r2,7
    1c1c:	af000015 	stw	fp,0(r21)
    1c20:	ac000115 	stw	r16,4(r21)
    1c24:	dc800e15 	stw	r18,56(sp)
    1c28:	dc400d15 	stw	r17,52(sp)
    1c2c:	14418216 	blt	r2,r17,2238 <___vfprintf_internal_r+0xbc8>
    1c30:	ad400204 	addi	r21,r21,8
    1c34:	d9014c17 	ldw	r4,1328(sp)
    1c38:	2080400c 	andi	r2,r4,256
    1c3c:	10004a1e 	bne	r2,zero,1d68 <___vfprintf_internal_r+0x6f8>
    1c40:	d9414117 	ldw	r5,1284(sp)
    1c44:	91e5883a 	add	r18,r18,r7
    1c48:	8c400044 	addi	r17,r17,1
    1c4c:	008001c4 	movi	r2,7
    1c50:	a9400015 	stw	r5,0(r21)
    1c54:	a9c00115 	stw	r7,4(r21)
    1c58:	dc800e15 	stw	r18,56(sp)
    1c5c:	dc400d15 	stw	r17,52(sp)
    1c60:	14416716 	blt	r2,r17,2200 <___vfprintf_internal_r+0xb90>
    1c64:	a8c00204 	addi	r3,r21,8
    1c68:	d9814c17 	ldw	r6,1328(sp)
    1c6c:	3080010c 	andi	r2,r6,4
    1c70:	10002826 	beq	r2,zero,1d14 <___vfprintf_internal_r+0x6a4>
    1c74:	d8814a17 	ldw	r2,1320(sp)
    1c78:	d9014517 	ldw	r4,1300(sp)
    1c7c:	1121c83a 	sub	r16,r2,r4
    1c80:	0400240e 	bge	zero,r16,1d14 <___vfprintf_internal_r+0x6a4>
    1c84:	00800404 	movi	r2,16
    1c88:	1404550e 	bge	r2,r16,2de0 <___vfprintf_internal_r+0x1770>
    1c8c:	dc400d17 	ldw	r17,52(sp)
    1c90:	1027883a 	mov	r19,r2
    1c94:	07000074 	movhi	fp,1
    1c98:	e735c184 	addi	fp,fp,-10490
    1c9c:	050001c4 	movi	r20,7
    1ca0:	00000306 	br	1cb0 <___vfprintf_internal_r+0x640>
    1ca4:	843ffc04 	addi	r16,r16,-16
    1ca8:	18c00204 	addi	r3,r3,8
    1cac:	9c00110e 	bge	r19,r16,1cf4 <___vfprintf_internal_r+0x684>
    1cb0:	94800404 	addi	r18,r18,16
    1cb4:	8c400044 	addi	r17,r17,1
    1cb8:	1f000015 	stw	fp,0(r3)
    1cbc:	1cc00115 	stw	r19,4(r3)
    1cc0:	dc800e15 	stw	r18,56(sp)
    1cc4:	dc400d15 	stw	r17,52(sp)
    1cc8:	a47ff60e 	bge	r20,r17,1ca4 <___vfprintf_internal_r+0x634>
    1ccc:	d9014f17 	ldw	r4,1340(sp)
    1cd0:	b00b883a 	mov	r5,r22
    1cd4:	d9800c04 	addi	r6,sp,48
    1cd8:	00016180 	call	1618 <__sprint_r>
    1cdc:	10001c1e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    1ce0:	843ffc04 	addi	r16,r16,-16
    1ce4:	dc800e17 	ldw	r18,56(sp)
    1ce8:	dc400d17 	ldw	r17,52(sp)
    1cec:	d8c01904 	addi	r3,sp,100
    1cf0:	9c3fef16 	blt	r19,r16,1cb0 <___vfprintf_internal_r+0x640>
    1cf4:	9425883a 	add	r18,r18,r16
    1cf8:	8c400044 	addi	r17,r17,1
    1cfc:	008001c4 	movi	r2,7
    1d00:	1f000015 	stw	fp,0(r3)
    1d04:	1c000115 	stw	r16,4(r3)
    1d08:	dc800e15 	stw	r18,56(sp)
    1d0c:	dc400d15 	stw	r17,52(sp)
    1d10:	1440cb16 	blt	r2,r17,2040 <___vfprintf_internal_r+0x9d0>
    1d14:	d8814a17 	ldw	r2,1320(sp)
    1d18:	d9414517 	ldw	r5,1300(sp)
    1d1c:	1140010e 	bge	r2,r5,1d24 <___vfprintf_internal_r+0x6b4>
    1d20:	2805883a 	mov	r2,r5
    1d24:	d9814b17 	ldw	r6,1324(sp)
    1d28:	308d883a 	add	r6,r6,r2
    1d2c:	d9814b15 	stw	r6,1324(sp)
    1d30:	90013b1e 	bne	r18,zero,2220 <___vfprintf_internal_r+0xbb0>
    1d34:	d9c14017 	ldw	r7,1280(sp)
    1d38:	dd401904 	addi	r21,sp,100
    1d3c:	d8000d15 	stw	zero,52(sp)
    1d40:	003ea706 	br	17e0 <___vfprintf_internal_r+0x170>
    1d44:	d8800e17 	ldw	r2,56(sp)
    1d48:	1005451e 	bne	r2,zero,3260 <___vfprintf_internal_r+0x1bf0>
    1d4c:	d8000d15 	stw	zero,52(sp)
    1d50:	b080030b 	ldhu	r2,12(r22)
    1d54:	1080100c 	andi	r2,r2,64
    1d58:	103e8726 	beq	r2,zero,1778 <___vfprintf_internal_r+0x108>
    1d5c:	00bfffc4 	movi	r2,-1
    1d60:	d8814b15 	stw	r2,1324(sp)
    1d64:	003e8406 	br	1778 <___vfprintf_internal_r+0x108>
    1d68:	d9814d17 	ldw	r6,1332(sp)
    1d6c:	00801944 	movi	r2,101
    1d70:	11806e16 	blt	r2,r6,1f2c <___vfprintf_internal_r+0x8bc>
    1d74:	d9414717 	ldw	r5,1308(sp)
    1d78:	00c00044 	movi	r3,1
    1d7c:	1943490e 	bge	r3,r5,2aa4 <___vfprintf_internal_r+0x1434>
    1d80:	d8814117 	ldw	r2,1284(sp)
    1d84:	94800044 	addi	r18,r18,1
    1d88:	8c400044 	addi	r17,r17,1
    1d8c:	a8800015 	stw	r2,0(r21)
    1d90:	008001c4 	movi	r2,7
    1d94:	a8c00115 	stw	r3,4(r21)
    1d98:	dc800e15 	stw	r18,56(sp)
    1d9c:	dc400d15 	stw	r17,52(sp)
    1da0:	1441ca16 	blt	r2,r17,24cc <___vfprintf_internal_r+0xe5c>
    1da4:	a8c00204 	addi	r3,r21,8
    1da8:	d9014917 	ldw	r4,1316(sp)
    1dac:	00800044 	movi	r2,1
    1db0:	94800044 	addi	r18,r18,1
    1db4:	8c400044 	addi	r17,r17,1
    1db8:	18800115 	stw	r2,4(r3)
    1dbc:	008001c4 	movi	r2,7
    1dc0:	19000015 	stw	r4,0(r3)
    1dc4:	dc800e15 	stw	r18,56(sp)
    1dc8:	dc400d15 	stw	r17,52(sp)
    1dcc:	1441b616 	blt	r2,r17,24a8 <___vfprintf_internal_r+0xe38>
    1dd0:	1cc00204 	addi	r19,r3,8
    1dd4:	d9014217 	ldw	r4,1288(sp)
    1dd8:	d9414317 	ldw	r5,1292(sp)
    1ddc:	000d883a 	mov	r6,zero
    1de0:	000f883a 	mov	r7,zero
    1de4:	00099740 	call	9974 <__nedf2>
    1de8:	10017426 	beq	r2,zero,23bc <___vfprintf_internal_r+0xd4c>
    1dec:	d9414717 	ldw	r5,1308(sp)
    1df0:	d9814117 	ldw	r6,1284(sp)
    1df4:	8c400044 	addi	r17,r17,1
    1df8:	2c85883a 	add	r2,r5,r18
    1dfc:	14bfffc4 	addi	r18,r2,-1
    1e00:	28bfffc4 	addi	r2,r5,-1
    1e04:	30c00044 	addi	r3,r6,1
    1e08:	98800115 	stw	r2,4(r19)
    1e0c:	008001c4 	movi	r2,7
    1e10:	98c00015 	stw	r3,0(r19)
    1e14:	dc800e15 	stw	r18,56(sp)
    1e18:	dc400d15 	stw	r17,52(sp)
    1e1c:	14418e16 	blt	r2,r17,2458 <___vfprintf_internal_r+0xde8>
    1e20:	9cc00204 	addi	r19,r19,8
    1e24:	d9414817 	ldw	r5,1312(sp)
    1e28:	d8800804 	addi	r2,sp,32
    1e2c:	8c400044 	addi	r17,r17,1
    1e30:	9165883a 	add	r18,r18,r5
    1e34:	98800015 	stw	r2,0(r19)
    1e38:	008001c4 	movi	r2,7
    1e3c:	99400115 	stw	r5,4(r19)
    1e40:	dc800e15 	stw	r18,56(sp)
    1e44:	dc400d15 	stw	r17,52(sp)
    1e48:	1440ed16 	blt	r2,r17,2200 <___vfprintf_internal_r+0xb90>
    1e4c:	98c00204 	addi	r3,r19,8
    1e50:	003f8506 	br	1c68 <___vfprintf_internal_r+0x5f8>
    1e54:	d9814a17 	ldw	r6,1320(sp)
    1e58:	d8814517 	ldw	r2,1300(sp)
    1e5c:	30a1c83a 	sub	r16,r6,r2
    1e60:	043f4b0e 	bge	zero,r16,1b90 <___vfprintf_internal_r+0x520>
    1e64:	00800404 	movi	r2,16
    1e68:	14043a0e 	bge	r2,r16,2f54 <___vfprintf_internal_r+0x18e4>
    1e6c:	1027883a 	mov	r19,r2
    1e70:	07000074 	movhi	fp,1
    1e74:	e735bd84 	addi	fp,fp,-10506
    1e78:	050001c4 	movi	r20,7
    1e7c:	00000306 	br	1e8c <___vfprintf_internal_r+0x81c>
    1e80:	843ffc04 	addi	r16,r16,-16
    1e84:	ad400204 	addi	r21,r21,8
    1e88:	9c00130e 	bge	r19,r16,1ed8 <___vfprintf_internal_r+0x868>
    1e8c:	94800404 	addi	r18,r18,16
    1e90:	8c400044 	addi	r17,r17,1
    1e94:	af000015 	stw	fp,0(r21)
    1e98:	acc00115 	stw	r19,4(r21)
    1e9c:	dc800e15 	stw	r18,56(sp)
    1ea0:	dc400d15 	stw	r17,52(sp)
    1ea4:	a47ff60e 	bge	r20,r17,1e80 <___vfprintf_internal_r+0x810>
    1ea8:	d9014f17 	ldw	r4,1340(sp)
    1eac:	b00b883a 	mov	r5,r22
    1eb0:	d9800c04 	addi	r6,sp,48
    1eb4:	d9c15115 	stw	r7,1348(sp)
    1eb8:	00016180 	call	1618 <__sprint_r>
    1ebc:	d9c15117 	ldw	r7,1348(sp)
    1ec0:	103fa31e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    1ec4:	843ffc04 	addi	r16,r16,-16
    1ec8:	dc800e17 	ldw	r18,56(sp)
    1ecc:	dc400d17 	ldw	r17,52(sp)
    1ed0:	dd401904 	addi	r21,sp,100
    1ed4:	9c3fed16 	blt	r19,r16,1e8c <___vfprintf_internal_r+0x81c>
    1ed8:	9425883a 	add	r18,r18,r16
    1edc:	8c400044 	addi	r17,r17,1
    1ee0:	008001c4 	movi	r2,7
    1ee4:	af000015 	stw	fp,0(r21)
    1ee8:	ac000115 	stw	r16,4(r21)
    1eec:	dc800e15 	stw	r18,56(sp)
    1ef0:	dc400d15 	stw	r17,52(sp)
    1ef4:	14416116 	blt	r2,r17,247c <___vfprintf_internal_r+0xe0c>
    1ef8:	ad400204 	addi	r21,r21,8
    1efc:	003f2406 	br	1b90 <___vfprintf_internal_r+0x520>
    1f00:	d9014f17 	ldw	r4,1340(sp)
    1f04:	00051240 	call	5124 <__sinit>
    1f08:	d9c15117 	ldw	r7,1348(sp)
    1f0c:	003def06 	br	16cc <___vfprintf_internal_r+0x5c>
    1f10:	d9014f17 	ldw	r4,1340(sp)
    1f14:	b00b883a 	mov	r5,r22
    1f18:	d9c15115 	stw	r7,1348(sp)
    1f1c:	00035580 	call	3558 <__swsetup_r>
    1f20:	d9c15117 	ldw	r7,1348(sp)
    1f24:	103dee26 	beq	r2,zero,16e0 <___vfprintf_internal_r+0x70>
    1f28:	003f8c06 	br	1d5c <___vfprintf_internal_r+0x6ec>
    1f2c:	d9014217 	ldw	r4,1288(sp)
    1f30:	d9414317 	ldw	r5,1292(sp)
    1f34:	000d883a 	mov	r6,zero
    1f38:	000f883a 	mov	r7,zero
    1f3c:	00098ec0 	call	98ec <__eqdf2>
    1f40:	1000f21e 	bne	r2,zero,230c <___vfprintf_internal_r+0xc9c>
    1f44:	00800074 	movhi	r2,1
    1f48:	10b5bd04 	addi	r2,r2,-10508
    1f4c:	94800044 	addi	r18,r18,1
    1f50:	8c400044 	addi	r17,r17,1
    1f54:	a8800015 	stw	r2,0(r21)
    1f58:	00c00044 	movi	r3,1
    1f5c:	008001c4 	movi	r2,7
    1f60:	a8c00115 	stw	r3,4(r21)
    1f64:	dc800e15 	stw	r18,56(sp)
    1f68:	dc400d15 	stw	r17,52(sp)
    1f6c:	14430016 	blt	r2,r17,2b70 <___vfprintf_internal_r+0x1500>
    1f70:	a8c00204 	addi	r3,r21,8
    1f74:	d8800517 	ldw	r2,20(sp)
    1f78:	d9014717 	ldw	r4,1308(sp)
    1f7c:	11015c0e 	bge	r2,r4,24f0 <___vfprintf_internal_r+0xe80>
    1f80:	dc400d17 	ldw	r17,52(sp)
    1f84:	d9814917 	ldw	r6,1316(sp)
    1f88:	00800044 	movi	r2,1
    1f8c:	94800044 	addi	r18,r18,1
    1f90:	8c400044 	addi	r17,r17,1
    1f94:	18800115 	stw	r2,4(r3)
    1f98:	008001c4 	movi	r2,7
    1f9c:	19800015 	stw	r6,0(r3)
    1fa0:	dc800e15 	stw	r18,56(sp)
    1fa4:	dc400d15 	stw	r17,52(sp)
    1fa8:	14431616 	blt	r2,r17,2c04 <___vfprintf_internal_r+0x1594>
    1fac:	18c00204 	addi	r3,r3,8
    1fb0:	d8814717 	ldw	r2,1308(sp)
    1fb4:	143fffc4 	addi	r16,r2,-1
    1fb8:	043f2b0e 	bge	zero,r16,1c68 <___vfprintf_internal_r+0x5f8>
    1fbc:	00800404 	movi	r2,16
    1fc0:	1402a80e 	bge	r2,r16,2a64 <___vfprintf_internal_r+0x13f4>
    1fc4:	dc400d17 	ldw	r17,52(sp)
    1fc8:	1027883a 	mov	r19,r2
    1fcc:	07000074 	movhi	fp,1
    1fd0:	e735bd84 	addi	fp,fp,-10506
    1fd4:	050001c4 	movi	r20,7
    1fd8:	00000306 	br	1fe8 <___vfprintf_internal_r+0x978>
    1fdc:	18c00204 	addi	r3,r3,8
    1fe0:	843ffc04 	addi	r16,r16,-16
    1fe4:	9c02a20e 	bge	r19,r16,2a70 <___vfprintf_internal_r+0x1400>
    1fe8:	94800404 	addi	r18,r18,16
    1fec:	8c400044 	addi	r17,r17,1
    1ff0:	1f000015 	stw	fp,0(r3)
    1ff4:	1cc00115 	stw	r19,4(r3)
    1ff8:	dc800e15 	stw	r18,56(sp)
    1ffc:	dc400d15 	stw	r17,52(sp)
    2000:	a47ff60e 	bge	r20,r17,1fdc <___vfprintf_internal_r+0x96c>
    2004:	d9014f17 	ldw	r4,1340(sp)
    2008:	b00b883a 	mov	r5,r22
    200c:	d9800c04 	addi	r6,sp,48
    2010:	00016180 	call	1618 <__sprint_r>
    2014:	103f4e1e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    2018:	dc800e17 	ldw	r18,56(sp)
    201c:	dc400d17 	ldw	r17,52(sp)
    2020:	d8c01904 	addi	r3,sp,100
    2024:	003fee06 	br	1fe0 <___vfprintf_internal_r+0x970>
    2028:	d8802c0b 	ldhu	r2,176(sp)
    202c:	00ffffc4 	movi	r3,-1
    2030:	d8c14b15 	stw	r3,1324(sp)
    2034:	1080100c 	andi	r2,r2,64
    2038:	103dcc1e 	bne	r2,zero,176c <___vfprintf_internal_r+0xfc>
    203c:	003dce06 	br	1778 <___vfprintf_internal_r+0x108>
    2040:	d9014f17 	ldw	r4,1340(sp)
    2044:	b00b883a 	mov	r5,r22
    2048:	d9800c04 	addi	r6,sp,48
    204c:	00016180 	call	1618 <__sprint_r>
    2050:	103f3f1e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    2054:	dc800e17 	ldw	r18,56(sp)
    2058:	003f2e06 	br	1d14 <___vfprintf_internal_r+0x6a4>
    205c:	d9414c17 	ldw	r5,1328(sp)
    2060:	29400414 	ori	r5,r5,16
    2064:	d9414c15 	stw	r5,1328(sp)
    2068:	d9814c17 	ldw	r6,1328(sp)
    206c:	3080080c 	andi	r2,r6,32
    2070:	10014f1e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0xf40>
    2074:	d8c14c17 	ldw	r3,1328(sp)
    2078:	1880040c 	andi	r2,r3,16
    207c:	1002f01e 	bne	r2,zero,2c40 <___vfprintf_internal_r+0x15d0>
    2080:	d9014c17 	ldw	r4,1328(sp)
    2084:	2080100c 	andi	r2,r4,64
    2088:	1002ed26 	beq	r2,zero,2c40 <___vfprintf_internal_r+0x15d0>
    208c:	3880000f 	ldh	r2,0(r7)
    2090:	39c00104 	addi	r7,r7,4
    2094:	d9c14015 	stw	r7,1280(sp)
    2098:	1023d7fa 	srai	r17,r2,31
    209c:	1021883a 	mov	r16,r2
    20a0:	88037816 	blt	r17,zero,2e84 <___vfprintf_internal_r+0x1814>
    20a4:	01000044 	movi	r4,1
    20a8:	98000416 	blt	r19,zero,20bc <___vfprintf_internal_r+0xa4c>
    20ac:	d8c14c17 	ldw	r3,1328(sp)
    20b0:	00bfdfc4 	movi	r2,-129
    20b4:	1886703a 	and	r3,r3,r2
    20b8:	d8c14c15 	stw	r3,1328(sp)
    20bc:	8444b03a 	or	r2,r16,r17
    20c0:	10022c1e 	bne	r2,zero,2974 <___vfprintf_internal_r+0x1304>
    20c4:	98022b1e 	bne	r19,zero,2974 <___vfprintf_internal_r+0x1304>
    20c8:	20803fcc 	andi	r2,r4,255
    20cc:	1002a126 	beq	r2,zero,2b54 <___vfprintf_internal_r+0x14e4>
    20d0:	d8c01904 	addi	r3,sp,100
    20d4:	dd000f04 	addi	r20,sp,60
    20d8:	d8c14115 	stw	r3,1284(sp)
    20dc:	d8c14117 	ldw	r3,1284(sp)
    20e0:	dcc14515 	stw	r19,1300(sp)
    20e4:	a0c5c83a 	sub	r2,r20,r3
    20e8:	11c00a04 	addi	r7,r2,40
    20ec:	99c0010e 	bge	r19,r7,20f4 <___vfprintf_internal_r+0xa84>
    20f0:	d9c14515 	stw	r7,1300(sp)
    20f4:	dcc14615 	stw	r19,1304(sp)
    20f8:	d8800407 	ldb	r2,16(sp)
    20fc:	103e4c26 	beq	r2,zero,1a30 <___vfprintf_internal_r+0x3c0>
    2100:	d8814517 	ldw	r2,1300(sp)
    2104:	10800044 	addi	r2,r2,1
    2108:	d8814515 	stw	r2,1300(sp)
    210c:	003e4806 	br	1a30 <___vfprintf_internal_r+0x3c0>
    2110:	d9814c17 	ldw	r6,1328(sp)
    2114:	31800414 	ori	r6,r6,16
    2118:	d9814c15 	stw	r6,1328(sp)
    211c:	d8c14c17 	ldw	r3,1328(sp)
    2120:	1880080c 	andi	r2,r3,32
    2124:	1001271e 	bne	r2,zero,25c4 <___vfprintf_internal_r+0xf54>
    2128:	d9414c17 	ldw	r5,1328(sp)
    212c:	2880040c 	andi	r2,r5,16
    2130:	1002bc1e 	bne	r2,zero,2c24 <___vfprintf_internal_r+0x15b4>
    2134:	d9814c17 	ldw	r6,1328(sp)
    2138:	3080100c 	andi	r2,r6,64
    213c:	1002b926 	beq	r2,zero,2c24 <___vfprintf_internal_r+0x15b4>
    2140:	3c00000b 	ldhu	r16,0(r7)
    2144:	0009883a 	mov	r4,zero
    2148:	39c00104 	addi	r7,r7,4
    214c:	0023883a 	mov	r17,zero
    2150:	d9c14015 	stw	r7,1280(sp)
    2154:	d8000405 	stb	zero,16(sp)
    2158:	003fd306 	br	20a8 <___vfprintf_internal_r+0xa38>
    215c:	d9014c17 	ldw	r4,1328(sp)
    2160:	21000414 	ori	r4,r4,16
    2164:	d9014c15 	stw	r4,1328(sp)
    2168:	d9414c17 	ldw	r5,1328(sp)
    216c:	2880080c 	andi	r2,r5,32
    2170:	1001081e 	bne	r2,zero,2594 <___vfprintf_internal_r+0xf24>
    2174:	d8c14c17 	ldw	r3,1328(sp)
    2178:	1880040c 	andi	r2,r3,16
    217c:	1002b61e 	bne	r2,zero,2c58 <___vfprintf_internal_r+0x15e8>
    2180:	d9014c17 	ldw	r4,1328(sp)
    2184:	2080100c 	andi	r2,r4,64
    2188:	1002b326 	beq	r2,zero,2c58 <___vfprintf_internal_r+0x15e8>
    218c:	3c00000b 	ldhu	r16,0(r7)
    2190:	01000044 	movi	r4,1
    2194:	39c00104 	addi	r7,r7,4
    2198:	0023883a 	mov	r17,zero
    219c:	d9c14015 	stw	r7,1280(sp)
    21a0:	d8000405 	stb	zero,16(sp)
    21a4:	003fc006 	br	20a8 <___vfprintf_internal_r+0xa38>
    21a8:	d9014f17 	ldw	r4,1340(sp)
    21ac:	b00b883a 	mov	r5,r22
    21b0:	d9800c04 	addi	r6,sp,48
    21b4:	00016180 	call	1618 <__sprint_r>
    21b8:	103ee51e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    21bc:	dc800e17 	ldw	r18,56(sp)
    21c0:	d8c01904 	addi	r3,sp,100
    21c4:	d9814c17 	ldw	r6,1328(sp)
    21c8:	3080004c 	andi	r2,r6,1
    21cc:	1005003a 	cmpeq	r2,r2,zero
    21d0:	103ea51e 	bne	r2,zero,1c68 <___vfprintf_internal_r+0x5f8>
    21d4:	00800044 	movi	r2,1
    21d8:	dc400d17 	ldw	r17,52(sp)
    21dc:	18800115 	stw	r2,4(r3)
    21e0:	d8814917 	ldw	r2,1316(sp)
    21e4:	94800044 	addi	r18,r18,1
    21e8:	8c400044 	addi	r17,r17,1
    21ec:	18800015 	stw	r2,0(r3)
    21f0:	008001c4 	movi	r2,7
    21f4:	dc800e15 	stw	r18,56(sp)
    21f8:	dc400d15 	stw	r17,52(sp)
    21fc:	1442240e 	bge	r2,r17,2a90 <___vfprintf_internal_r+0x1420>
    2200:	d9014f17 	ldw	r4,1340(sp)
    2204:	b00b883a 	mov	r5,r22
    2208:	d9800c04 	addi	r6,sp,48
    220c:	00016180 	call	1618 <__sprint_r>
    2210:	103ecf1e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    2214:	dc800e17 	ldw	r18,56(sp)
    2218:	d8c01904 	addi	r3,sp,100
    221c:	003e9206 	br	1c68 <___vfprintf_internal_r+0x5f8>
    2220:	d9014f17 	ldw	r4,1340(sp)
    2224:	b00b883a 	mov	r5,r22
    2228:	d9800c04 	addi	r6,sp,48
    222c:	00016180 	call	1618 <__sprint_r>
    2230:	103ec026 	beq	r2,zero,1d34 <___vfprintf_internal_r+0x6c4>
    2234:	003ec606 	br	1d50 <___vfprintf_internal_r+0x6e0>
    2238:	d9014f17 	ldw	r4,1340(sp)
    223c:	b00b883a 	mov	r5,r22
    2240:	d9800c04 	addi	r6,sp,48
    2244:	d9c15115 	stw	r7,1348(sp)
    2248:	00016180 	call	1618 <__sprint_r>
    224c:	d9c15117 	ldw	r7,1348(sp)
    2250:	103ebf1e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    2254:	dc800e17 	ldw	r18,56(sp)
    2258:	dc400d17 	ldw	r17,52(sp)
    225c:	dd401904 	addi	r21,sp,100
    2260:	003e7406 	br	1c34 <___vfprintf_internal_r+0x5c4>
    2264:	d9014f17 	ldw	r4,1340(sp)
    2268:	b00b883a 	mov	r5,r22
    226c:	d9800c04 	addi	r6,sp,48
    2270:	d9c15115 	stw	r7,1348(sp)
    2274:	00016180 	call	1618 <__sprint_r>
    2278:	d9c15117 	ldw	r7,1348(sp)
    227c:	103eb41e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    2280:	dd401904 	addi	r21,sp,100
    2284:	003d6d06 	br	183c <___vfprintf_internal_r+0x1cc>
    2288:	d9014f17 	ldw	r4,1340(sp)
    228c:	b00b883a 	mov	r5,r22
    2290:	d9800c04 	addi	r6,sp,48
    2294:	d9c15115 	stw	r7,1348(sp)
    2298:	00016180 	call	1618 <__sprint_r>
    229c:	d9c15117 	ldw	r7,1348(sp)
    22a0:	103eab1e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    22a4:	dc800e17 	ldw	r18,56(sp)
    22a8:	dc400d17 	ldw	r17,52(sp)
    22ac:	dd401904 	addi	r21,sp,100
    22b0:	003e3406 	br	1b84 <___vfprintf_internal_r+0x514>
    22b4:	d9014f17 	ldw	r4,1340(sp)
    22b8:	b00b883a 	mov	r5,r22
    22bc:	d9800c04 	addi	r6,sp,48
    22c0:	d9c15115 	stw	r7,1348(sp)
    22c4:	00016180 	call	1618 <__sprint_r>
    22c8:	d9c15117 	ldw	r7,1348(sp)
    22cc:	103ea01e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    22d0:	dc800e17 	ldw	r18,56(sp)
    22d4:	dc400d17 	ldw	r17,52(sp)
    22d8:	dd401904 	addi	r21,sp,100
    22dc:	003e1c06 	br	1b50 <___vfprintf_internal_r+0x4e0>
    22e0:	d9014f17 	ldw	r4,1340(sp)
    22e4:	b00b883a 	mov	r5,r22
    22e8:	d9800c04 	addi	r6,sp,48
    22ec:	d9c15115 	stw	r7,1348(sp)
    22f0:	00016180 	call	1618 <__sprint_r>
    22f4:	d9c15117 	ldw	r7,1348(sp)
    22f8:	103e951e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    22fc:	dc800e17 	ldw	r18,56(sp)
    2300:	dc400d17 	ldw	r17,52(sp)
    2304:	dd401904 	addi	r21,sp,100
    2308:	003e0406 	br	1b1c <___vfprintf_internal_r+0x4ac>
    230c:	d9000517 	ldw	r4,20(sp)
    2310:	0102580e 	bge	zero,r4,2c74 <___vfprintf_internal_r+0x1604>
    2314:	d9814717 	ldw	r6,1308(sp)
    2318:	21807a16 	blt	r4,r6,2504 <___vfprintf_internal_r+0xe94>
    231c:	d8814117 	ldw	r2,1284(sp)
    2320:	91a5883a 	add	r18,r18,r6
    2324:	8c400044 	addi	r17,r17,1
    2328:	a8800015 	stw	r2,0(r21)
    232c:	008001c4 	movi	r2,7
    2330:	a9800115 	stw	r6,4(r21)
    2334:	dc800e15 	stw	r18,56(sp)
    2338:	dc400d15 	stw	r17,52(sp)
    233c:	1442fc16 	blt	r2,r17,2f30 <___vfprintf_internal_r+0x18c0>
    2340:	a8c00204 	addi	r3,r21,8
    2344:	d9414717 	ldw	r5,1308(sp)
    2348:	2161c83a 	sub	r16,r4,r5
    234c:	043f9d0e 	bge	zero,r16,21c4 <___vfprintf_internal_r+0xb54>
    2350:	00800404 	movi	r2,16
    2354:	1402190e 	bge	r2,r16,2bbc <___vfprintf_internal_r+0x154c>
    2358:	dc400d17 	ldw	r17,52(sp)
    235c:	1027883a 	mov	r19,r2
    2360:	07000074 	movhi	fp,1
    2364:	e735bd84 	addi	fp,fp,-10506
    2368:	050001c4 	movi	r20,7
    236c:	00000306 	br	237c <___vfprintf_internal_r+0xd0c>
    2370:	18c00204 	addi	r3,r3,8
    2374:	843ffc04 	addi	r16,r16,-16
    2378:	9c02130e 	bge	r19,r16,2bc8 <___vfprintf_internal_r+0x1558>
    237c:	94800404 	addi	r18,r18,16
    2380:	8c400044 	addi	r17,r17,1
    2384:	1f000015 	stw	fp,0(r3)
    2388:	1cc00115 	stw	r19,4(r3)
    238c:	dc800e15 	stw	r18,56(sp)
    2390:	dc400d15 	stw	r17,52(sp)
    2394:	a47ff60e 	bge	r20,r17,2370 <___vfprintf_internal_r+0xd00>
    2398:	d9014f17 	ldw	r4,1340(sp)
    239c:	b00b883a 	mov	r5,r22
    23a0:	d9800c04 	addi	r6,sp,48
    23a4:	00016180 	call	1618 <__sprint_r>
    23a8:	103e691e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    23ac:	dc800e17 	ldw	r18,56(sp)
    23b0:	dc400d17 	ldw	r17,52(sp)
    23b4:	d8c01904 	addi	r3,sp,100
    23b8:	003fee06 	br	2374 <___vfprintf_internal_r+0xd04>
    23bc:	d8814717 	ldw	r2,1308(sp)
    23c0:	143fffc4 	addi	r16,r2,-1
    23c4:	043e970e 	bge	zero,r16,1e24 <___vfprintf_internal_r+0x7b4>
    23c8:	00800404 	movi	r2,16
    23cc:	1400180e 	bge	r2,r16,2430 <___vfprintf_internal_r+0xdc0>
    23d0:	1029883a 	mov	r20,r2
    23d4:	07000074 	movhi	fp,1
    23d8:	e735bd84 	addi	fp,fp,-10506
    23dc:	054001c4 	movi	r21,7
    23e0:	00000306 	br	23f0 <___vfprintf_internal_r+0xd80>
    23e4:	9cc00204 	addi	r19,r19,8
    23e8:	843ffc04 	addi	r16,r16,-16
    23ec:	a400120e 	bge	r20,r16,2438 <___vfprintf_internal_r+0xdc8>
    23f0:	94800404 	addi	r18,r18,16
    23f4:	8c400044 	addi	r17,r17,1
    23f8:	9f000015 	stw	fp,0(r19)
    23fc:	9d000115 	stw	r20,4(r19)
    2400:	dc800e15 	stw	r18,56(sp)
    2404:	dc400d15 	stw	r17,52(sp)
    2408:	ac7ff60e 	bge	r21,r17,23e4 <___vfprintf_internal_r+0xd74>
    240c:	d9014f17 	ldw	r4,1340(sp)
    2410:	b00b883a 	mov	r5,r22
    2414:	d9800c04 	addi	r6,sp,48
    2418:	00016180 	call	1618 <__sprint_r>
    241c:	103e4c1e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    2420:	dc800e17 	ldw	r18,56(sp)
    2424:	dc400d17 	ldw	r17,52(sp)
    2428:	dcc01904 	addi	r19,sp,100
    242c:	003fee06 	br	23e8 <___vfprintf_internal_r+0xd78>
    2430:	07000074 	movhi	fp,1
    2434:	e735bd84 	addi	fp,fp,-10506
    2438:	9425883a 	add	r18,r18,r16
    243c:	8c400044 	addi	r17,r17,1
    2440:	008001c4 	movi	r2,7
    2444:	9f000015 	stw	fp,0(r19)
    2448:	9c000115 	stw	r16,4(r19)
    244c:	dc800e15 	stw	r18,56(sp)
    2450:	dc400d15 	stw	r17,52(sp)
    2454:	147e720e 	bge	r2,r17,1e20 <___vfprintf_internal_r+0x7b0>
    2458:	d9014f17 	ldw	r4,1340(sp)
    245c:	b00b883a 	mov	r5,r22
    2460:	d9800c04 	addi	r6,sp,48
    2464:	00016180 	call	1618 <__sprint_r>
    2468:	103e391e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    246c:	dc800e17 	ldw	r18,56(sp)
    2470:	dc400d17 	ldw	r17,52(sp)
    2474:	dcc01904 	addi	r19,sp,100
    2478:	003e6a06 	br	1e24 <___vfprintf_internal_r+0x7b4>
    247c:	d9014f17 	ldw	r4,1340(sp)
    2480:	b00b883a 	mov	r5,r22
    2484:	d9800c04 	addi	r6,sp,48
    2488:	d9c15115 	stw	r7,1348(sp)
    248c:	00016180 	call	1618 <__sprint_r>
    2490:	d9c15117 	ldw	r7,1348(sp)
    2494:	103e2e1e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    2498:	dc800e17 	ldw	r18,56(sp)
    249c:	dc400d17 	ldw	r17,52(sp)
    24a0:	dd401904 	addi	r21,sp,100
    24a4:	003dba06 	br	1b90 <___vfprintf_internal_r+0x520>
    24a8:	d9014f17 	ldw	r4,1340(sp)
    24ac:	b00b883a 	mov	r5,r22
    24b0:	d9800c04 	addi	r6,sp,48
    24b4:	00016180 	call	1618 <__sprint_r>
    24b8:	103e251e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    24bc:	dc800e17 	ldw	r18,56(sp)
    24c0:	dc400d17 	ldw	r17,52(sp)
    24c4:	dcc01904 	addi	r19,sp,100
    24c8:	003e4206 	br	1dd4 <___vfprintf_internal_r+0x764>
    24cc:	d9014f17 	ldw	r4,1340(sp)
    24d0:	b00b883a 	mov	r5,r22
    24d4:	d9800c04 	addi	r6,sp,48
    24d8:	00016180 	call	1618 <__sprint_r>
    24dc:	103e1c1e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    24e0:	dc800e17 	ldw	r18,56(sp)
    24e4:	dc400d17 	ldw	r17,52(sp)
    24e8:	d8c01904 	addi	r3,sp,100
    24ec:	003e2e06 	br	1da8 <___vfprintf_internal_r+0x738>
    24f0:	d9414c17 	ldw	r5,1328(sp)
    24f4:	2880004c 	andi	r2,r5,1
    24f8:	1005003a 	cmpeq	r2,r2,zero
    24fc:	103dda1e 	bne	r2,zero,1c68 <___vfprintf_internal_r+0x5f8>
    2500:	003e9f06 	br	1f80 <___vfprintf_internal_r+0x910>
    2504:	d8c14117 	ldw	r3,1284(sp)
    2508:	9125883a 	add	r18,r18,r4
    250c:	8c400044 	addi	r17,r17,1
    2510:	008001c4 	movi	r2,7
    2514:	a8c00015 	stw	r3,0(r21)
    2518:	a9000115 	stw	r4,4(r21)
    251c:	dc800e15 	stw	r18,56(sp)
    2520:	dc400d15 	stw	r17,52(sp)
    2524:	14426c16 	blt	r2,r17,2ed8 <___vfprintf_internal_r+0x1868>
    2528:	a8c00204 	addi	r3,r21,8
    252c:	d9414917 	ldw	r5,1316(sp)
    2530:	00800044 	movi	r2,1
    2534:	94800044 	addi	r18,r18,1
    2538:	8c400044 	addi	r17,r17,1
    253c:	18800115 	stw	r2,4(r3)
    2540:	008001c4 	movi	r2,7
    2544:	19400015 	stw	r5,0(r3)
    2548:	dc800e15 	stw	r18,56(sp)
    254c:	dc400d15 	stw	r17,52(sp)
    2550:	2021883a 	mov	r16,r4
    2554:	14425616 	blt	r2,r17,2eb0 <___vfprintf_internal_r+0x1840>
    2558:	19400204 	addi	r5,r3,8
    255c:	d9814717 	ldw	r6,1308(sp)
    2560:	8c400044 	addi	r17,r17,1
    2564:	dc400d15 	stw	r17,52(sp)
    2568:	3107c83a 	sub	r3,r6,r4
    256c:	d9014117 	ldw	r4,1284(sp)
    2570:	90e5883a 	add	r18,r18,r3
    2574:	28c00115 	stw	r3,4(r5)
    2578:	8105883a 	add	r2,r16,r4
    257c:	28800015 	stw	r2,0(r5)
    2580:	008001c4 	movi	r2,7
    2584:	dc800e15 	stw	r18,56(sp)
    2588:	147f1d16 	blt	r2,r17,2200 <___vfprintf_internal_r+0xb90>
    258c:	28c00204 	addi	r3,r5,8
    2590:	003db506 	br	1c68 <___vfprintf_internal_r+0x5f8>
    2594:	3c000017 	ldw	r16,0(r7)
    2598:	3c400117 	ldw	r17,4(r7)
    259c:	39800204 	addi	r6,r7,8
    25a0:	01000044 	movi	r4,1
    25a4:	d9814015 	stw	r6,1280(sp)
    25a8:	d8000405 	stb	zero,16(sp)
    25ac:	003ebe06 	br	20a8 <___vfprintf_internal_r+0xa38>
    25b0:	3c000017 	ldw	r16,0(r7)
    25b4:	3c400117 	ldw	r17,4(r7)
    25b8:	38800204 	addi	r2,r7,8
    25bc:	d8814015 	stw	r2,1280(sp)
    25c0:	003eb706 	br	20a0 <___vfprintf_internal_r+0xa30>
    25c4:	3c000017 	ldw	r16,0(r7)
    25c8:	3c400117 	ldw	r17,4(r7)
    25cc:	39000204 	addi	r4,r7,8
    25d0:	d9014015 	stw	r4,1280(sp)
    25d4:	0009883a 	mov	r4,zero
    25d8:	d8000405 	stb	zero,16(sp)
    25dc:	003eb206 	br	20a8 <___vfprintf_internal_r+0xa38>
    25e0:	38c00017 	ldw	r3,0(r7)
    25e4:	39c00104 	addi	r7,r7,4
    25e8:	d8c14a15 	stw	r3,1320(sp)
    25ec:	1800d70e 	bge	r3,zero,294c <___vfprintf_internal_r+0x12dc>
    25f0:	00c7c83a 	sub	r3,zero,r3
    25f4:	d8c14a15 	stw	r3,1320(sp)
    25f8:	d9014c17 	ldw	r4,1328(sp)
    25fc:	b8c00007 	ldb	r3,0(r23)
    2600:	21000114 	ori	r4,r4,4
    2604:	d9014c15 	stw	r4,1328(sp)
    2608:	003c9806 	br	186c <___vfprintf_internal_r+0x1fc>
    260c:	d9814c17 	ldw	r6,1328(sp)
    2610:	3080080c 	andi	r2,r6,32
    2614:	1001f626 	beq	r2,zero,2df0 <___vfprintf_internal_r+0x1780>
    2618:	d9014b17 	ldw	r4,1324(sp)
    261c:	38800017 	ldw	r2,0(r7)
    2620:	39c00104 	addi	r7,r7,4
    2624:	d9c14015 	stw	r7,1280(sp)
    2628:	2007d7fa 	srai	r3,r4,31
    262c:	d9c14017 	ldw	r7,1280(sp)
    2630:	11000015 	stw	r4,0(r2)
    2634:	10c00115 	stw	r3,4(r2)
    2638:	003c6906 	br	17e0 <___vfprintf_internal_r+0x170>
    263c:	b8c00007 	ldb	r3,0(r23)
    2640:	00801b04 	movi	r2,108
    2644:	18825526 	beq	r3,r2,2f9c <___vfprintf_internal_r+0x192c>
    2648:	d9414c17 	ldw	r5,1328(sp)
    264c:	29400414 	ori	r5,r5,16
    2650:	d9414c15 	stw	r5,1328(sp)
    2654:	003c8506 	br	186c <___vfprintf_internal_r+0x1fc>
    2658:	d9814c17 	ldw	r6,1328(sp)
    265c:	b8c00007 	ldb	r3,0(r23)
    2660:	31800814 	ori	r6,r6,32
    2664:	d9814c15 	stw	r6,1328(sp)
    2668:	003c8006 	br	186c <___vfprintf_internal_r+0x1fc>
    266c:	d8814c17 	ldw	r2,1328(sp)
    2670:	3c000017 	ldw	r16,0(r7)
    2674:	00c01e04 	movi	r3,120
    2678:	10800094 	ori	r2,r2,2
    267c:	d8814c15 	stw	r2,1328(sp)
    2680:	39c00104 	addi	r7,r7,4
    2684:	01400074 	movhi	r5,1
    2688:	2975a604 	addi	r5,r5,-10600
    268c:	00800c04 	movi	r2,48
    2690:	0023883a 	mov	r17,zero
    2694:	01000084 	movi	r4,2
    2698:	d9c14015 	stw	r7,1280(sp)
    269c:	d8c14d15 	stw	r3,1332(sp)
    26a0:	d9414415 	stw	r5,1296(sp)
    26a4:	d8800445 	stb	r2,17(sp)
    26a8:	d8c00485 	stb	r3,18(sp)
    26ac:	d8000405 	stb	zero,16(sp)
    26b0:	003e7d06 	br	20a8 <___vfprintf_internal_r+0xa38>
    26b4:	d8814c17 	ldw	r2,1328(sp)
    26b8:	b8c00007 	ldb	r3,0(r23)
    26bc:	10801014 	ori	r2,r2,64
    26c0:	d8814c15 	stw	r2,1328(sp)
    26c4:	003c6906 	br	186c <___vfprintf_internal_r+0x1fc>
    26c8:	d9414c17 	ldw	r5,1328(sp)
    26cc:	2880020c 	andi	r2,r5,8
    26d0:	1001e526 	beq	r2,zero,2e68 <___vfprintf_internal_r+0x17f8>
    26d4:	39800017 	ldw	r6,0(r7)
    26d8:	38800204 	addi	r2,r7,8
    26dc:	d8814015 	stw	r2,1280(sp)
    26e0:	d9814215 	stw	r6,1288(sp)
    26e4:	39c00117 	ldw	r7,4(r7)
    26e8:	d9c14315 	stw	r7,1292(sp)
    26ec:	d9014217 	ldw	r4,1288(sp)
    26f0:	d9414317 	ldw	r5,1292(sp)
    26f4:	00079e00 	call	79e0 <__isinfd>
    26f8:	10021d26 	beq	r2,zero,2f70 <___vfprintf_internal_r+0x1900>
    26fc:	d9014217 	ldw	r4,1288(sp)
    2700:	d9414317 	ldw	r5,1292(sp)
    2704:	000d883a 	mov	r6,zero
    2708:	000f883a 	mov	r7,zero
    270c:	0009b0c0 	call	9b0c <__ltdf2>
    2710:	1002d016 	blt	r2,zero,3254 <___vfprintf_internal_r+0x1be4>
    2714:	d9414d17 	ldw	r5,1332(sp)
    2718:	008011c4 	movi	r2,71
    271c:	11421016 	blt	r2,r5,2f60 <___vfprintf_internal_r+0x18f0>
    2720:	01800074 	movhi	r6,1
    2724:	31b5ab04 	addi	r6,r6,-10580
    2728:	d9814115 	stw	r6,1284(sp)
    272c:	d9014c17 	ldw	r4,1328(sp)
    2730:	00c000c4 	movi	r3,3
    2734:	00bfdfc4 	movi	r2,-129
    2738:	2088703a 	and	r4,r4,r2
    273c:	180f883a 	mov	r7,r3
    2740:	d8c14515 	stw	r3,1300(sp)
    2744:	d9014c15 	stw	r4,1328(sp)
    2748:	d8014615 	stw	zero,1304(sp)
    274c:	003e6a06 	br	20f8 <___vfprintf_internal_r+0xa88>
    2750:	38800017 	ldw	r2,0(r7)
    2754:	00c00044 	movi	r3,1
    2758:	39c00104 	addi	r7,r7,4
    275c:	d9c14015 	stw	r7,1280(sp)
    2760:	d9000f04 	addi	r4,sp,60
    2764:	180f883a 	mov	r7,r3
    2768:	d8c14515 	stw	r3,1300(sp)
    276c:	d9014115 	stw	r4,1284(sp)
    2770:	d8800f05 	stb	r2,60(sp)
    2774:	d8000405 	stb	zero,16(sp)
    2778:	003cac06 	br	1a2c <___vfprintf_internal_r+0x3bc>
    277c:	01400074 	movhi	r5,1
    2780:	2975b104 	addi	r5,r5,-10556
    2784:	d9414415 	stw	r5,1296(sp)
    2788:	d9814c17 	ldw	r6,1328(sp)
    278c:	3080080c 	andi	r2,r6,32
    2790:	1000ff26 	beq	r2,zero,2b90 <___vfprintf_internal_r+0x1520>
    2794:	3c000017 	ldw	r16,0(r7)
    2798:	3c400117 	ldw	r17,4(r7)
    279c:	38800204 	addi	r2,r7,8
    27a0:	d8814015 	stw	r2,1280(sp)
    27a4:	d9414c17 	ldw	r5,1328(sp)
    27a8:	2880004c 	andi	r2,r5,1
    27ac:	1005003a 	cmpeq	r2,r2,zero
    27b0:	1000b91e 	bne	r2,zero,2a98 <___vfprintf_internal_r+0x1428>
    27b4:	8444b03a 	or	r2,r16,r17
    27b8:	1000b726 	beq	r2,zero,2a98 <___vfprintf_internal_r+0x1428>
    27bc:	d9814d17 	ldw	r6,1332(sp)
    27c0:	29400094 	ori	r5,r5,2
    27c4:	00800c04 	movi	r2,48
    27c8:	01000084 	movi	r4,2
    27cc:	d9414c15 	stw	r5,1328(sp)
    27d0:	d8800445 	stb	r2,17(sp)
    27d4:	d9800485 	stb	r6,18(sp)
    27d8:	d8000405 	stb	zero,16(sp)
    27dc:	003e3206 	br	20a8 <___vfprintf_internal_r+0xa38>
    27e0:	01800074 	movhi	r6,1
    27e4:	31b5a604 	addi	r6,r6,-10600
    27e8:	d9814415 	stw	r6,1296(sp)
    27ec:	003fe606 	br	2788 <___vfprintf_internal_r+0x1118>
    27f0:	00800ac4 	movi	r2,43
    27f4:	d8800405 	stb	r2,16(sp)
    27f8:	b8c00007 	ldb	r3,0(r23)
    27fc:	003c1b06 	br	186c <___vfprintf_internal_r+0x1fc>
    2800:	d8814c17 	ldw	r2,1328(sp)
    2804:	b8c00007 	ldb	r3,0(r23)
    2808:	10800054 	ori	r2,r2,1
    280c:	d8814c15 	stw	r2,1328(sp)
    2810:	003c1606 	br	186c <___vfprintf_internal_r+0x1fc>
    2814:	d8800407 	ldb	r2,16(sp)
    2818:	10004c1e 	bne	r2,zero,294c <___vfprintf_internal_r+0x12dc>
    281c:	00800804 	movi	r2,32
    2820:	d8800405 	stb	r2,16(sp)
    2824:	b8c00007 	ldb	r3,0(r23)
    2828:	003c1006 	br	186c <___vfprintf_internal_r+0x1fc>
    282c:	d9814c17 	ldw	r6,1328(sp)
    2830:	b8c00007 	ldb	r3,0(r23)
    2834:	31800214 	ori	r6,r6,8
    2838:	d9814c15 	stw	r6,1328(sp)
    283c:	003c0b06 	br	186c <___vfprintf_internal_r+0x1fc>
    2840:	0009883a 	mov	r4,zero
    2844:	04000244 	movi	r16,9
    2848:	01400284 	movi	r5,10
    284c:	d9c15115 	stw	r7,1348(sp)
    2850:	0000c680 	call	c68 <__mulsi3>
    2854:	b9000007 	ldb	r4,0(r23)
    2858:	d8c14d17 	ldw	r3,1332(sp)
    285c:	bdc00044 	addi	r23,r23,1
    2860:	d9014d15 	stw	r4,1332(sp)
    2864:	d9414d17 	ldw	r5,1332(sp)
    2868:	1885883a 	add	r2,r3,r2
    286c:	113ff404 	addi	r4,r2,-48
    2870:	28bff404 	addi	r2,r5,-48
    2874:	d9c15117 	ldw	r7,1348(sp)
    2878:	80bff32e 	bgeu	r16,r2,2848 <___vfprintf_internal_r+0x11d8>
    287c:	d9014a15 	stw	r4,1320(sp)
    2880:	003bfc06 	br	1874 <___vfprintf_internal_r+0x204>
    2884:	d8814c17 	ldw	r2,1328(sp)
    2888:	b8c00007 	ldb	r3,0(r23)
    288c:	10802014 	ori	r2,r2,128
    2890:	d8814c15 	stw	r2,1328(sp)
    2894:	003bf506 	br	186c <___vfprintf_internal_r+0x1fc>
    2898:	b8c00007 	ldb	r3,0(r23)
    289c:	00800a84 	movi	r2,42
    28a0:	bdc00044 	addi	r23,r23,1
    28a4:	18831826 	beq	r3,r2,3508 <___vfprintf_internal_r+0x1e98>
    28a8:	d8c14d15 	stw	r3,1332(sp)
    28ac:	18bff404 	addi	r2,r3,-48
    28b0:	00c00244 	movi	r3,9
    28b4:	18827b36 	bltu	r3,r2,32a4 <___vfprintf_internal_r+0x1c34>
    28b8:	1821883a 	mov	r16,r3
    28bc:	0009883a 	mov	r4,zero
    28c0:	01400284 	movi	r5,10
    28c4:	d9c15115 	stw	r7,1348(sp)
    28c8:	0000c680 	call	c68 <__mulsi3>
    28cc:	d9414d17 	ldw	r5,1332(sp)
    28d0:	b9800007 	ldb	r6,0(r23)
    28d4:	d9c15117 	ldw	r7,1348(sp)
    28d8:	1145883a 	add	r2,r2,r5
    28dc:	113ff404 	addi	r4,r2,-48
    28e0:	30bff404 	addi	r2,r6,-48
    28e4:	d9814d15 	stw	r6,1332(sp)
    28e8:	bdc00044 	addi	r23,r23,1
    28ec:	80bff42e 	bgeu	r16,r2,28c0 <___vfprintf_internal_r+0x1250>
    28f0:	2027883a 	mov	r19,r4
    28f4:	203bdf0e 	bge	r4,zero,1874 <___vfprintf_internal_r+0x204>
    28f8:	04ffffc4 	movi	r19,-1
    28fc:	003bdd06 	br	1874 <___vfprintf_internal_r+0x204>
    2900:	d8000405 	stb	zero,16(sp)
    2904:	39800017 	ldw	r6,0(r7)
    2908:	39c00104 	addi	r7,r7,4
    290c:	d9c14015 	stw	r7,1280(sp)
    2910:	d9814115 	stw	r6,1284(sp)
    2914:	3001c926 	beq	r6,zero,303c <___vfprintf_internal_r+0x19cc>
    2918:	98000e16 	blt	r19,zero,2954 <___vfprintf_internal_r+0x12e4>
    291c:	d9014117 	ldw	r4,1284(sp)
    2920:	000b883a 	mov	r5,zero
    2924:	980d883a 	mov	r6,r19
    2928:	00060640 	call	6064 <memchr>
    292c:	10025926 	beq	r2,zero,3294 <___vfprintf_internal_r+0x1c24>
    2930:	d8c14117 	ldw	r3,1284(sp)
    2934:	10cfc83a 	sub	r7,r2,r3
    2938:	99c19e16 	blt	r19,r7,2fb4 <___vfprintf_internal_r+0x1944>
    293c:	d9c14515 	stw	r7,1300(sp)
    2940:	38000916 	blt	r7,zero,2968 <___vfprintf_internal_r+0x12f8>
    2944:	d8014615 	stw	zero,1304(sp)
    2948:	003deb06 	br	20f8 <___vfprintf_internal_r+0xa88>
    294c:	b8c00007 	ldb	r3,0(r23)
    2950:	003bc606 	br	186c <___vfprintf_internal_r+0x1fc>
    2954:	d9014117 	ldw	r4,1284(sp)
    2958:	00015a40 	call	15a4 <strlen>
    295c:	d8814515 	stw	r2,1300(sp)
    2960:	100f883a 	mov	r7,r2
    2964:	103ff70e 	bge	r2,zero,2944 <___vfprintf_internal_r+0x12d4>
    2968:	d8014515 	stw	zero,1300(sp)
    296c:	d8014615 	stw	zero,1304(sp)
    2970:	003de106 	br	20f8 <___vfprintf_internal_r+0xa88>
    2974:	20c03fcc 	andi	r3,r4,255
    2978:	00800044 	movi	r2,1
    297c:	18802d26 	beq	r3,r2,2a34 <___vfprintf_internal_r+0x13c4>
    2980:	18800e36 	bltu	r3,r2,29bc <___vfprintf_internal_r+0x134c>
    2984:	00800084 	movi	r2,2
    2988:	1880fa26 	beq	r3,r2,2d74 <___vfprintf_internal_r+0x1704>
    298c:	01000074 	movhi	r4,1
    2990:	2135b604 	addi	r4,r4,-10536
    2994:	00015a40 	call	15a4 <strlen>
    2998:	100f883a 	mov	r7,r2
    299c:	dcc14515 	stw	r19,1300(sp)
    29a0:	9880010e 	bge	r19,r2,29a8 <___vfprintf_internal_r+0x1338>
    29a4:	d8814515 	stw	r2,1300(sp)
    29a8:	00800074 	movhi	r2,1
    29ac:	10b5b604 	addi	r2,r2,-10536
    29b0:	dcc14615 	stw	r19,1304(sp)
    29b4:	d8814115 	stw	r2,1284(sp)
    29b8:	003dcf06 	br	20f8 <___vfprintf_internal_r+0xa88>
    29bc:	d9401904 	addi	r5,sp,100
    29c0:	dd000f04 	addi	r20,sp,60
    29c4:	d9414115 	stw	r5,1284(sp)
    29c8:	880a977a 	slli	r5,r17,29
    29cc:	d9814117 	ldw	r6,1284(sp)
    29d0:	8004d0fa 	srli	r2,r16,3
    29d4:	8806d0fa 	srli	r3,r17,3
    29d8:	810001cc 	andi	r4,r16,7
    29dc:	2884b03a 	or	r2,r5,r2
    29e0:	31bfffc4 	addi	r6,r6,-1
    29e4:	21000c04 	addi	r4,r4,48
    29e8:	d9814115 	stw	r6,1284(sp)
    29ec:	10cab03a 	or	r5,r2,r3
    29f0:	31000005 	stb	r4,0(r6)
    29f4:	1021883a 	mov	r16,r2
    29f8:	1823883a 	mov	r17,r3
    29fc:	283ff21e 	bne	r5,zero,29c8 <___vfprintf_internal_r+0x1358>
    2a00:	d8c14c17 	ldw	r3,1328(sp)
    2a04:	1880004c 	andi	r2,r3,1
    2a08:	1005003a 	cmpeq	r2,r2,zero
    2a0c:	103db31e 	bne	r2,zero,20dc <___vfprintf_internal_r+0xa6c>
    2a10:	20803fcc 	andi	r2,r4,255
    2a14:	1080201c 	xori	r2,r2,128
    2a18:	10bfe004 	addi	r2,r2,-128
    2a1c:	00c00c04 	movi	r3,48
    2a20:	10fdae26 	beq	r2,r3,20dc <___vfprintf_internal_r+0xa6c>
    2a24:	31bfffc4 	addi	r6,r6,-1
    2a28:	d9814115 	stw	r6,1284(sp)
    2a2c:	30c00005 	stb	r3,0(r6)
    2a30:	003daa06 	br	20dc <___vfprintf_internal_r+0xa6c>
    2a34:	88800068 	cmpgeui	r2,r17,1
    2a38:	10002c1e 	bne	r2,zero,2aec <___vfprintf_internal_r+0x147c>
    2a3c:	8800021e 	bne	r17,zero,2a48 <___vfprintf_internal_r+0x13d8>
    2a40:	00800244 	movi	r2,9
    2a44:	14002936 	bltu	r2,r16,2aec <___vfprintf_internal_r+0x147c>
    2a48:	d90018c4 	addi	r4,sp,99
    2a4c:	dd000f04 	addi	r20,sp,60
    2a50:	d9014115 	stw	r4,1284(sp)
    2a54:	d9014117 	ldw	r4,1284(sp)
    2a58:	80800c04 	addi	r2,r16,48
    2a5c:	20800005 	stb	r2,0(r4)
    2a60:	003d9e06 	br	20dc <___vfprintf_internal_r+0xa6c>
    2a64:	dc400d17 	ldw	r17,52(sp)
    2a68:	07000074 	movhi	fp,1
    2a6c:	e735bd84 	addi	fp,fp,-10506
    2a70:	9425883a 	add	r18,r18,r16
    2a74:	8c400044 	addi	r17,r17,1
    2a78:	008001c4 	movi	r2,7
    2a7c:	1f000015 	stw	fp,0(r3)
    2a80:	1c000115 	stw	r16,4(r3)
    2a84:	dc800e15 	stw	r18,56(sp)
    2a88:	dc400d15 	stw	r17,52(sp)
    2a8c:	147ddc16 	blt	r2,r17,2200 <___vfprintf_internal_r+0xb90>
    2a90:	18c00204 	addi	r3,r3,8
    2a94:	003c7406 	br	1c68 <___vfprintf_internal_r+0x5f8>
    2a98:	01000084 	movi	r4,2
    2a9c:	d8000405 	stb	zero,16(sp)
    2aa0:	003d8106 	br	20a8 <___vfprintf_internal_r+0xa38>
    2aa4:	d9814c17 	ldw	r6,1328(sp)
    2aa8:	30c4703a 	and	r2,r6,r3
    2aac:	1005003a 	cmpeq	r2,r2,zero
    2ab0:	103cb326 	beq	r2,zero,1d80 <___vfprintf_internal_r+0x710>
    2ab4:	d9014117 	ldw	r4,1284(sp)
    2ab8:	94800044 	addi	r18,r18,1
    2abc:	8c400044 	addi	r17,r17,1
    2ac0:	008001c4 	movi	r2,7
    2ac4:	a9000015 	stw	r4,0(r21)
    2ac8:	a8c00115 	stw	r3,4(r21)
    2acc:	dc800e15 	stw	r18,56(sp)
    2ad0:	dc400d15 	stw	r17,52(sp)
    2ad4:	147e6016 	blt	r2,r17,2458 <___vfprintf_internal_r+0xde8>
    2ad8:	acc00204 	addi	r19,r21,8
    2adc:	003cd106 	br	1e24 <___vfprintf_internal_r+0x7b4>
    2ae0:	07000074 	movhi	fp,1
    2ae4:	e735bd84 	addi	fp,fp,-10506
    2ae8:	003c4906 	br	1c10 <___vfprintf_internal_r+0x5a0>
    2aec:	dd000f04 	addi	r20,sp,60
    2af0:	dc801904 	addi	r18,sp,100
    2af4:	8009883a 	mov	r4,r16
    2af8:	880b883a 	mov	r5,r17
    2afc:	01800284 	movi	r6,10
    2b00:	000f883a 	mov	r7,zero
    2b04:	000876c0 	call	876c <__umoddi3>
    2b08:	12000c04 	addi	r8,r2,48
    2b0c:	94bfffc4 	addi	r18,r18,-1
    2b10:	8009883a 	mov	r4,r16
    2b14:	880b883a 	mov	r5,r17
    2b18:	01800284 	movi	r6,10
    2b1c:	000f883a 	mov	r7,zero
    2b20:	92000005 	stb	r8,0(r18)
    2b24:	00081000 	call	8100 <__udivdi3>
    2b28:	1009883a 	mov	r4,r2
    2b2c:	1021883a 	mov	r16,r2
    2b30:	18800068 	cmpgeui	r2,r3,1
    2b34:	1823883a 	mov	r17,r3
    2b38:	103fee1e 	bne	r2,zero,2af4 <___vfprintf_internal_r+0x1484>
    2b3c:	1800021e 	bne	r3,zero,2b48 <___vfprintf_internal_r+0x14d8>
    2b40:	00800244 	movi	r2,9
    2b44:	113feb36 	bltu	r2,r4,2af4 <___vfprintf_internal_r+0x1484>
    2b48:	94bfffc4 	addi	r18,r18,-1
    2b4c:	dc814115 	stw	r18,1284(sp)
    2b50:	003fc006 	br	2a54 <___vfprintf_internal_r+0x13e4>
    2b54:	d9014c17 	ldw	r4,1328(sp)
    2b58:	2080004c 	andi	r2,r4,1
    2b5c:	10009a1e 	bne	r2,zero,2dc8 <___vfprintf_internal_r+0x1758>
    2b60:	d9401904 	addi	r5,sp,100
    2b64:	dd000f04 	addi	r20,sp,60
    2b68:	d9414115 	stw	r5,1284(sp)
    2b6c:	003d5b06 	br	20dc <___vfprintf_internal_r+0xa6c>
    2b70:	d9014f17 	ldw	r4,1340(sp)
    2b74:	b00b883a 	mov	r5,r22
    2b78:	d9800c04 	addi	r6,sp,48
    2b7c:	00016180 	call	1618 <__sprint_r>
    2b80:	103c731e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    2b84:	dc800e17 	ldw	r18,56(sp)
    2b88:	d8c01904 	addi	r3,sp,100
    2b8c:	003cf906 	br	1f74 <___vfprintf_internal_r+0x904>
    2b90:	d8c14c17 	ldw	r3,1328(sp)
    2b94:	1880040c 	andi	r2,r3,16
    2b98:	1000711e 	bne	r2,zero,2d60 <___vfprintf_internal_r+0x16f0>
    2b9c:	d9014c17 	ldw	r4,1328(sp)
    2ba0:	2080100c 	andi	r2,r4,64
    2ba4:	10006e26 	beq	r2,zero,2d60 <___vfprintf_internal_r+0x16f0>
    2ba8:	3c00000b 	ldhu	r16,0(r7)
    2bac:	0023883a 	mov	r17,zero
    2bb0:	39c00104 	addi	r7,r7,4
    2bb4:	d9c14015 	stw	r7,1280(sp)
    2bb8:	003efa06 	br	27a4 <___vfprintf_internal_r+0x1134>
    2bbc:	dc400d17 	ldw	r17,52(sp)
    2bc0:	07000074 	movhi	fp,1
    2bc4:	e735bd84 	addi	fp,fp,-10506
    2bc8:	9425883a 	add	r18,r18,r16
    2bcc:	8c400044 	addi	r17,r17,1
    2bd0:	008001c4 	movi	r2,7
    2bd4:	1f000015 	stw	fp,0(r3)
    2bd8:	1c000115 	stw	r16,4(r3)
    2bdc:	dc800e15 	stw	r18,56(sp)
    2be0:	dc400d15 	stw	r17,52(sp)
    2be4:	147d7016 	blt	r2,r17,21a8 <___vfprintf_internal_r+0xb38>
    2be8:	18c00204 	addi	r3,r3,8
    2bec:	003d7506 	br	21c4 <___vfprintf_internal_r+0xb54>
    2bf0:	dc800e17 	ldw	r18,56(sp)
    2bf4:	dc400d17 	ldw	r17,52(sp)
    2bf8:	07000074 	movhi	fp,1
    2bfc:	e735c184 	addi	fp,fp,-10490
    2c00:	003bba06 	br	1aec <___vfprintf_internal_r+0x47c>
    2c04:	d9014f17 	ldw	r4,1340(sp)
    2c08:	b00b883a 	mov	r5,r22
    2c0c:	d9800c04 	addi	r6,sp,48
    2c10:	00016180 	call	1618 <__sprint_r>
    2c14:	103c4e1e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    2c18:	dc800e17 	ldw	r18,56(sp)
    2c1c:	d8c01904 	addi	r3,sp,100
    2c20:	003ce306 	br	1fb0 <___vfprintf_internal_r+0x940>
    2c24:	3c000017 	ldw	r16,0(r7)
    2c28:	0009883a 	mov	r4,zero
    2c2c:	39c00104 	addi	r7,r7,4
    2c30:	0023883a 	mov	r17,zero
    2c34:	d9c14015 	stw	r7,1280(sp)
    2c38:	d8000405 	stb	zero,16(sp)
    2c3c:	003d1a06 	br	20a8 <___vfprintf_internal_r+0xa38>
    2c40:	38800017 	ldw	r2,0(r7)
    2c44:	39c00104 	addi	r7,r7,4
    2c48:	d9c14015 	stw	r7,1280(sp)
    2c4c:	1023d7fa 	srai	r17,r2,31
    2c50:	1021883a 	mov	r16,r2
    2c54:	003d1206 	br	20a0 <___vfprintf_internal_r+0xa30>
    2c58:	3c000017 	ldw	r16,0(r7)
    2c5c:	01000044 	movi	r4,1
    2c60:	39c00104 	addi	r7,r7,4
    2c64:	0023883a 	mov	r17,zero
    2c68:	d9c14015 	stw	r7,1280(sp)
    2c6c:	d8000405 	stb	zero,16(sp)
    2c70:	003d0d06 	br	20a8 <___vfprintf_internal_r+0xa38>
    2c74:	00800074 	movhi	r2,1
    2c78:	10b5bd04 	addi	r2,r2,-10508
    2c7c:	94800044 	addi	r18,r18,1
    2c80:	8c400044 	addi	r17,r17,1
    2c84:	a8800015 	stw	r2,0(r21)
    2c88:	00c00044 	movi	r3,1
    2c8c:	008001c4 	movi	r2,7
    2c90:	a8c00115 	stw	r3,4(r21)
    2c94:	dc800e15 	stw	r18,56(sp)
    2c98:	dc400d15 	stw	r17,52(sp)
    2c9c:	1440ca16 	blt	r2,r17,2fc8 <___vfprintf_internal_r+0x1958>
    2ca0:	a8c00204 	addi	r3,r21,8
    2ca4:	2000061e 	bne	r4,zero,2cc0 <___vfprintf_internal_r+0x1650>
    2ca8:	d9414717 	ldw	r5,1308(sp)
    2cac:	2800041e 	bne	r5,zero,2cc0 <___vfprintf_internal_r+0x1650>
    2cb0:	d9814c17 	ldw	r6,1328(sp)
    2cb4:	3080004c 	andi	r2,r6,1
    2cb8:	1005003a 	cmpeq	r2,r2,zero
    2cbc:	103bea1e 	bne	r2,zero,1c68 <___vfprintf_internal_r+0x5f8>
    2cc0:	00800044 	movi	r2,1
    2cc4:	dc400d17 	ldw	r17,52(sp)
    2cc8:	18800115 	stw	r2,4(r3)
    2ccc:	d8814917 	ldw	r2,1316(sp)
    2cd0:	94800044 	addi	r18,r18,1
    2cd4:	8c400044 	addi	r17,r17,1
    2cd8:	18800015 	stw	r2,0(r3)
    2cdc:	008001c4 	movi	r2,7
    2ce0:	dc800e15 	stw	r18,56(sp)
    2ce4:	dc400d15 	stw	r17,52(sp)
    2ce8:	1440ca16 	blt	r2,r17,3014 <___vfprintf_internal_r+0x19a4>
    2cec:	18c00204 	addi	r3,r3,8
    2cf0:	0121c83a 	sub	r16,zero,r4
    2cf4:	0400500e 	bge	zero,r16,2e38 <___vfprintf_internal_r+0x17c8>
    2cf8:	00800404 	movi	r2,16
    2cfc:	1400800e 	bge	r2,r16,2f00 <___vfprintf_internal_r+0x1890>
    2d00:	1027883a 	mov	r19,r2
    2d04:	07000074 	movhi	fp,1
    2d08:	e735bd84 	addi	fp,fp,-10506
    2d0c:	050001c4 	movi	r20,7
    2d10:	00000306 	br	2d20 <___vfprintf_internal_r+0x16b0>
    2d14:	18c00204 	addi	r3,r3,8
    2d18:	843ffc04 	addi	r16,r16,-16
    2d1c:	9c007a0e 	bge	r19,r16,2f08 <___vfprintf_internal_r+0x1898>
    2d20:	94800404 	addi	r18,r18,16
    2d24:	8c400044 	addi	r17,r17,1
    2d28:	1f000015 	stw	fp,0(r3)
    2d2c:	1cc00115 	stw	r19,4(r3)
    2d30:	dc800e15 	stw	r18,56(sp)
    2d34:	dc400d15 	stw	r17,52(sp)
    2d38:	a47ff60e 	bge	r20,r17,2d14 <___vfprintf_internal_r+0x16a4>
    2d3c:	d9014f17 	ldw	r4,1340(sp)
    2d40:	b00b883a 	mov	r5,r22
    2d44:	d9800c04 	addi	r6,sp,48
    2d48:	00016180 	call	1618 <__sprint_r>
    2d4c:	103c001e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    2d50:	dc800e17 	ldw	r18,56(sp)
    2d54:	dc400d17 	ldw	r17,52(sp)
    2d58:	d8c01904 	addi	r3,sp,100
    2d5c:	003fee06 	br	2d18 <___vfprintf_internal_r+0x16a8>
    2d60:	3c000017 	ldw	r16,0(r7)
    2d64:	0023883a 	mov	r17,zero
    2d68:	39c00104 	addi	r7,r7,4
    2d6c:	d9c14015 	stw	r7,1280(sp)
    2d70:	003e8c06 	br	27a4 <___vfprintf_internal_r+0x1134>
    2d74:	d9401904 	addi	r5,sp,100
    2d78:	dd000f04 	addi	r20,sp,60
    2d7c:	d9414115 	stw	r5,1284(sp)
    2d80:	d9814417 	ldw	r6,1296(sp)
    2d84:	880a973a 	slli	r5,r17,28
    2d88:	8004d13a 	srli	r2,r16,4
    2d8c:	810003cc 	andi	r4,r16,15
    2d90:	3109883a 	add	r4,r6,r4
    2d94:	2884b03a 	or	r2,r5,r2
    2d98:	21400003 	ldbu	r5,0(r4)
    2d9c:	d9014117 	ldw	r4,1284(sp)
    2da0:	8806d13a 	srli	r3,r17,4
    2da4:	1021883a 	mov	r16,r2
    2da8:	213fffc4 	addi	r4,r4,-1
    2dac:	d9014115 	stw	r4,1284(sp)
    2db0:	d9814117 	ldw	r6,1284(sp)
    2db4:	10c8b03a 	or	r4,r2,r3
    2db8:	1823883a 	mov	r17,r3
    2dbc:	31400005 	stb	r5,0(r6)
    2dc0:	203fef1e 	bne	r4,zero,2d80 <___vfprintf_internal_r+0x1710>
    2dc4:	003cc506 	br	20dc <___vfprintf_internal_r+0xa6c>
    2dc8:	00800c04 	movi	r2,48
    2dcc:	d98018c4 	addi	r6,sp,99
    2dd0:	dd000f04 	addi	r20,sp,60
    2dd4:	d88018c5 	stb	r2,99(sp)
    2dd8:	d9814115 	stw	r6,1284(sp)
    2ddc:	003cbf06 	br	20dc <___vfprintf_internal_r+0xa6c>
    2de0:	dc400d17 	ldw	r17,52(sp)
    2de4:	07000074 	movhi	fp,1
    2de8:	e735c184 	addi	fp,fp,-10490
    2dec:	003bc106 	br	1cf4 <___vfprintf_internal_r+0x684>
    2df0:	d9414c17 	ldw	r5,1328(sp)
    2df4:	2880040c 	andi	r2,r5,16
    2df8:	10007c26 	beq	r2,zero,2fec <___vfprintf_internal_r+0x197c>
    2dfc:	38800017 	ldw	r2,0(r7)
    2e00:	39c00104 	addi	r7,r7,4
    2e04:	d9c14015 	stw	r7,1280(sp)
    2e08:	d9814b17 	ldw	r6,1324(sp)
    2e0c:	d9c14017 	ldw	r7,1280(sp)
    2e10:	11800015 	stw	r6,0(r2)
    2e14:	003a7206 	br	17e0 <___vfprintf_internal_r+0x170>
    2e18:	d9014f17 	ldw	r4,1340(sp)
    2e1c:	b00b883a 	mov	r5,r22
    2e20:	d9800c04 	addi	r6,sp,48
    2e24:	00016180 	call	1618 <__sprint_r>
    2e28:	103bc91e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    2e2c:	dc800e17 	ldw	r18,56(sp)
    2e30:	dc400d17 	ldw	r17,52(sp)
    2e34:	d8c01904 	addi	r3,sp,100
    2e38:	d9014717 	ldw	r4,1308(sp)
    2e3c:	d9414117 	ldw	r5,1284(sp)
    2e40:	8c400044 	addi	r17,r17,1
    2e44:	9125883a 	add	r18,r18,r4
    2e48:	008001c4 	movi	r2,7
    2e4c:	19400015 	stw	r5,0(r3)
    2e50:	19000115 	stw	r4,4(r3)
    2e54:	dc800e15 	stw	r18,56(sp)
    2e58:	dc400d15 	stw	r17,52(sp)
    2e5c:	147ce816 	blt	r2,r17,2200 <___vfprintf_internal_r+0xb90>
    2e60:	18c00204 	addi	r3,r3,8
    2e64:	003b8006 	br	1c68 <___vfprintf_internal_r+0x5f8>
    2e68:	38c00017 	ldw	r3,0(r7)
    2e6c:	39000204 	addi	r4,r7,8
    2e70:	d9014015 	stw	r4,1280(sp)
    2e74:	d8c14215 	stw	r3,1288(sp)
    2e78:	39c00117 	ldw	r7,4(r7)
    2e7c:	d9c14315 	stw	r7,1292(sp)
    2e80:	003e1a06 	br	26ec <___vfprintf_internal_r+0x107c>
    2e84:	0005883a 	mov	r2,zero
    2e88:	1409c83a 	sub	r4,r2,r16
    2e8c:	1105803a 	cmpltu	r2,r2,r4
    2e90:	044bc83a 	sub	r5,zero,r17
    2e94:	2885c83a 	sub	r2,r5,r2
    2e98:	2021883a 	mov	r16,r4
    2e9c:	1023883a 	mov	r17,r2
    2ea0:	01000044 	movi	r4,1
    2ea4:	00800b44 	movi	r2,45
    2ea8:	d8800405 	stb	r2,16(sp)
    2eac:	003c7e06 	br	20a8 <___vfprintf_internal_r+0xa38>
    2eb0:	d9014f17 	ldw	r4,1340(sp)
    2eb4:	b00b883a 	mov	r5,r22
    2eb8:	d9800c04 	addi	r6,sp,48
    2ebc:	00016180 	call	1618 <__sprint_r>
    2ec0:	103ba31e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    2ec4:	dc800e17 	ldw	r18,56(sp)
    2ec8:	dc400d17 	ldw	r17,52(sp)
    2ecc:	d9000517 	ldw	r4,20(sp)
    2ed0:	d9401904 	addi	r5,sp,100
    2ed4:	003da106 	br	255c <___vfprintf_internal_r+0xeec>
    2ed8:	d9014f17 	ldw	r4,1340(sp)
    2edc:	b00b883a 	mov	r5,r22
    2ee0:	d9800c04 	addi	r6,sp,48
    2ee4:	00016180 	call	1618 <__sprint_r>
    2ee8:	103b991e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    2eec:	dc800e17 	ldw	r18,56(sp)
    2ef0:	dc400d17 	ldw	r17,52(sp)
    2ef4:	d9000517 	ldw	r4,20(sp)
    2ef8:	d8c01904 	addi	r3,sp,100
    2efc:	003d8b06 	br	252c <___vfprintf_internal_r+0xebc>
    2f00:	07000074 	movhi	fp,1
    2f04:	e735bd84 	addi	fp,fp,-10506
    2f08:	9425883a 	add	r18,r18,r16
    2f0c:	8c400044 	addi	r17,r17,1
    2f10:	008001c4 	movi	r2,7
    2f14:	1f000015 	stw	fp,0(r3)
    2f18:	1c000115 	stw	r16,4(r3)
    2f1c:	dc800e15 	stw	r18,56(sp)
    2f20:	dc400d15 	stw	r17,52(sp)
    2f24:	147fbc16 	blt	r2,r17,2e18 <___vfprintf_internal_r+0x17a8>
    2f28:	18c00204 	addi	r3,r3,8
    2f2c:	003fc206 	br	2e38 <___vfprintf_internal_r+0x17c8>
    2f30:	d9014f17 	ldw	r4,1340(sp)
    2f34:	b00b883a 	mov	r5,r22
    2f38:	d9800c04 	addi	r6,sp,48
    2f3c:	00016180 	call	1618 <__sprint_r>
    2f40:	103b831e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    2f44:	dc800e17 	ldw	r18,56(sp)
    2f48:	d9000517 	ldw	r4,20(sp)
    2f4c:	d8c01904 	addi	r3,sp,100
    2f50:	003cfc06 	br	2344 <___vfprintf_internal_r+0xcd4>
    2f54:	07000074 	movhi	fp,1
    2f58:	e735bd84 	addi	fp,fp,-10506
    2f5c:	003bde06 	br	1ed8 <___vfprintf_internal_r+0x868>
    2f60:	00800074 	movhi	r2,1
    2f64:	10b5ac04 	addi	r2,r2,-10576
    2f68:	d8814115 	stw	r2,1284(sp)
    2f6c:	003def06 	br	272c <___vfprintf_internal_r+0x10bc>
    2f70:	d9014217 	ldw	r4,1288(sp)
    2f74:	d9414317 	ldw	r5,1292(sp)
    2f78:	0007a200 	call	7a20 <__isnand>
    2f7c:	10003926 	beq	r2,zero,3064 <___vfprintf_internal_r+0x19f4>
    2f80:	d9414d17 	ldw	r5,1332(sp)
    2f84:	008011c4 	movi	r2,71
    2f88:	1140ce16 	blt	r2,r5,32c4 <___vfprintf_internal_r+0x1c54>
    2f8c:	01800074 	movhi	r6,1
    2f90:	31b5ad04 	addi	r6,r6,-10572
    2f94:	d9814115 	stw	r6,1284(sp)
    2f98:	003de406 	br	272c <___vfprintf_internal_r+0x10bc>
    2f9c:	d9014c17 	ldw	r4,1328(sp)
    2fa0:	bdc00044 	addi	r23,r23,1
    2fa4:	b8c00007 	ldb	r3,0(r23)
    2fa8:	21000814 	ori	r4,r4,32
    2fac:	d9014c15 	stw	r4,1328(sp)
    2fb0:	003a2e06 	br	186c <___vfprintf_internal_r+0x1fc>
    2fb4:	dcc14515 	stw	r19,1300(sp)
    2fb8:	98011016 	blt	r19,zero,33fc <___vfprintf_internal_r+0x1d8c>
    2fbc:	980f883a 	mov	r7,r19
    2fc0:	d8014615 	stw	zero,1304(sp)
    2fc4:	003c4c06 	br	20f8 <___vfprintf_internal_r+0xa88>
    2fc8:	d9014f17 	ldw	r4,1340(sp)
    2fcc:	b00b883a 	mov	r5,r22
    2fd0:	d9800c04 	addi	r6,sp,48
    2fd4:	00016180 	call	1618 <__sprint_r>
    2fd8:	103b5d1e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    2fdc:	dc800e17 	ldw	r18,56(sp)
    2fe0:	d9000517 	ldw	r4,20(sp)
    2fe4:	d8c01904 	addi	r3,sp,100
    2fe8:	003f2e06 	br	2ca4 <___vfprintf_internal_r+0x1634>
    2fec:	d8c14c17 	ldw	r3,1328(sp)
    2ff0:	1880100c 	andi	r2,r3,64
    2ff4:	1000a026 	beq	r2,zero,3278 <___vfprintf_internal_r+0x1c08>
    2ff8:	38800017 	ldw	r2,0(r7)
    2ffc:	39c00104 	addi	r7,r7,4
    3000:	d9c14015 	stw	r7,1280(sp)
    3004:	d9014b17 	ldw	r4,1324(sp)
    3008:	d9c14017 	ldw	r7,1280(sp)
    300c:	1100000d 	sth	r4,0(r2)
    3010:	0039f306 	br	17e0 <___vfprintf_internal_r+0x170>
    3014:	d9014f17 	ldw	r4,1340(sp)
    3018:	b00b883a 	mov	r5,r22
    301c:	d9800c04 	addi	r6,sp,48
    3020:	00016180 	call	1618 <__sprint_r>
    3024:	103b4a1e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    3028:	dc800e17 	ldw	r18,56(sp)
    302c:	dc400d17 	ldw	r17,52(sp)
    3030:	d9000517 	ldw	r4,20(sp)
    3034:	d8c01904 	addi	r3,sp,100
    3038:	003f2d06 	br	2cf0 <___vfprintf_internal_r+0x1680>
    303c:	00800184 	movi	r2,6
    3040:	14c09a36 	bltu	r2,r19,32ac <___vfprintf_internal_r+0x1c3c>
    3044:	dcc14515 	stw	r19,1300(sp)
    3048:	9800010e 	bge	r19,zero,3050 <___vfprintf_internal_r+0x19e0>
    304c:	d8014515 	stw	zero,1300(sp)
    3050:	00800074 	movhi	r2,1
    3054:	10b5af04 	addi	r2,r2,-10564
    3058:	980f883a 	mov	r7,r19
    305c:	d8814115 	stw	r2,1284(sp)
    3060:	003a7206 	br	1a2c <___vfprintf_internal_r+0x3bc>
    3064:	00bfffc4 	movi	r2,-1
    3068:	9880e226 	beq	r19,r2,33f4 <___vfprintf_internal_r+0x1d84>
    306c:	d9414d17 	ldw	r5,1332(sp)
    3070:	008019c4 	movi	r2,103
    3074:	2880dc26 	beq	r5,r2,33e8 <___vfprintf_internal_r+0x1d78>
    3078:	008011c4 	movi	r2,71
    307c:	2880da26 	beq	r5,r2,33e8 <___vfprintf_internal_r+0x1d78>
    3080:	d9414c17 	ldw	r5,1328(sp)
    3084:	d9014317 	ldw	r4,1292(sp)
    3088:	d9814217 	ldw	r6,1288(sp)
    308c:	29404014 	ori	r5,r5,256
    3090:	d9414c15 	stw	r5,1328(sp)
    3094:	2000cc16 	blt	r4,zero,33c8 <___vfprintf_internal_r+0x1d58>
    3098:	3021883a 	mov	r16,r6
    309c:	2023883a 	mov	r17,r4
    30a0:	0039883a 	mov	fp,zero
    30a4:	d9414d17 	ldw	r5,1332(sp)
    30a8:	00801984 	movi	r2,102
    30ac:	2880b726 	beq	r5,r2,338c <___vfprintf_internal_r+0x1d1c>
    30b0:	00801184 	movi	r2,70
    30b4:	2880b526 	beq	r5,r2,338c <___vfprintf_internal_r+0x1d1c>
    30b8:	00801944 	movi	r2,101
    30bc:	2880c826 	beq	r5,r2,33e0 <___vfprintf_internal_r+0x1d70>
    30c0:	00801144 	movi	r2,69
    30c4:	2880c626 	beq	r5,r2,33e0 <___vfprintf_internal_r+0x1d70>
    30c8:	9829883a 	mov	r20,r19
    30cc:	d9014f17 	ldw	r4,1340(sp)
    30d0:	d8800504 	addi	r2,sp,20
    30d4:	880d883a 	mov	r6,r17
    30d8:	d8800115 	stw	r2,4(sp)
    30dc:	d8c00604 	addi	r3,sp,24
    30e0:	d8800704 	addi	r2,sp,28
    30e4:	800b883a 	mov	r5,r16
    30e8:	01c00084 	movi	r7,2
    30ec:	d8c00215 	stw	r3,8(sp)
    30f0:	d8800315 	stw	r2,12(sp)
    30f4:	dd000015 	stw	r20,0(sp)
    30f8:	00038d80 	call	38d8 <_dtoa_r>
    30fc:	d9814d17 	ldw	r6,1332(sp)
    3100:	d8814115 	stw	r2,1284(sp)
    3104:	008019c4 	movi	r2,103
    3108:	30809526 	beq	r6,r2,3360 <___vfprintf_internal_r+0x1cf0>
    310c:	d8c14d17 	ldw	r3,1332(sp)
    3110:	008011c4 	movi	r2,71
    3114:	18809226 	beq	r3,r2,3360 <___vfprintf_internal_r+0x1cf0>
    3118:	d9414117 	ldw	r5,1284(sp)
    311c:	d9814d17 	ldw	r6,1332(sp)
    3120:	00801984 	movi	r2,102
    3124:	2d25883a 	add	r18,r5,r20
    3128:	30808626 	beq	r6,r2,3344 <___vfprintf_internal_r+0x1cd4>
    312c:	00801184 	movi	r2,70
    3130:	30808426 	beq	r6,r2,3344 <___vfprintf_internal_r+0x1cd4>
    3134:	000d883a 	mov	r6,zero
    3138:	000f883a 	mov	r7,zero
    313c:	880b883a 	mov	r5,r17
    3140:	8009883a 	mov	r4,r16
    3144:	00098ec0 	call	98ec <__eqdf2>
    3148:	1000751e 	bne	r2,zero,3320 <___vfprintf_internal_r+0x1cb0>
    314c:	9005883a 	mov	r2,r18
    3150:	dc800715 	stw	r18,28(sp)
    3154:	d9014117 	ldw	r4,1284(sp)
    3158:	d9414d17 	ldw	r5,1332(sp)
    315c:	00c019c4 	movi	r3,103
    3160:	1125c83a 	sub	r18,r2,r4
    3164:	28c06826 	beq	r5,r3,3308 <___vfprintf_internal_r+0x1c98>
    3168:	008011c4 	movi	r2,71
    316c:	28806626 	beq	r5,r2,3308 <___vfprintf_internal_r+0x1c98>
    3170:	d9000517 	ldw	r4,20(sp)
    3174:	d8c14d17 	ldw	r3,1332(sp)
    3178:	00801944 	movi	r2,101
    317c:	10c05516 	blt	r2,r3,32d4 <___vfprintf_internal_r+0x1c64>
    3180:	213fffc4 	addi	r4,r4,-1
    3184:	d9000515 	stw	r4,20(sp)
    3188:	d8c00805 	stb	r3,32(sp)
    318c:	2021883a 	mov	r16,r4
    3190:	2000c116 	blt	r4,zero,3498 <___vfprintf_internal_r+0x1e28>
    3194:	00800ac4 	movi	r2,43
    3198:	d8800845 	stb	r2,33(sp)
    319c:	00800244 	movi	r2,9
    31a0:	1400af0e 	bge	r2,r16,3460 <___vfprintf_internal_r+0x1df0>
    31a4:	1027883a 	mov	r19,r2
    31a8:	dc400b84 	addi	r17,sp,46
    31ac:	8009883a 	mov	r4,r16
    31b0:	01400284 	movi	r5,10
    31b4:	0000bf80 	call	bf8 <__modsi3>
    31b8:	10800c04 	addi	r2,r2,48
    31bc:	8c7fffc4 	addi	r17,r17,-1
    31c0:	8009883a 	mov	r4,r16
    31c4:	01400284 	movi	r5,10
    31c8:	88800005 	stb	r2,0(r17)
    31cc:	0000b980 	call	b98 <__divsi3>
    31d0:	1021883a 	mov	r16,r2
    31d4:	98bff516 	blt	r19,r2,31ac <___vfprintf_internal_r+0x1b3c>
    31d8:	10c00c04 	addi	r3,r2,48
    31dc:	d88009c4 	addi	r2,sp,39
    31e0:	108001c4 	addi	r2,r2,7
    31e4:	897fffc4 	addi	r5,r17,-1
    31e8:	88ffffc5 	stb	r3,-1(r17)
    31ec:	2880a72e 	bgeu	r5,r2,348c <___vfprintf_internal_r+0x1e1c>
    31f0:	1009883a 	mov	r4,r2
    31f4:	d9800804 	addi	r6,sp,32
    31f8:	d8c00884 	addi	r3,sp,34
    31fc:	28800003 	ldbu	r2,0(r5)
    3200:	29400044 	addi	r5,r5,1
    3204:	18800005 	stb	r2,0(r3)
    3208:	18c00044 	addi	r3,r3,1
    320c:	293ffb36 	bltu	r5,r4,31fc <___vfprintf_internal_r+0x1b8c>
    3210:	1987c83a 	sub	r3,r3,r6
    3214:	00800044 	movi	r2,1
    3218:	d8c14815 	stw	r3,1312(sp)
    321c:	90cf883a 	add	r7,r18,r3
    3220:	1480960e 	bge	r2,r18,347c <___vfprintf_internal_r+0x1e0c>
    3224:	39c00044 	addi	r7,r7,1
    3228:	d9c14515 	stw	r7,1300(sp)
    322c:	38003416 	blt	r7,zero,3300 <___vfprintf_internal_r+0x1c90>
    3230:	e0803fcc 	andi	r2,fp,255
    3234:	1080201c 	xori	r2,r2,128
    3238:	10bfe004 	addi	r2,r2,-128
    323c:	10004e26 	beq	r2,zero,3378 <___vfprintf_internal_r+0x1d08>
    3240:	00800b44 	movi	r2,45
    3244:	dc814715 	stw	r18,1308(sp)
    3248:	d8014615 	stw	zero,1304(sp)
    324c:	d8800405 	stb	r2,16(sp)
    3250:	003bab06 	br	2100 <___vfprintf_internal_r+0xa90>
    3254:	00800b44 	movi	r2,45
    3258:	d8800405 	stb	r2,16(sp)
    325c:	003d2d06 	br	2714 <___vfprintf_internal_r+0x10a4>
    3260:	d9014f17 	ldw	r4,1340(sp)
    3264:	b00b883a 	mov	r5,r22
    3268:	d9800c04 	addi	r6,sp,48
    326c:	00016180 	call	1618 <__sprint_r>
    3270:	103ab71e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x6e0>
    3274:	003ab506 	br	1d4c <___vfprintf_internal_r+0x6dc>
    3278:	38800017 	ldw	r2,0(r7)
    327c:	39c00104 	addi	r7,r7,4
    3280:	d9c14015 	stw	r7,1280(sp)
    3284:	d9414b17 	ldw	r5,1324(sp)
    3288:	d9c14017 	ldw	r7,1280(sp)
    328c:	11400015 	stw	r5,0(r2)
    3290:	00395306 	br	17e0 <___vfprintf_internal_r+0x170>
    3294:	980f883a 	mov	r7,r19
    3298:	dcc14515 	stw	r19,1300(sp)
    329c:	d8014615 	stw	zero,1304(sp)
    32a0:	003b9506 	br	20f8 <___vfprintf_internal_r+0xa88>
    32a4:	0027883a 	mov	r19,zero
    32a8:	00397206 	br	1874 <___vfprintf_internal_r+0x204>
    32ac:	00c00074 	movhi	r3,1
    32b0:	18f5af04 	addi	r3,r3,-10564
    32b4:	100f883a 	mov	r7,r2
    32b8:	d8814515 	stw	r2,1300(sp)
    32bc:	d8c14115 	stw	r3,1284(sp)
    32c0:	0039da06 	br	1a2c <___vfprintf_internal_r+0x3bc>
    32c4:	00800074 	movhi	r2,1
    32c8:	10b5ae04 	addi	r2,r2,-10568
    32cc:	d8814115 	stw	r2,1284(sp)
    32d0:	003d1606 	br	272c <___vfprintf_internal_r+0x10bc>
    32d4:	d9414d17 	ldw	r5,1332(sp)
    32d8:	00801984 	movi	r2,102
    32dc:	28804926 	beq	r5,r2,3404 <___vfprintf_internal_r+0x1d94>
    32e0:	200f883a 	mov	r7,r4
    32e4:	24805716 	blt	r4,r18,3444 <___vfprintf_internal_r+0x1dd4>
    32e8:	d9414c17 	ldw	r5,1328(sp)
    32ec:	2880004c 	andi	r2,r5,1
    32f0:	10000126 	beq	r2,zero,32f8 <___vfprintf_internal_r+0x1c88>
    32f4:	21c00044 	addi	r7,r4,1
    32f8:	d9c14515 	stw	r7,1300(sp)
    32fc:	383fcc0e 	bge	r7,zero,3230 <___vfprintf_internal_r+0x1bc0>
    3300:	d8014515 	stw	zero,1300(sp)
    3304:	003fca06 	br	3230 <___vfprintf_internal_r+0x1bc0>
    3308:	d9000517 	ldw	r4,20(sp)
    330c:	00bfff04 	movi	r2,-4
    3310:	1100480e 	bge	r2,r4,3434 <___vfprintf_internal_r+0x1dc4>
    3314:	99004716 	blt	r19,r4,3434 <___vfprintf_internal_r+0x1dc4>
    3318:	d8c14d15 	stw	r3,1332(sp)
    331c:	003ff006 	br	32e0 <___vfprintf_internal_r+0x1c70>
    3320:	d8800717 	ldw	r2,28(sp)
    3324:	14bf8b2e 	bgeu	r2,r18,3154 <___vfprintf_internal_r+0x1ae4>
    3328:	9007883a 	mov	r3,r18
    332c:	01000c04 	movi	r4,48
    3330:	11000005 	stb	r4,0(r2)
    3334:	10800044 	addi	r2,r2,1
    3338:	d8800715 	stw	r2,28(sp)
    333c:	18bffc1e 	bne	r3,r2,3330 <___vfprintf_internal_r+0x1cc0>
    3340:	003f8406 	br	3154 <___vfprintf_internal_r+0x1ae4>
    3344:	d8814117 	ldw	r2,1284(sp)
    3348:	10c00007 	ldb	r3,0(r2)
    334c:	00800c04 	movi	r2,48
    3350:	18805b26 	beq	r3,r2,34c0 <___vfprintf_internal_r+0x1e50>
    3354:	d9000517 	ldw	r4,20(sp)
    3358:	9125883a 	add	r18,r18,r4
    335c:	003f7506 	br	3134 <___vfprintf_internal_r+0x1ac4>
    3360:	d9014c17 	ldw	r4,1328(sp)
    3364:	2080004c 	andi	r2,r4,1
    3368:	1005003a 	cmpeq	r2,r2,zero
    336c:	103f6a26 	beq	r2,zero,3118 <___vfprintf_internal_r+0x1aa8>
    3370:	d8800717 	ldw	r2,28(sp)
    3374:	003f7706 	br	3154 <___vfprintf_internal_r+0x1ae4>
    3378:	d9c14515 	stw	r7,1300(sp)
    337c:	38004d16 	blt	r7,zero,34b4 <___vfprintf_internal_r+0x1e44>
    3380:	dc814715 	stw	r18,1308(sp)
    3384:	d8014615 	stw	zero,1304(sp)
    3388:	003b5b06 	br	20f8 <___vfprintf_internal_r+0xa88>
    338c:	d9014f17 	ldw	r4,1340(sp)
    3390:	d8800504 	addi	r2,sp,20
    3394:	d8800115 	stw	r2,4(sp)
    3398:	d8c00604 	addi	r3,sp,24
    339c:	d8800704 	addi	r2,sp,28
    33a0:	800b883a 	mov	r5,r16
    33a4:	880d883a 	mov	r6,r17
    33a8:	01c000c4 	movi	r7,3
    33ac:	d8c00215 	stw	r3,8(sp)
    33b0:	d8800315 	stw	r2,12(sp)
    33b4:	dcc00015 	stw	r19,0(sp)
    33b8:	9829883a 	mov	r20,r19
    33bc:	00038d80 	call	38d8 <_dtoa_r>
    33c0:	d8814115 	stw	r2,1284(sp)
    33c4:	003f5106 	br	310c <___vfprintf_internal_r+0x1a9c>
    33c8:	d8c14217 	ldw	r3,1288(sp)
    33cc:	d9014317 	ldw	r4,1292(sp)
    33d0:	07000b44 	movi	fp,45
    33d4:	1821883a 	mov	r16,r3
    33d8:	2460003c 	xorhi	r17,r4,32768
    33dc:	003f3106 	br	30a4 <___vfprintf_internal_r+0x1a34>
    33e0:	9d000044 	addi	r20,r19,1
    33e4:	003f3906 	br	30cc <___vfprintf_internal_r+0x1a5c>
    33e8:	983f251e 	bne	r19,zero,3080 <___vfprintf_internal_r+0x1a10>
    33ec:	04c00044 	movi	r19,1
    33f0:	003f2306 	br	3080 <___vfprintf_internal_r+0x1a10>
    33f4:	04c00184 	movi	r19,6
    33f8:	003f2106 	br	3080 <___vfprintf_internal_r+0x1a10>
    33fc:	d8014515 	stw	zero,1300(sp)
    3400:	003eee06 	br	2fbc <___vfprintf_internal_r+0x194c>
    3404:	200f883a 	mov	r7,r4
    3408:	0100370e 	bge	zero,r4,34e8 <___vfprintf_internal_r+0x1e78>
    340c:	9800031e 	bne	r19,zero,341c <___vfprintf_internal_r+0x1dac>
    3410:	d9814c17 	ldw	r6,1328(sp)
    3414:	3080004c 	andi	r2,r6,1
    3418:	103fb726 	beq	r2,zero,32f8 <___vfprintf_internal_r+0x1c88>
    341c:	20800044 	addi	r2,r4,1
    3420:	98a7883a 	add	r19,r19,r2
    3424:	dcc14515 	stw	r19,1300(sp)
    3428:	980f883a 	mov	r7,r19
    342c:	983f800e 	bge	r19,zero,3230 <___vfprintf_internal_r+0x1bc0>
    3430:	003fb306 	br	3300 <___vfprintf_internal_r+0x1c90>
    3434:	d9814d17 	ldw	r6,1332(sp)
    3438:	31bfff84 	addi	r6,r6,-2
    343c:	d9814d15 	stw	r6,1332(sp)
    3440:	003f4c06 	br	3174 <___vfprintf_internal_r+0x1b04>
    3444:	0100180e 	bge	zero,r4,34a8 <___vfprintf_internal_r+0x1e38>
    3448:	00800044 	movi	r2,1
    344c:	1485883a 	add	r2,r2,r18
    3450:	d8814515 	stw	r2,1300(sp)
    3454:	100f883a 	mov	r7,r2
    3458:	103f750e 	bge	r2,zero,3230 <___vfprintf_internal_r+0x1bc0>
    345c:	003fa806 	br	3300 <___vfprintf_internal_r+0x1c90>
    3460:	80c00c04 	addi	r3,r16,48
    3464:	00800c04 	movi	r2,48
    3468:	d8c008c5 	stb	r3,35(sp)
    346c:	d9800804 	addi	r6,sp,32
    3470:	d8c00904 	addi	r3,sp,36
    3474:	d8800885 	stb	r2,34(sp)
    3478:	003f6506 	br	3210 <___vfprintf_internal_r+0x1ba0>
    347c:	d9014c17 	ldw	r4,1328(sp)
    3480:	2084703a 	and	r2,r4,r2
    3484:	103f9c26 	beq	r2,zero,32f8 <___vfprintf_internal_r+0x1c88>
    3488:	003f6606 	br	3224 <___vfprintf_internal_r+0x1bb4>
    348c:	d9800804 	addi	r6,sp,32
    3490:	d8c00884 	addi	r3,sp,34
    3494:	003f5e06 	br	3210 <___vfprintf_internal_r+0x1ba0>
    3498:	00800b44 	movi	r2,45
    349c:	0121c83a 	sub	r16,zero,r4
    34a0:	d8800845 	stb	r2,33(sp)
    34a4:	003f3d06 	br	319c <___vfprintf_internal_r+0x1b2c>
    34a8:	00800084 	movi	r2,2
    34ac:	1105c83a 	sub	r2,r2,r4
    34b0:	003fe606 	br	344c <___vfprintf_internal_r+0x1ddc>
    34b4:	d8014515 	stw	zero,1300(sp)
    34b8:	dc814715 	stw	r18,1308(sp)
    34bc:	003fb106 	br	3384 <___vfprintf_internal_r+0x1d14>
    34c0:	000d883a 	mov	r6,zero
    34c4:	000f883a 	mov	r7,zero
    34c8:	8009883a 	mov	r4,r16
    34cc:	880b883a 	mov	r5,r17
    34d0:	00099740 	call	9974 <__nedf2>
    34d4:	103f9f26 	beq	r2,zero,3354 <___vfprintf_internal_r+0x1ce4>
    34d8:	00800044 	movi	r2,1
    34dc:	1509c83a 	sub	r4,r2,r20
    34e0:	d9000515 	stw	r4,20(sp)
    34e4:	003f9b06 	br	3354 <___vfprintf_internal_r+0x1ce4>
    34e8:	98000d1e 	bne	r19,zero,3520 <___vfprintf_internal_r+0x1eb0>
    34ec:	d8c14c17 	ldw	r3,1328(sp)
    34f0:	1880004c 	andi	r2,r3,1
    34f4:	10000a1e 	bne	r2,zero,3520 <___vfprintf_internal_r+0x1eb0>
    34f8:	01000044 	movi	r4,1
    34fc:	200f883a 	mov	r7,r4
    3500:	d9014515 	stw	r4,1300(sp)
    3504:	003f4a06 	br	3230 <___vfprintf_internal_r+0x1bc0>
    3508:	3cc00017 	ldw	r19,0(r7)
    350c:	39c00104 	addi	r7,r7,4
    3510:	983d0e0e 	bge	r19,zero,294c <___vfprintf_internal_r+0x12dc>
    3514:	b8c00007 	ldb	r3,0(r23)
    3518:	04ffffc4 	movi	r19,-1
    351c:	0038d306 	br	186c <___vfprintf_internal_r+0x1fc>
    3520:	9cc00084 	addi	r19,r19,2
    3524:	dcc14515 	stw	r19,1300(sp)
    3528:	980f883a 	mov	r7,r19
    352c:	983f400e 	bge	r19,zero,3230 <___vfprintf_internal_r+0x1bc0>
    3530:	003f7306 	br	3300 <___vfprintf_internal_r+0x1c90>

00003534 <__vfprintf_internal>:
    3534:	00800074 	movhi	r2,1
    3538:	10bcfe04 	addi	r2,r2,-3080
    353c:	2013883a 	mov	r9,r4
    3540:	11000017 	ldw	r4,0(r2)
    3544:	2805883a 	mov	r2,r5
    3548:	300f883a 	mov	r7,r6
    354c:	480b883a 	mov	r5,r9
    3550:	100d883a 	mov	r6,r2
    3554:	00016701 	jmpi	1670 <___vfprintf_internal_r>

00003558 <__swsetup_r>:
    3558:	00800074 	movhi	r2,1
    355c:	10bcfe04 	addi	r2,r2,-3080
    3560:	10c00017 	ldw	r3,0(r2)
    3564:	defffd04 	addi	sp,sp,-12
    3568:	dc400115 	stw	r17,4(sp)
    356c:	dc000015 	stw	r16,0(sp)
    3570:	dfc00215 	stw	ra,8(sp)
    3574:	2023883a 	mov	r17,r4
    3578:	2821883a 	mov	r16,r5
    357c:	18000226 	beq	r3,zero,3588 <__swsetup_r+0x30>
    3580:	18800e17 	ldw	r2,56(r3)
    3584:	10001f26 	beq	r2,zero,3604 <__swsetup_r+0xac>
    3588:	8100030b 	ldhu	r4,12(r16)
    358c:	2080020c 	andi	r2,r4,8
    3590:	10002826 	beq	r2,zero,3634 <__swsetup_r+0xdc>
    3594:	81400417 	ldw	r5,16(r16)
    3598:	28001d26 	beq	r5,zero,3610 <__swsetup_r+0xb8>
    359c:	2080004c 	andi	r2,r4,1
    35a0:	1005003a 	cmpeq	r2,r2,zero
    35a4:	10000b26 	beq	r2,zero,35d4 <__swsetup_r+0x7c>
    35a8:	2080008c 	andi	r2,r4,2
    35ac:	10001226 	beq	r2,zero,35f8 <__swsetup_r+0xa0>
    35b0:	0005883a 	mov	r2,zero
    35b4:	80800215 	stw	r2,8(r16)
    35b8:	28000b26 	beq	r5,zero,35e8 <__swsetup_r+0x90>
    35bc:	0005883a 	mov	r2,zero
    35c0:	dfc00217 	ldw	ra,8(sp)
    35c4:	dc400117 	ldw	r17,4(sp)
    35c8:	dc000017 	ldw	r16,0(sp)
    35cc:	dec00304 	addi	sp,sp,12
    35d0:	f800283a 	ret
    35d4:	80800517 	ldw	r2,20(r16)
    35d8:	80000215 	stw	zero,8(r16)
    35dc:	0085c83a 	sub	r2,zero,r2
    35e0:	80800615 	stw	r2,24(r16)
    35e4:	283ff51e 	bne	r5,zero,35bc <__swsetup_r+0x64>
    35e8:	2080200c 	andi	r2,r4,128
    35ec:	103ff326 	beq	r2,zero,35bc <__swsetup_r+0x64>
    35f0:	00bfffc4 	movi	r2,-1
    35f4:	003ff206 	br	35c0 <__swsetup_r+0x68>
    35f8:	80800517 	ldw	r2,20(r16)
    35fc:	80800215 	stw	r2,8(r16)
    3600:	003fed06 	br	35b8 <__swsetup_r+0x60>
    3604:	1809883a 	mov	r4,r3
    3608:	00051240 	call	5124 <__sinit>
    360c:	003fde06 	br	3588 <__swsetup_r+0x30>
    3610:	20c0a00c 	andi	r3,r4,640
    3614:	00808004 	movi	r2,512
    3618:	18bfe026 	beq	r3,r2,359c <__swsetup_r+0x44>
    361c:	8809883a 	mov	r4,r17
    3620:	800b883a 	mov	r5,r16
    3624:	0005ed00 	call	5ed0 <__smakebuf_r>
    3628:	8100030b 	ldhu	r4,12(r16)
    362c:	81400417 	ldw	r5,16(r16)
    3630:	003fda06 	br	359c <__swsetup_r+0x44>
    3634:	2080040c 	andi	r2,r4,16
    3638:	103fed26 	beq	r2,zero,35f0 <__swsetup_r+0x98>
    363c:	2080010c 	andi	r2,r4,4
    3640:	10001226 	beq	r2,zero,368c <__swsetup_r+0x134>
    3644:	81400c17 	ldw	r5,48(r16)
    3648:	28000526 	beq	r5,zero,3660 <__swsetup_r+0x108>
    364c:	80801004 	addi	r2,r16,64
    3650:	28800226 	beq	r5,r2,365c <__swsetup_r+0x104>
    3654:	8809883a 	mov	r4,r17
    3658:	00054dc0 	call	54dc <_free_r>
    365c:	80000c15 	stw	zero,48(r16)
    3660:	8080030b 	ldhu	r2,12(r16)
    3664:	81400417 	ldw	r5,16(r16)
    3668:	80000115 	stw	zero,4(r16)
    366c:	10bff6cc 	andi	r2,r2,65499
    3670:	8080030d 	sth	r2,12(r16)
    3674:	81400015 	stw	r5,0(r16)
    3678:	8080030b 	ldhu	r2,12(r16)
    367c:	10800214 	ori	r2,r2,8
    3680:	113fffcc 	andi	r4,r2,65535
    3684:	8080030d 	sth	r2,12(r16)
    3688:	003fc306 	br	3598 <__swsetup_r+0x40>
    368c:	81400417 	ldw	r5,16(r16)
    3690:	003ff906 	br	3678 <__swsetup_r+0x120>

00003694 <quorem>:
    3694:	28c00417 	ldw	r3,16(r5)
    3698:	20800417 	ldw	r2,16(r4)
    369c:	defff104 	addi	sp,sp,-60
    36a0:	dfc00e15 	stw	ra,56(sp)
    36a4:	df000d15 	stw	fp,52(sp)
    36a8:	ddc00c15 	stw	r23,48(sp)
    36ac:	dd800b15 	stw	r22,44(sp)
    36b0:	dd400a15 	stw	r21,40(sp)
    36b4:	dd000915 	stw	r20,36(sp)
    36b8:	dcc00815 	stw	r19,32(sp)
    36bc:	dc800715 	stw	r18,28(sp)
    36c0:	dc400615 	stw	r17,24(sp)
    36c4:	dc000515 	stw	r16,20(sp)
    36c8:	d9000315 	stw	r4,12(sp)
    36cc:	d9400415 	stw	r5,16(sp)
    36d0:	10c07f16 	blt	r2,r3,38d0 <quorem+0x23c>
    36d4:	1d3fffc4 	addi	r20,r3,-1
    36d8:	d8c00417 	ldw	r3,16(sp)
    36dc:	d9000317 	ldw	r4,12(sp)
    36e0:	a505883a 	add	r2,r20,r20
    36e4:	1085883a 	add	r2,r2,r2
    36e8:	1cc00504 	addi	r19,r3,20
    36ec:	25c00504 	addi	r23,r4,20
    36f0:	98ad883a 	add	r22,r19,r2
    36f4:	15c7883a 	add	r3,r2,r23
    36f8:	b1400017 	ldw	r5,0(r22)
    36fc:	19000017 	ldw	r4,0(r3)
    3700:	d8c00015 	stw	r3,0(sp)
    3704:	29400044 	addi	r5,r5,1
    3708:	d9000215 	stw	r4,8(sp)
    370c:	0000c580 	call	c58 <__udivsi3>
    3710:	1039883a 	mov	fp,r2
    3714:	10003d1e 	bne	r2,zero,380c <quorem+0x178>
    3718:	d9400417 	ldw	r5,16(sp)
    371c:	d9000317 	ldw	r4,12(sp)
    3720:	00064bc0 	call	64bc <__mcmp>
    3724:	10002c16 	blt	r2,zero,37d8 <quorem+0x144>
    3728:	e7000044 	addi	fp,fp,1
    372c:	b80f883a 	mov	r7,r23
    3730:	0011883a 	mov	r8,zero
    3734:	0009883a 	mov	r4,zero
    3738:	99400017 	ldw	r5,0(r19)
    373c:	38c00017 	ldw	r3,0(r7)
    3740:	9cc00104 	addi	r19,r19,4
    3744:	28bfffcc 	andi	r2,r5,65535
    3748:	2085883a 	add	r2,r4,r2
    374c:	11bfffcc 	andi	r6,r2,65535
    3750:	193fffcc 	andi	r4,r3,65535
    3754:	1004d43a 	srli	r2,r2,16
    3758:	280ad43a 	srli	r5,r5,16
    375c:	2189c83a 	sub	r4,r4,r6
    3760:	2209883a 	add	r4,r4,r8
    3764:	1806d43a 	srli	r3,r3,16
    3768:	288b883a 	add	r5,r5,r2
    376c:	200dd43a 	srai	r6,r4,16
    3770:	28bfffcc 	andi	r2,r5,65535
    3774:	1887c83a 	sub	r3,r3,r2
    3778:	1987883a 	add	r3,r3,r6
    377c:	3900000d 	sth	r4,0(r7)
    3780:	38c0008d 	sth	r3,2(r7)
    3784:	2808d43a 	srli	r4,r5,16
    3788:	39c00104 	addi	r7,r7,4
    378c:	1811d43a 	srai	r8,r3,16
    3790:	b4ffe92e 	bgeu	r22,r19,3738 <quorem+0xa4>
    3794:	a505883a 	add	r2,r20,r20
    3798:	1085883a 	add	r2,r2,r2
    379c:	b885883a 	add	r2,r23,r2
    37a0:	10c00017 	ldw	r3,0(r2)
    37a4:	18000c1e 	bne	r3,zero,37d8 <quorem+0x144>
    37a8:	113fff04 	addi	r4,r2,-4
    37ac:	b900082e 	bgeu	r23,r4,37d0 <quorem+0x13c>
    37b0:	10bfff17 	ldw	r2,-4(r2)
    37b4:	10000326 	beq	r2,zero,37c4 <quorem+0x130>
    37b8:	00000506 	br	37d0 <quorem+0x13c>
    37bc:	20800017 	ldw	r2,0(r4)
    37c0:	1000031e 	bne	r2,zero,37d0 <quorem+0x13c>
    37c4:	213fff04 	addi	r4,r4,-4
    37c8:	a53fffc4 	addi	r20,r20,-1
    37cc:	b93ffb36 	bltu	r23,r4,37bc <quorem+0x128>
    37d0:	d9000317 	ldw	r4,12(sp)
    37d4:	25000415 	stw	r20,16(r4)
    37d8:	e005883a 	mov	r2,fp
    37dc:	dfc00e17 	ldw	ra,56(sp)
    37e0:	df000d17 	ldw	fp,52(sp)
    37e4:	ddc00c17 	ldw	r23,48(sp)
    37e8:	dd800b17 	ldw	r22,44(sp)
    37ec:	dd400a17 	ldw	r21,40(sp)
    37f0:	dd000917 	ldw	r20,36(sp)
    37f4:	dcc00817 	ldw	r19,32(sp)
    37f8:	dc800717 	ldw	r18,28(sp)
    37fc:	dc400617 	ldw	r17,24(sp)
    3800:	dc000517 	ldw	r16,20(sp)
    3804:	dec00f04 	addi	sp,sp,60
    3808:	f800283a 	ret
    380c:	b823883a 	mov	r17,r23
    3810:	9825883a 	mov	r18,r19
    3814:	d8000115 	stw	zero,4(sp)
    3818:	002b883a 	mov	r21,zero
    381c:	94000017 	ldw	r16,0(r18)
    3820:	e009883a 	mov	r4,fp
    3824:	94800104 	addi	r18,r18,4
    3828:	817fffcc 	andi	r5,r16,65535
    382c:	0000c680 	call	c68 <__mulsi3>
    3830:	800ad43a 	srli	r5,r16,16
    3834:	e009883a 	mov	r4,fp
    3838:	a8a1883a 	add	r16,r21,r2
    383c:	0000c680 	call	c68 <__mulsi3>
    3840:	89000017 	ldw	r4,0(r17)
    3844:	80ffffcc 	andi	r3,r16,65535
    3848:	8020d43a 	srli	r16,r16,16
    384c:	217fffcc 	andi	r5,r4,65535
    3850:	28cbc83a 	sub	r5,r5,r3
    3854:	d8c00117 	ldw	r3,4(sp)
    3858:	2008d43a 	srli	r4,r4,16
    385c:	1405883a 	add	r2,r2,r16
    3860:	28cb883a 	add	r5,r5,r3
    3864:	280dd43a 	srai	r6,r5,16
    3868:	10ffffcc 	andi	r3,r2,65535
    386c:	20c9c83a 	sub	r4,r4,r3
    3870:	2189883a 	add	r4,r4,r6
    3874:	8900008d 	sth	r4,2(r17)
    3878:	2009d43a 	srai	r4,r4,16
    387c:	8940000d 	sth	r5,0(r17)
    3880:	102ad43a 	srli	r21,r2,16
    3884:	8c400104 	addi	r17,r17,4
    3888:	d9000115 	stw	r4,4(sp)
    388c:	b4bfe32e 	bgeu	r22,r18,381c <quorem+0x188>
    3890:	d9000217 	ldw	r4,8(sp)
    3894:	203fa01e 	bne	r4,zero,3718 <quorem+0x84>
    3898:	d8800017 	ldw	r2,0(sp)
    389c:	10ffff04 	addi	r3,r2,-4
    38a0:	b8c0082e 	bgeu	r23,r3,38c4 <quorem+0x230>
    38a4:	10bfff17 	ldw	r2,-4(r2)
    38a8:	10000326 	beq	r2,zero,38b8 <quorem+0x224>
    38ac:	00000506 	br	38c4 <quorem+0x230>
    38b0:	18800017 	ldw	r2,0(r3)
    38b4:	1000031e 	bne	r2,zero,38c4 <quorem+0x230>
    38b8:	18ffff04 	addi	r3,r3,-4
    38bc:	a53fffc4 	addi	r20,r20,-1
    38c0:	b8fffb36 	bltu	r23,r3,38b0 <quorem+0x21c>
    38c4:	d8c00317 	ldw	r3,12(sp)
    38c8:	1d000415 	stw	r20,16(r3)
    38cc:	003f9206 	br	3718 <quorem+0x84>
    38d0:	0005883a 	mov	r2,zero
    38d4:	003fc106 	br	37dc <quorem+0x148>

000038d8 <_dtoa_r>:
    38d8:	22001017 	ldw	r8,64(r4)
    38dc:	deffda04 	addi	sp,sp,-152
    38e0:	dd402115 	stw	r21,132(sp)
    38e4:	dd002015 	stw	r20,128(sp)
    38e8:	dc801e15 	stw	r18,120(sp)
    38ec:	dc401d15 	stw	r17,116(sp)
    38f0:	dfc02515 	stw	ra,148(sp)
    38f4:	df002415 	stw	fp,144(sp)
    38f8:	ddc02315 	stw	r23,140(sp)
    38fc:	dd802215 	stw	r22,136(sp)
    3900:	dcc01f15 	stw	r19,124(sp)
    3904:	dc001c15 	stw	r16,112(sp)
    3908:	d9001615 	stw	r4,88(sp)
    390c:	3023883a 	mov	r17,r6
    3910:	2829883a 	mov	r20,r5
    3914:	d9c01715 	stw	r7,92(sp)
    3918:	dc802817 	ldw	r18,160(sp)
    391c:	302b883a 	mov	r21,r6
    3920:	40000a26 	beq	r8,zero,394c <_dtoa_r+0x74>
    3924:	20801117 	ldw	r2,68(r4)
    3928:	400b883a 	mov	r5,r8
    392c:	40800115 	stw	r2,4(r8)
    3930:	20c01117 	ldw	r3,68(r4)
    3934:	00800044 	movi	r2,1
    3938:	10c4983a 	sll	r2,r2,r3
    393c:	40800215 	stw	r2,8(r8)
    3940:	00063600 	call	6360 <_Bfree>
    3944:	d8c01617 	ldw	r3,88(sp)
    3948:	18001015 	stw	zero,64(r3)
    394c:	8800a316 	blt	r17,zero,3bdc <_dtoa_r+0x304>
    3950:	90000015 	stw	zero,0(r18)
    3954:	a8dffc2c 	andhi	r3,r21,32752
    3958:	009ffc34 	movhi	r2,32752
    395c:	18809126 	beq	r3,r2,3ba4 <_dtoa_r+0x2cc>
    3960:	000d883a 	mov	r6,zero
    3964:	000f883a 	mov	r7,zero
    3968:	a009883a 	mov	r4,r20
    396c:	a80b883a 	mov	r5,r21
    3970:	dd001215 	stw	r20,72(sp)
    3974:	dd401315 	stw	r21,76(sp)
    3978:	00099740 	call	9974 <__nedf2>
    397c:	1000171e 	bne	r2,zero,39dc <_dtoa_r+0x104>
    3980:	d9802717 	ldw	r6,156(sp)
    3984:	00800044 	movi	r2,1
    3988:	30800015 	stw	r2,0(r6)
    398c:	d8802917 	ldw	r2,164(sp)
    3990:	10029b26 	beq	r2,zero,4400 <_dtoa_r+0xb28>
    3994:	d9002917 	ldw	r4,164(sp)
    3998:	00800074 	movhi	r2,1
    399c:	10b5bd44 	addi	r2,r2,-10507
    39a0:	10ffffc4 	addi	r3,r2,-1
    39a4:	20800015 	stw	r2,0(r4)
    39a8:	1805883a 	mov	r2,r3
    39ac:	dfc02517 	ldw	ra,148(sp)
    39b0:	df002417 	ldw	fp,144(sp)
    39b4:	ddc02317 	ldw	r23,140(sp)
    39b8:	dd802217 	ldw	r22,136(sp)
    39bc:	dd402117 	ldw	r21,132(sp)
    39c0:	dd002017 	ldw	r20,128(sp)
    39c4:	dcc01f17 	ldw	r19,124(sp)
    39c8:	dc801e17 	ldw	r18,120(sp)
    39cc:	dc401d17 	ldw	r17,116(sp)
    39d0:	dc001c17 	ldw	r16,112(sp)
    39d4:	dec02604 	addi	sp,sp,152
    39d8:	f800283a 	ret
    39dc:	d9001617 	ldw	r4,88(sp)
    39e0:	d9401217 	ldw	r5,72(sp)
    39e4:	d8800104 	addi	r2,sp,4
    39e8:	a80d883a 	mov	r6,r21
    39ec:	d9c00204 	addi	r7,sp,8
    39f0:	d8800015 	stw	r2,0(sp)
    39f4:	000699c0 	call	699c <__d2b>
    39f8:	d8800715 	stw	r2,28(sp)
    39fc:	a804d53a 	srli	r2,r21,20
    3a00:	1101ffcc 	andi	r4,r2,2047
    3a04:	20008626 	beq	r4,zero,3c20 <_dtoa_r+0x348>
    3a08:	d8c01217 	ldw	r3,72(sp)
    3a0c:	00800434 	movhi	r2,16
    3a10:	10bfffc4 	addi	r2,r2,-1
    3a14:	ddc00117 	ldw	r23,4(sp)
    3a18:	a884703a 	and	r2,r21,r2
    3a1c:	1811883a 	mov	r8,r3
    3a20:	124ffc34 	orhi	r9,r2,16368
    3a24:	25bf0044 	addi	r22,r4,-1023
    3a28:	d8000815 	stw	zero,32(sp)
    3a2c:	0005883a 	mov	r2,zero
    3a30:	00cffe34 	movhi	r3,16376
    3a34:	480b883a 	mov	r5,r9
    3a38:	4009883a 	mov	r4,r8
    3a3c:	180f883a 	mov	r7,r3
    3a40:	100d883a 	mov	r6,r2
    3a44:	00091dc0 	call	91dc <__subdf3>
    3a48:	0218dbf4 	movhi	r8,25455
    3a4c:	4210d844 	addi	r8,r8,17249
    3a50:	024ff4f4 	movhi	r9,16339
    3a54:	4a61e9c4 	addi	r9,r9,-30809
    3a58:	480f883a 	mov	r7,r9
    3a5c:	400d883a 	mov	r6,r8
    3a60:	180b883a 	mov	r5,r3
    3a64:	1009883a 	mov	r4,r2
    3a68:	00092d00 	call	92d0 <__muldf3>
    3a6c:	0222d874 	movhi	r8,35681
    3a70:	42322cc4 	addi	r8,r8,-14157
    3a74:	024ff1f4 	movhi	r9,16327
    3a78:	4a628a04 	addi	r9,r9,-30168
    3a7c:	480f883a 	mov	r7,r9
    3a80:	400d883a 	mov	r6,r8
    3a84:	180b883a 	mov	r5,r3
    3a88:	1009883a 	mov	r4,r2
    3a8c:	000925c0 	call	925c <__adddf3>
    3a90:	b009883a 	mov	r4,r22
    3a94:	1021883a 	mov	r16,r2
    3a98:	1823883a 	mov	r17,r3
    3a9c:	0009b940 	call	9b94 <__floatsidf>
    3aa0:	021427f4 	movhi	r8,20639
    3aa4:	421e7ec4 	addi	r8,r8,31227
    3aa8:	024ff4f4 	movhi	r9,16339
    3aac:	4a5104c4 	addi	r9,r9,17427
    3ab0:	480f883a 	mov	r7,r9
    3ab4:	400d883a 	mov	r6,r8
    3ab8:	180b883a 	mov	r5,r3
    3abc:	1009883a 	mov	r4,r2
    3ac0:	00092d00 	call	92d0 <__muldf3>
    3ac4:	180f883a 	mov	r7,r3
    3ac8:	880b883a 	mov	r5,r17
    3acc:	100d883a 	mov	r6,r2
    3ad0:	8009883a 	mov	r4,r16
    3ad4:	000925c0 	call	925c <__adddf3>
    3ad8:	1009883a 	mov	r4,r2
    3adc:	180b883a 	mov	r5,r3
    3ae0:	1021883a 	mov	r16,r2
    3ae4:	1823883a 	mov	r17,r3
    3ae8:	0009c8c0 	call	9c8c <__fixdfsi>
    3aec:	000d883a 	mov	r6,zero
    3af0:	000f883a 	mov	r7,zero
    3af4:	8009883a 	mov	r4,r16
    3af8:	880b883a 	mov	r5,r17
    3afc:	d8800d15 	stw	r2,52(sp)
    3b00:	0009b0c0 	call	9b0c <__ltdf2>
    3b04:	10031716 	blt	r2,zero,4764 <_dtoa_r+0xe8c>
    3b08:	d8c00d17 	ldw	r3,52(sp)
    3b0c:	00800584 	movi	r2,22
    3b10:	10c1482e 	bgeu	r2,r3,4034 <_dtoa_r+0x75c>
    3b14:	01000044 	movi	r4,1
    3b18:	d9000c15 	stw	r4,48(sp)
    3b1c:	bd85c83a 	sub	r2,r23,r22
    3b20:	11bfffc4 	addi	r6,r2,-1
    3b24:	30030b16 	blt	r6,zero,4754 <_dtoa_r+0xe7c>
    3b28:	d9800a15 	stw	r6,40(sp)
    3b2c:	d8001115 	stw	zero,68(sp)
    3b30:	d8c00d17 	ldw	r3,52(sp)
    3b34:	1802ff16 	blt	r3,zero,4734 <_dtoa_r+0xe5c>
    3b38:	d9000a17 	ldw	r4,40(sp)
    3b3c:	d8c00915 	stw	r3,36(sp)
    3b40:	d8001015 	stw	zero,64(sp)
    3b44:	20c9883a 	add	r4,r4,r3
    3b48:	d9000a15 	stw	r4,40(sp)
    3b4c:	d9001717 	ldw	r4,92(sp)
    3b50:	00800244 	movi	r2,9
    3b54:	11004636 	bltu	r2,r4,3c70 <_dtoa_r+0x398>
    3b58:	00800144 	movi	r2,5
    3b5c:	11020416 	blt	r2,r4,4370 <_dtoa_r+0xa98>
    3b60:	04400044 	movi	r17,1
    3b64:	d8c01717 	ldw	r3,92(sp)
    3b68:	00800144 	movi	r2,5
    3b6c:	10c1ed36 	bltu	r2,r3,4324 <_dtoa_r+0xa4c>
    3b70:	18c5883a 	add	r2,r3,r3
    3b74:	1085883a 	add	r2,r2,r2
    3b78:	00c00034 	movhi	r3,0
    3b7c:	18cee304 	addi	r3,r3,15244
    3b80:	10c5883a 	add	r2,r2,r3
    3b84:	11000017 	ldw	r4,0(r2)
    3b88:	2000683a 	jmp	r4
    3b8c:	00003c78 	rdprs	zero,zero,241
    3b90:	00003c78 	rdprs	zero,zero,241
    3b94:	00004678 	rdprs	zero,zero,281
    3b98:	00004650 	cmplti	zero,zero,281
    3b9c:	00004694 	movui	zero,282
    3ba0:	000046a0 	cmpeqi	zero,zero,282
    3ba4:	d9002717 	ldw	r4,156(sp)
    3ba8:	0089c3c4 	movi	r2,9999
    3bac:	20800015 	stw	r2,0(r4)
    3bb0:	a0001026 	beq	r20,zero,3bf4 <_dtoa_r+0x31c>
    3bb4:	00c00074 	movhi	r3,1
    3bb8:	18f5c904 	addi	r3,r3,-10460
    3bbc:	d9802917 	ldw	r6,164(sp)
    3bc0:	303f7926 	beq	r6,zero,39a8 <_dtoa_r+0xd0>
    3bc4:	188000c7 	ldb	r2,3(r3)
    3bc8:	190000c4 	addi	r4,r3,3
    3bcc:	1000101e 	bne	r2,zero,3c10 <_dtoa_r+0x338>
    3bd0:	d8802917 	ldw	r2,164(sp)
    3bd4:	11000015 	stw	r4,0(r2)
    3bd8:	003f7306 	br	39a8 <_dtoa_r+0xd0>
    3bdc:	00a00034 	movhi	r2,32768
    3be0:	10bfffc4 	addi	r2,r2,-1
    3be4:	00c00044 	movi	r3,1
    3be8:	88aa703a 	and	r21,r17,r2
    3bec:	90c00015 	stw	r3,0(r18)
    3bf0:	003f5806 	br	3954 <_dtoa_r+0x7c>
    3bf4:	00800434 	movhi	r2,16
    3bf8:	10bfffc4 	addi	r2,r2,-1
    3bfc:	a884703a 	and	r2,r21,r2
    3c00:	103fec1e 	bne	r2,zero,3bb4 <_dtoa_r+0x2dc>
    3c04:	00c00074 	movhi	r3,1
    3c08:	18f5c604 	addi	r3,r3,-10472
    3c0c:	003feb06 	br	3bbc <_dtoa_r+0x2e4>
    3c10:	d8802917 	ldw	r2,164(sp)
    3c14:	19000204 	addi	r4,r3,8
    3c18:	11000015 	stw	r4,0(r2)
    3c1c:	003f6206 	br	39a8 <_dtoa_r+0xd0>
    3c20:	ddc00117 	ldw	r23,4(sp)
    3c24:	d8800217 	ldw	r2,8(sp)
    3c28:	01000804 	movi	r4,32
    3c2c:	b8c10c84 	addi	r3,r23,1074
    3c30:	18a3883a 	add	r17,r3,r2
    3c34:	2441b80e 	bge	r4,r17,4318 <_dtoa_r+0xa40>
    3c38:	00c01004 	movi	r3,64
    3c3c:	1c47c83a 	sub	r3,r3,r17
    3c40:	88bff804 	addi	r2,r17,-32
    3c44:	a8c6983a 	sll	r3,r21,r3
    3c48:	a084d83a 	srl	r2,r20,r2
    3c4c:	1888b03a 	or	r4,r3,r2
    3c50:	0009d640 	call	9d64 <__floatunsidf>
    3c54:	1011883a 	mov	r8,r2
    3c58:	00bf8434 	movhi	r2,65040
    3c5c:	01000044 	movi	r4,1
    3c60:	10d3883a 	add	r9,r2,r3
    3c64:	8dbef344 	addi	r22,r17,-1075
    3c68:	d9000815 	stw	r4,32(sp)
    3c6c:	003f6f06 	br	3a2c <_dtoa_r+0x154>
    3c70:	d8001715 	stw	zero,92(sp)
    3c74:	04400044 	movi	r17,1
    3c78:	00bfffc4 	movi	r2,-1
    3c7c:	00c00044 	movi	r3,1
    3c80:	d8800e15 	stw	r2,56(sp)
    3c84:	d8002615 	stw	zero,152(sp)
    3c88:	d8800f15 	stw	r2,60(sp)
    3c8c:	d8c00b15 	stw	r3,44(sp)
    3c90:	1021883a 	mov	r16,r2
    3c94:	d8801617 	ldw	r2,88(sp)
    3c98:	10001115 	stw	zero,68(r2)
    3c9c:	d8801617 	ldw	r2,88(sp)
    3ca0:	11401117 	ldw	r5,68(r2)
    3ca4:	1009883a 	mov	r4,r2
    3ca8:	00068e00 	call	68e0 <_Balloc>
    3cac:	d8c01617 	ldw	r3,88(sp)
    3cb0:	d8800515 	stw	r2,20(sp)
    3cb4:	18801015 	stw	r2,64(r3)
    3cb8:	00800384 	movi	r2,14
    3cbc:	14006836 	bltu	r2,r16,3e60 <_dtoa_r+0x588>
    3cc0:	8805003a 	cmpeq	r2,r17,zero
    3cc4:	1000661e 	bne	r2,zero,3e60 <_dtoa_r+0x588>
    3cc8:	d9000d17 	ldw	r4,52(sp)
    3ccc:	0102300e 	bge	zero,r4,4590 <_dtoa_r+0xcb8>
    3cd0:	208003cc 	andi	r2,r4,15
    3cd4:	100490fa 	slli	r2,r2,3
    3cd8:	2025d13a 	srai	r18,r4,4
    3cdc:	00c00074 	movhi	r3,1
    3ce0:	18f5db04 	addi	r3,r3,-10388
    3ce4:	10c5883a 	add	r2,r2,r3
    3ce8:	90c0040c 	andi	r3,r18,16
    3cec:	14000017 	ldw	r16,0(r2)
    3cf0:	14400117 	ldw	r17,4(r2)
    3cf4:	18036a1e 	bne	r3,zero,4aa0 <_dtoa_r+0x11c8>
    3cf8:	05800084 	movi	r22,2
    3cfc:	90001026 	beq	r18,zero,3d40 <_dtoa_r+0x468>
    3d00:	04c00074 	movhi	r19,1
    3d04:	9cf60d04 	addi	r19,r19,-10188
    3d08:	9080004c 	andi	r2,r18,1
    3d0c:	1005003a 	cmpeq	r2,r2,zero
    3d10:	1000081e 	bne	r2,zero,3d34 <_dtoa_r+0x45c>
    3d14:	99800017 	ldw	r6,0(r19)
    3d18:	99c00117 	ldw	r7,4(r19)
    3d1c:	880b883a 	mov	r5,r17
    3d20:	8009883a 	mov	r4,r16
    3d24:	00092d00 	call	92d0 <__muldf3>
    3d28:	1021883a 	mov	r16,r2
    3d2c:	b5800044 	addi	r22,r22,1
    3d30:	1823883a 	mov	r17,r3
    3d34:	9025d07a 	srai	r18,r18,1
    3d38:	9cc00204 	addi	r19,r19,8
    3d3c:	903ff21e 	bne	r18,zero,3d08 <_dtoa_r+0x430>
    3d40:	a80b883a 	mov	r5,r21
    3d44:	a009883a 	mov	r4,r20
    3d48:	880f883a 	mov	r7,r17
    3d4c:	800d883a 	mov	r6,r16
    3d50:	00096940 	call	9694 <__divdf3>
    3d54:	1029883a 	mov	r20,r2
    3d58:	182b883a 	mov	r21,r3
    3d5c:	d8c00c17 	ldw	r3,48(sp)
    3d60:	1805003a 	cmpeq	r2,r3,zero
    3d64:	1000081e 	bne	r2,zero,3d88 <_dtoa_r+0x4b0>
    3d68:	0005883a 	mov	r2,zero
    3d6c:	00cffc34 	movhi	r3,16368
    3d70:	180f883a 	mov	r7,r3
    3d74:	a009883a 	mov	r4,r20
    3d78:	a80b883a 	mov	r5,r21
    3d7c:	100d883a 	mov	r6,r2
    3d80:	0009b0c0 	call	9b0c <__ltdf2>
    3d84:	1003fe16 	blt	r2,zero,4d80 <_dtoa_r+0x14a8>
    3d88:	b009883a 	mov	r4,r22
    3d8c:	0009b940 	call	9b94 <__floatsidf>
    3d90:	180b883a 	mov	r5,r3
    3d94:	1009883a 	mov	r4,r2
    3d98:	a00d883a 	mov	r6,r20
    3d9c:	a80f883a 	mov	r7,r21
    3da0:	00092d00 	call	92d0 <__muldf3>
    3da4:	0011883a 	mov	r8,zero
    3da8:	02500734 	movhi	r9,16412
    3dac:	1009883a 	mov	r4,r2
    3db0:	180b883a 	mov	r5,r3
    3db4:	480f883a 	mov	r7,r9
    3db8:	400d883a 	mov	r6,r8
    3dbc:	000925c0 	call	925c <__adddf3>
    3dc0:	d9000f17 	ldw	r4,60(sp)
    3dc4:	102d883a 	mov	r22,r2
    3dc8:	00bf3034 	movhi	r2,64704
    3dcc:	18b9883a 	add	fp,r3,r2
    3dd0:	e02f883a 	mov	r23,fp
    3dd4:	20028f1e 	bne	r4,zero,4814 <_dtoa_r+0xf3c>
    3dd8:	0005883a 	mov	r2,zero
    3ddc:	00d00534 	movhi	r3,16404
    3de0:	a009883a 	mov	r4,r20
    3de4:	a80b883a 	mov	r5,r21
    3de8:	180f883a 	mov	r7,r3
    3dec:	100d883a 	mov	r6,r2
    3df0:	00091dc0 	call	91dc <__subdf3>
    3df4:	1009883a 	mov	r4,r2
    3df8:	e00f883a 	mov	r7,fp
    3dfc:	180b883a 	mov	r5,r3
    3e00:	b00d883a 	mov	r6,r22
    3e04:	1025883a 	mov	r18,r2
    3e08:	1827883a 	mov	r19,r3
    3e0c:	00099fc0 	call	99fc <__gtdf2>
    3e10:	00834f16 	blt	zero,r2,4b50 <_dtoa_r+0x1278>
    3e14:	e0e0003c 	xorhi	r3,fp,32768
    3e18:	9009883a 	mov	r4,r18
    3e1c:	980b883a 	mov	r5,r19
    3e20:	180f883a 	mov	r7,r3
    3e24:	b00d883a 	mov	r6,r22
    3e28:	0009b0c0 	call	9b0c <__ltdf2>
    3e2c:	1000080e 	bge	r2,zero,3e50 <_dtoa_r+0x578>
    3e30:	0027883a 	mov	r19,zero
    3e34:	0025883a 	mov	r18,zero
    3e38:	d8802617 	ldw	r2,152(sp)
    3e3c:	df000517 	ldw	fp,20(sp)
    3e40:	d8000615 	stw	zero,24(sp)
    3e44:	0084303a 	nor	r2,zero,r2
    3e48:	d8800d15 	stw	r2,52(sp)
    3e4c:	00019b06 	br	44bc <_dtoa_r+0xbe4>
    3e50:	d9801217 	ldw	r6,72(sp)
    3e54:	d8801317 	ldw	r2,76(sp)
    3e58:	3029883a 	mov	r20,r6
    3e5c:	102b883a 	mov	r21,r2
    3e60:	d8c00217 	ldw	r3,8(sp)
    3e64:	18008516 	blt	r3,zero,407c <_dtoa_r+0x7a4>
    3e68:	d9000d17 	ldw	r4,52(sp)
    3e6c:	00800384 	movi	r2,14
    3e70:	11008216 	blt	r2,r4,407c <_dtoa_r+0x7a4>
    3e74:	200490fa 	slli	r2,r4,3
    3e78:	d9802617 	ldw	r6,152(sp)
    3e7c:	00c00074 	movhi	r3,1
    3e80:	18f5db04 	addi	r3,r3,-10388
    3e84:	10c5883a 	add	r2,r2,r3
    3e88:	14800017 	ldw	r18,0(r2)
    3e8c:	14c00117 	ldw	r19,4(r2)
    3e90:	30031e16 	blt	r6,zero,4b0c <_dtoa_r+0x1234>
    3e94:	d9000517 	ldw	r4,20(sp)
    3e98:	d8c00f17 	ldw	r3,60(sp)
    3e9c:	a823883a 	mov	r17,r21
    3ea0:	a021883a 	mov	r16,r20
    3ea4:	192b883a 	add	r21,r3,r4
    3ea8:	2039883a 	mov	fp,r4
    3eac:	00000f06 	br	3eec <_dtoa_r+0x614>
    3eb0:	0005883a 	mov	r2,zero
    3eb4:	00d00934 	movhi	r3,16420
    3eb8:	5009883a 	mov	r4,r10
    3ebc:	580b883a 	mov	r5,r11
    3ec0:	180f883a 	mov	r7,r3
    3ec4:	100d883a 	mov	r6,r2
    3ec8:	00092d00 	call	92d0 <__muldf3>
    3ecc:	180b883a 	mov	r5,r3
    3ed0:	000d883a 	mov	r6,zero
    3ed4:	000f883a 	mov	r7,zero
    3ed8:	1009883a 	mov	r4,r2
    3edc:	1021883a 	mov	r16,r2
    3ee0:	1823883a 	mov	r17,r3
    3ee4:	00099740 	call	9974 <__nedf2>
    3ee8:	10004526 	beq	r2,zero,4000 <_dtoa_r+0x728>
    3eec:	900d883a 	mov	r6,r18
    3ef0:	980f883a 	mov	r7,r19
    3ef4:	8009883a 	mov	r4,r16
    3ef8:	880b883a 	mov	r5,r17
    3efc:	00096940 	call	9694 <__divdf3>
    3f00:	180b883a 	mov	r5,r3
    3f04:	1009883a 	mov	r4,r2
    3f08:	0009c8c0 	call	9c8c <__fixdfsi>
    3f0c:	1009883a 	mov	r4,r2
    3f10:	1029883a 	mov	r20,r2
    3f14:	0009b940 	call	9b94 <__floatsidf>
    3f18:	180f883a 	mov	r7,r3
    3f1c:	9009883a 	mov	r4,r18
    3f20:	980b883a 	mov	r5,r19
    3f24:	100d883a 	mov	r6,r2
    3f28:	00092d00 	call	92d0 <__muldf3>
    3f2c:	180f883a 	mov	r7,r3
    3f30:	880b883a 	mov	r5,r17
    3f34:	8009883a 	mov	r4,r16
    3f38:	100d883a 	mov	r6,r2
    3f3c:	00091dc0 	call	91dc <__subdf3>
    3f40:	1015883a 	mov	r10,r2
    3f44:	a0800c04 	addi	r2,r20,48
    3f48:	e0800005 	stb	r2,0(fp)
    3f4c:	e7000044 	addi	fp,fp,1
    3f50:	1817883a 	mov	r11,r3
    3f54:	e57fd61e 	bne	fp,r21,3eb0 <_dtoa_r+0x5d8>
    3f58:	500d883a 	mov	r6,r10
    3f5c:	180f883a 	mov	r7,r3
    3f60:	5009883a 	mov	r4,r10
    3f64:	180b883a 	mov	r5,r3
    3f68:	000925c0 	call	925c <__adddf3>
    3f6c:	100d883a 	mov	r6,r2
    3f70:	9009883a 	mov	r4,r18
    3f74:	980b883a 	mov	r5,r19
    3f78:	180f883a 	mov	r7,r3
    3f7c:	1021883a 	mov	r16,r2
    3f80:	1823883a 	mov	r17,r3
    3f84:	0009b0c0 	call	9b0c <__ltdf2>
    3f88:	10000816 	blt	r2,zero,3fac <_dtoa_r+0x6d4>
    3f8c:	980b883a 	mov	r5,r19
    3f90:	800d883a 	mov	r6,r16
    3f94:	880f883a 	mov	r7,r17
    3f98:	9009883a 	mov	r4,r18
    3f9c:	00098ec0 	call	98ec <__eqdf2>
    3fa0:	1000171e 	bne	r2,zero,4000 <_dtoa_r+0x728>
    3fa4:	a080004c 	andi	r2,r20,1
    3fa8:	10001526 	beq	r2,zero,4000 <_dtoa_r+0x728>
    3fac:	d8800d17 	ldw	r2,52(sp)
    3fb0:	d8800415 	stw	r2,16(sp)
    3fb4:	e009883a 	mov	r4,fp
    3fb8:	213fffc4 	addi	r4,r4,-1
    3fbc:	20c00007 	ldb	r3,0(r4)
    3fc0:	00800e44 	movi	r2,57
    3fc4:	1880081e 	bne	r3,r2,3fe8 <_dtoa_r+0x710>
    3fc8:	d8800517 	ldw	r2,20(sp)
    3fcc:	113ffa1e 	bne	r2,r4,3fb8 <_dtoa_r+0x6e0>
    3fd0:	d8c00417 	ldw	r3,16(sp)
    3fd4:	d9800517 	ldw	r6,20(sp)
    3fd8:	00800c04 	movi	r2,48
    3fdc:	18c00044 	addi	r3,r3,1
    3fe0:	d8c00415 	stw	r3,16(sp)
    3fe4:	30800005 	stb	r2,0(r6)
    3fe8:	20800003 	ldbu	r2,0(r4)
    3fec:	d8c00417 	ldw	r3,16(sp)
    3ff0:	27000044 	addi	fp,r4,1
    3ff4:	10800044 	addi	r2,r2,1
    3ff8:	d8c00d15 	stw	r3,52(sp)
    3ffc:	20800005 	stb	r2,0(r4)
    4000:	d9001617 	ldw	r4,88(sp)
    4004:	d9400717 	ldw	r5,28(sp)
    4008:	00063600 	call	6360 <_Bfree>
    400c:	e0000005 	stb	zero,0(fp)
    4010:	d9800d17 	ldw	r6,52(sp)
    4014:	d8c02717 	ldw	r3,156(sp)
    4018:	d9002917 	ldw	r4,164(sp)
    401c:	30800044 	addi	r2,r6,1
    4020:	18800015 	stw	r2,0(r3)
    4024:	20029c26 	beq	r4,zero,4a98 <_dtoa_r+0x11c0>
    4028:	d8c00517 	ldw	r3,20(sp)
    402c:	27000015 	stw	fp,0(r4)
    4030:	003e5d06 	br	39a8 <_dtoa_r+0xd0>
    4034:	d9800d17 	ldw	r6,52(sp)
    4038:	00c00074 	movhi	r3,1
    403c:	18f5db04 	addi	r3,r3,-10388
    4040:	d9001217 	ldw	r4,72(sp)
    4044:	300490fa 	slli	r2,r6,3
    4048:	d9401317 	ldw	r5,76(sp)
    404c:	10c5883a 	add	r2,r2,r3
    4050:	12000017 	ldw	r8,0(r2)
    4054:	12400117 	ldw	r9,4(r2)
    4058:	400d883a 	mov	r6,r8
    405c:	480f883a 	mov	r7,r9
    4060:	0009b0c0 	call	9b0c <__ltdf2>
    4064:	1000030e 	bge	r2,zero,4074 <_dtoa_r+0x79c>
    4068:	d8800d17 	ldw	r2,52(sp)
    406c:	10bfffc4 	addi	r2,r2,-1
    4070:	d8800d15 	stw	r2,52(sp)
    4074:	d8000c15 	stw	zero,48(sp)
    4078:	003ea806 	br	3b1c <_dtoa_r+0x244>
    407c:	d9000b17 	ldw	r4,44(sp)
    4080:	202cc03a 	cmpne	r22,r4,zero
    4084:	b000c71e 	bne	r22,zero,43a4 <_dtoa_r+0xacc>
    4088:	dc001117 	ldw	r16,68(sp)
    408c:	dc801017 	ldw	r18,64(sp)
    4090:	0027883a 	mov	r19,zero
    4094:	04000b0e 	bge	zero,r16,40c4 <_dtoa_r+0x7ec>
    4098:	d8c00a17 	ldw	r3,40(sp)
    409c:	00c0090e 	bge	zero,r3,40c4 <_dtoa_r+0x7ec>
    40a0:	8005883a 	mov	r2,r16
    40a4:	1c011316 	blt	r3,r16,44f4 <_dtoa_r+0xc1c>
    40a8:	d9000a17 	ldw	r4,40(sp)
    40ac:	d9801117 	ldw	r6,68(sp)
    40b0:	80a1c83a 	sub	r16,r16,r2
    40b4:	2089c83a 	sub	r4,r4,r2
    40b8:	308dc83a 	sub	r6,r6,r2
    40bc:	d9000a15 	stw	r4,40(sp)
    40c0:	d9801115 	stw	r6,68(sp)
    40c4:	d8801017 	ldw	r2,64(sp)
    40c8:	0080150e 	bge	zero,r2,4120 <_dtoa_r+0x848>
    40cc:	d8c00b17 	ldw	r3,44(sp)
    40d0:	1805003a 	cmpeq	r2,r3,zero
    40d4:	1001c91e 	bne	r2,zero,47fc <_dtoa_r+0xf24>
    40d8:	04800e0e 	bge	zero,r18,4114 <_dtoa_r+0x83c>
    40dc:	d9001617 	ldw	r4,88(sp)
    40e0:	980b883a 	mov	r5,r19
    40e4:	900d883a 	mov	r6,r18
    40e8:	00071ac0 	call	71ac <__pow5mult>
    40ec:	d9001617 	ldw	r4,88(sp)
    40f0:	d9800717 	ldw	r6,28(sp)
    40f4:	100b883a 	mov	r5,r2
    40f8:	1027883a 	mov	r19,r2
    40fc:	0006df00 	call	6df0 <__multiply>
    4100:	d9001617 	ldw	r4,88(sp)
    4104:	d9400717 	ldw	r5,28(sp)
    4108:	1023883a 	mov	r17,r2
    410c:	00063600 	call	6360 <_Bfree>
    4110:	dc400715 	stw	r17,28(sp)
    4114:	d9001017 	ldw	r4,64(sp)
    4118:	248dc83a 	sub	r6,r4,r18
    411c:	30010e1e 	bne	r6,zero,4558 <_dtoa_r+0xc80>
    4120:	d9001617 	ldw	r4,88(sp)
    4124:	04400044 	movi	r17,1
    4128:	880b883a 	mov	r5,r17
    412c:	00070440 	call	7044 <__i2b>
    4130:	d9800917 	ldw	r6,36(sp)
    4134:	1025883a 	mov	r18,r2
    4138:	0180040e 	bge	zero,r6,414c <_dtoa_r+0x874>
    413c:	d9001617 	ldw	r4,88(sp)
    4140:	100b883a 	mov	r5,r2
    4144:	00071ac0 	call	71ac <__pow5mult>
    4148:	1025883a 	mov	r18,r2
    414c:	d8801717 	ldw	r2,92(sp)
    4150:	8880f30e 	bge	r17,r2,4520 <_dtoa_r+0xc48>
    4154:	0023883a 	mov	r17,zero
    4158:	d9800917 	ldw	r6,36(sp)
    415c:	30019e1e 	bne	r6,zero,47d8 <_dtoa_r+0xf00>
    4160:	00c00044 	movi	r3,1
    4164:	d9000a17 	ldw	r4,40(sp)
    4168:	20c5883a 	add	r2,r4,r3
    416c:	10c007cc 	andi	r3,r2,31
    4170:	1800841e 	bne	r3,zero,4384 <_dtoa_r+0xaac>
    4174:	00800704 	movi	r2,28
    4178:	d9000a17 	ldw	r4,40(sp)
    417c:	d9801117 	ldw	r6,68(sp)
    4180:	80a1883a 	add	r16,r16,r2
    4184:	2089883a 	add	r4,r4,r2
    4188:	308d883a 	add	r6,r6,r2
    418c:	d9000a15 	stw	r4,40(sp)
    4190:	d9801115 	stw	r6,68(sp)
    4194:	d8801117 	ldw	r2,68(sp)
    4198:	0080050e 	bge	zero,r2,41b0 <_dtoa_r+0x8d8>
    419c:	d9400717 	ldw	r5,28(sp)
    41a0:	d9001617 	ldw	r4,88(sp)
    41a4:	100d883a 	mov	r6,r2
    41a8:	0006ca40 	call	6ca4 <__lshift>
    41ac:	d8800715 	stw	r2,28(sp)
    41b0:	d8c00a17 	ldw	r3,40(sp)
    41b4:	00c0050e 	bge	zero,r3,41cc <_dtoa_r+0x8f4>
    41b8:	d9001617 	ldw	r4,88(sp)
    41bc:	900b883a 	mov	r5,r18
    41c0:	180d883a 	mov	r6,r3
    41c4:	0006ca40 	call	6ca4 <__lshift>
    41c8:	1025883a 	mov	r18,r2
    41cc:	d9000c17 	ldw	r4,48(sp)
    41d0:	2005003a 	cmpeq	r2,r4,zero
    41d4:	10016f26 	beq	r2,zero,4794 <_dtoa_r+0xebc>
    41d8:	d9000f17 	ldw	r4,60(sp)
    41dc:	0102170e 	bge	zero,r4,4a3c <_dtoa_r+0x1164>
    41e0:	d9800b17 	ldw	r6,44(sp)
    41e4:	3005003a 	cmpeq	r2,r6,zero
    41e8:	1000881e 	bne	r2,zero,440c <_dtoa_r+0xb34>
    41ec:	0400050e 	bge	zero,r16,4204 <_dtoa_r+0x92c>
    41f0:	d9001617 	ldw	r4,88(sp)
    41f4:	980b883a 	mov	r5,r19
    41f8:	800d883a 	mov	r6,r16
    41fc:	0006ca40 	call	6ca4 <__lshift>
    4200:	1027883a 	mov	r19,r2
    4204:	8804c03a 	cmpne	r2,r17,zero
    4208:	1002541e 	bne	r2,zero,4b5c <_dtoa_r+0x1284>
    420c:	980b883a 	mov	r5,r19
    4210:	dd800517 	ldw	r22,20(sp)
    4214:	dcc00615 	stw	r19,24(sp)
    4218:	a700004c 	andi	fp,r20,1
    421c:	2827883a 	mov	r19,r5
    4220:	d9000717 	ldw	r4,28(sp)
    4224:	900b883a 	mov	r5,r18
    4228:	00036940 	call	3694 <quorem>
    422c:	d9000717 	ldw	r4,28(sp)
    4230:	d9400617 	ldw	r5,24(sp)
    4234:	1023883a 	mov	r17,r2
    4238:	8dc00c04 	addi	r23,r17,48
    423c:	00064bc0 	call	64bc <__mcmp>
    4240:	d9001617 	ldw	r4,88(sp)
    4244:	900b883a 	mov	r5,r18
    4248:	980d883a 	mov	r6,r19
    424c:	1029883a 	mov	r20,r2
    4250:	0006b180 	call	6b18 <__mdiff>
    4254:	102b883a 	mov	r21,r2
    4258:	10800317 	ldw	r2,12(r2)
    425c:	1001281e 	bne	r2,zero,4700 <_dtoa_r+0xe28>
    4260:	d9000717 	ldw	r4,28(sp)
    4264:	a80b883a 	mov	r5,r21
    4268:	00064bc0 	call	64bc <__mcmp>
    426c:	d9001617 	ldw	r4,88(sp)
    4270:	1021883a 	mov	r16,r2
    4274:	a80b883a 	mov	r5,r21
    4278:	00063600 	call	6360 <_Bfree>
    427c:	8000041e 	bne	r16,zero,4290 <_dtoa_r+0x9b8>
    4280:	d8801717 	ldw	r2,92(sp)
    4284:	1000021e 	bne	r2,zero,4290 <_dtoa_r+0x9b8>
    4288:	e004c03a 	cmpne	r2,fp,zero
    428c:	10011726 	beq	r2,zero,46ec <_dtoa_r+0xe14>
    4290:	a0010616 	blt	r20,zero,46ac <_dtoa_r+0xdd4>
    4294:	a000041e 	bne	r20,zero,42a8 <_dtoa_r+0x9d0>
    4298:	d8c01717 	ldw	r3,92(sp)
    429c:	1800021e 	bne	r3,zero,42a8 <_dtoa_r+0x9d0>
    42a0:	e004c03a 	cmpne	r2,fp,zero
    42a4:	10010126 	beq	r2,zero,46ac <_dtoa_r+0xdd4>
    42a8:	04023d16 	blt	zero,r16,4ba0 <_dtoa_r+0x12c8>
    42ac:	b5c00005 	stb	r23,0(r22)
    42b0:	d9800517 	ldw	r6,20(sp)
    42b4:	d9000f17 	ldw	r4,60(sp)
    42b8:	b5800044 	addi	r22,r22,1
    42bc:	3105883a 	add	r2,r6,r4
    42c0:	b0806526 	beq	r22,r2,4458 <_dtoa_r+0xb80>
    42c4:	d9400717 	ldw	r5,28(sp)
    42c8:	d9001617 	ldw	r4,88(sp)
    42cc:	01800284 	movi	r6,10
    42d0:	000f883a 	mov	r7,zero
    42d4:	00070800 	call	7080 <__multadd>
    42d8:	d8800715 	stw	r2,28(sp)
    42dc:	d8800617 	ldw	r2,24(sp)
    42e0:	14c10c26 	beq	r2,r19,4714 <_dtoa_r+0xe3c>
    42e4:	d9400617 	ldw	r5,24(sp)
    42e8:	d9001617 	ldw	r4,88(sp)
    42ec:	01800284 	movi	r6,10
    42f0:	000f883a 	mov	r7,zero
    42f4:	00070800 	call	7080 <__multadd>
    42f8:	d9001617 	ldw	r4,88(sp)
    42fc:	980b883a 	mov	r5,r19
    4300:	01800284 	movi	r6,10
    4304:	000f883a 	mov	r7,zero
    4308:	d8800615 	stw	r2,24(sp)
    430c:	00070800 	call	7080 <__multadd>
    4310:	1027883a 	mov	r19,r2
    4314:	003fc206 	br	4220 <_dtoa_r+0x948>
    4318:	2445c83a 	sub	r2,r4,r17
    431c:	a088983a 	sll	r4,r20,r2
    4320:	003e4b06 	br	3c50 <_dtoa_r+0x378>
    4324:	01bfffc4 	movi	r6,-1
    4328:	00800044 	movi	r2,1
    432c:	d9800e15 	stw	r6,56(sp)
    4330:	d9800f15 	stw	r6,60(sp)
    4334:	d8800b15 	stw	r2,44(sp)
    4338:	d8c01617 	ldw	r3,88(sp)
    433c:	008005c4 	movi	r2,23
    4340:	18001115 	stw	zero,68(r3)
    4344:	1580082e 	bgeu	r2,r22,4368 <_dtoa_r+0xa90>
    4348:	00c00104 	movi	r3,4
    434c:	0009883a 	mov	r4,zero
    4350:	18c7883a 	add	r3,r3,r3
    4354:	18800504 	addi	r2,r3,20
    4358:	21000044 	addi	r4,r4,1
    435c:	b0bffc2e 	bgeu	r22,r2,4350 <_dtoa_r+0xa78>
    4360:	d9801617 	ldw	r6,88(sp)
    4364:	31001115 	stw	r4,68(r6)
    4368:	dc000f17 	ldw	r16,60(sp)
    436c:	003e4b06 	br	3c9c <_dtoa_r+0x3c4>
    4370:	d9801717 	ldw	r6,92(sp)
    4374:	0023883a 	mov	r17,zero
    4378:	31bfff04 	addi	r6,r6,-4
    437c:	d9801715 	stw	r6,92(sp)
    4380:	003df806 	br	3b64 <_dtoa_r+0x28c>
    4384:	00800804 	movi	r2,32
    4388:	10c9c83a 	sub	r4,r2,r3
    438c:	00c00104 	movi	r3,4
    4390:	19005a16 	blt	r3,r4,44fc <_dtoa_r+0xc24>
    4394:	008000c4 	movi	r2,3
    4398:	113f7e16 	blt	r2,r4,4194 <_dtoa_r+0x8bc>
    439c:	20800704 	addi	r2,r4,28
    43a0:	003f7506 	br	4178 <_dtoa_r+0x8a0>
    43a4:	d9801717 	ldw	r6,92(sp)
    43a8:	00800044 	movi	r2,1
    43ac:	1180a10e 	bge	r2,r6,4634 <_dtoa_r+0xd5c>
    43b0:	d9800f17 	ldw	r6,60(sp)
    43b4:	d8c01017 	ldw	r3,64(sp)
    43b8:	30bfffc4 	addi	r2,r6,-1
    43bc:	1881c616 	blt	r3,r2,4ad8 <_dtoa_r+0x1200>
    43c0:	18a5c83a 	sub	r18,r3,r2
    43c4:	d8800f17 	ldw	r2,60(sp)
    43c8:	10026216 	blt	r2,zero,4d54 <_dtoa_r+0x147c>
    43cc:	dc001117 	ldw	r16,68(sp)
    43d0:	1007883a 	mov	r3,r2
    43d4:	d9800a17 	ldw	r6,40(sp)
    43d8:	d8801117 	ldw	r2,68(sp)
    43dc:	d9001617 	ldw	r4,88(sp)
    43e0:	30cd883a 	add	r6,r6,r3
    43e4:	10c5883a 	add	r2,r2,r3
    43e8:	01400044 	movi	r5,1
    43ec:	d9800a15 	stw	r6,40(sp)
    43f0:	d8801115 	stw	r2,68(sp)
    43f4:	00070440 	call	7044 <__i2b>
    43f8:	1027883a 	mov	r19,r2
    43fc:	003f2506 	br	4094 <_dtoa_r+0x7bc>
    4400:	00c00074 	movhi	r3,1
    4404:	18f5bd04 	addi	r3,r3,-10508
    4408:	003d6706 	br	39a8 <_dtoa_r+0xd0>
    440c:	dd800517 	ldw	r22,20(sp)
    4410:	04000044 	movi	r16,1
    4414:	00000706 	br	4434 <_dtoa_r+0xb5c>
    4418:	d9400717 	ldw	r5,28(sp)
    441c:	d9001617 	ldw	r4,88(sp)
    4420:	01800284 	movi	r6,10
    4424:	000f883a 	mov	r7,zero
    4428:	00070800 	call	7080 <__multadd>
    442c:	d8800715 	stw	r2,28(sp)
    4430:	84000044 	addi	r16,r16,1
    4434:	d9000717 	ldw	r4,28(sp)
    4438:	900b883a 	mov	r5,r18
    443c:	00036940 	call	3694 <quorem>
    4440:	15c00c04 	addi	r23,r2,48
    4444:	b5c00005 	stb	r23,0(r22)
    4448:	d8c00f17 	ldw	r3,60(sp)
    444c:	b5800044 	addi	r22,r22,1
    4450:	80fff116 	blt	r16,r3,4418 <_dtoa_r+0xb40>
    4454:	d8000615 	stw	zero,24(sp)
    4458:	d9400717 	ldw	r5,28(sp)
    445c:	d9001617 	ldw	r4,88(sp)
    4460:	01800044 	movi	r6,1
    4464:	0006ca40 	call	6ca4 <__lshift>
    4468:	1009883a 	mov	r4,r2
    446c:	900b883a 	mov	r5,r18
    4470:	d8800715 	stw	r2,28(sp)
    4474:	00064bc0 	call	64bc <__mcmp>
    4478:	00803c0e 	bge	zero,r2,456c <_dtoa_r+0xc94>
    447c:	b009883a 	mov	r4,r22
    4480:	213fffc4 	addi	r4,r4,-1
    4484:	21400003 	ldbu	r5,0(r4)
    4488:	00800e44 	movi	r2,57
    448c:	28c03fcc 	andi	r3,r5,255
    4490:	18c0201c 	xori	r3,r3,128
    4494:	18ffe004 	addi	r3,r3,-128
    4498:	1881981e 	bne	r3,r2,4afc <_dtoa_r+0x1224>
    449c:	d9800517 	ldw	r6,20(sp)
    44a0:	21bff71e 	bne	r4,r6,4480 <_dtoa_r+0xba8>
    44a4:	d8800d17 	ldw	r2,52(sp)
    44a8:	37000044 	addi	fp,r6,1
    44ac:	10800044 	addi	r2,r2,1
    44b0:	d8800d15 	stw	r2,52(sp)
    44b4:	00800c44 	movi	r2,49
    44b8:	30800005 	stb	r2,0(r6)
    44bc:	d9001617 	ldw	r4,88(sp)
    44c0:	900b883a 	mov	r5,r18
    44c4:	00063600 	call	6360 <_Bfree>
    44c8:	983ecd26 	beq	r19,zero,4000 <_dtoa_r+0x728>
    44cc:	d8c00617 	ldw	r3,24(sp)
    44d0:	18000426 	beq	r3,zero,44e4 <_dtoa_r+0xc0c>
    44d4:	1cc00326 	beq	r3,r19,44e4 <_dtoa_r+0xc0c>
    44d8:	d9001617 	ldw	r4,88(sp)
    44dc:	180b883a 	mov	r5,r3
    44e0:	00063600 	call	6360 <_Bfree>
    44e4:	d9001617 	ldw	r4,88(sp)
    44e8:	980b883a 	mov	r5,r19
    44ec:	00063600 	call	6360 <_Bfree>
    44f0:	003ec306 	br	4000 <_dtoa_r+0x728>
    44f4:	1805883a 	mov	r2,r3
    44f8:	003eeb06 	br	40a8 <_dtoa_r+0x7d0>
    44fc:	d9800a17 	ldw	r6,40(sp)
    4500:	d8c01117 	ldw	r3,68(sp)
    4504:	20bfff04 	addi	r2,r4,-4
    4508:	308d883a 	add	r6,r6,r2
    450c:	1887883a 	add	r3,r3,r2
    4510:	80a1883a 	add	r16,r16,r2
    4514:	d9800a15 	stw	r6,40(sp)
    4518:	d8c01115 	stw	r3,68(sp)
    451c:	003f1d06 	br	4194 <_dtoa_r+0x8bc>
    4520:	a03f0c1e 	bne	r20,zero,4154 <_dtoa_r+0x87c>
    4524:	00800434 	movhi	r2,16
    4528:	10bfffc4 	addi	r2,r2,-1
    452c:	a884703a 	and	r2,r21,r2
    4530:	103f081e 	bne	r2,zero,4154 <_dtoa_r+0x87c>
    4534:	a89ffc2c 	andhi	r2,r21,32752
    4538:	103f0626 	beq	r2,zero,4154 <_dtoa_r+0x87c>
    453c:	d8c01117 	ldw	r3,68(sp)
    4540:	d9000a17 	ldw	r4,40(sp)
    4544:	18c00044 	addi	r3,r3,1
    4548:	21000044 	addi	r4,r4,1
    454c:	d8c01115 	stw	r3,68(sp)
    4550:	d9000a15 	stw	r4,40(sp)
    4554:	003f0006 	br	4158 <_dtoa_r+0x880>
    4558:	d9400717 	ldw	r5,28(sp)
    455c:	d9001617 	ldw	r4,88(sp)
    4560:	00071ac0 	call	71ac <__pow5mult>
    4564:	d8800715 	stw	r2,28(sp)
    4568:	003eed06 	br	4120 <_dtoa_r+0x848>
    456c:	1000021e 	bne	r2,zero,4578 <_dtoa_r+0xca0>
    4570:	b880004c 	andi	r2,r23,1
    4574:	103fc11e 	bne	r2,zero,447c <_dtoa_r+0xba4>
    4578:	b5bfffc4 	addi	r22,r22,-1
    457c:	b0c00007 	ldb	r3,0(r22)
    4580:	00800c04 	movi	r2,48
    4584:	18bffc26 	beq	r3,r2,4578 <_dtoa_r+0xca0>
    4588:	b7000044 	addi	fp,r22,1
    458c:	003fcb06 	br	44bc <_dtoa_r+0xbe4>
    4590:	d9800d17 	ldw	r6,52(sp)
    4594:	018fc83a 	sub	r7,zero,r6
    4598:	3801f726 	beq	r7,zero,4d78 <_dtoa_r+0x14a0>
    459c:	398003cc 	andi	r6,r7,15
    45a0:	300c90fa 	slli	r6,r6,3
    45a4:	01400074 	movhi	r5,1
    45a8:	2975db04 	addi	r5,r5,-10388
    45ac:	d9001217 	ldw	r4,72(sp)
    45b0:	314d883a 	add	r6,r6,r5
    45b4:	30c00117 	ldw	r3,4(r6)
    45b8:	30800017 	ldw	r2,0(r6)
    45bc:	d9401317 	ldw	r5,76(sp)
    45c0:	3821d13a 	srai	r16,r7,4
    45c4:	100d883a 	mov	r6,r2
    45c8:	180f883a 	mov	r7,r3
    45cc:	00092d00 	call	92d0 <__muldf3>
    45d0:	1011883a 	mov	r8,r2
    45d4:	1813883a 	mov	r9,r3
    45d8:	1029883a 	mov	r20,r2
    45dc:	182b883a 	mov	r21,r3
    45e0:	8001e526 	beq	r16,zero,4d78 <_dtoa_r+0x14a0>
    45e4:	05800084 	movi	r22,2
    45e8:	04400074 	movhi	r17,1
    45ec:	8c760d04 	addi	r17,r17,-10188
    45f0:	8080004c 	andi	r2,r16,1
    45f4:	1005003a 	cmpeq	r2,r2,zero
    45f8:	1000081e 	bne	r2,zero,461c <_dtoa_r+0xd44>
    45fc:	89800017 	ldw	r6,0(r17)
    4600:	89c00117 	ldw	r7,4(r17)
    4604:	480b883a 	mov	r5,r9
    4608:	4009883a 	mov	r4,r8
    460c:	00092d00 	call	92d0 <__muldf3>
    4610:	1011883a 	mov	r8,r2
    4614:	b5800044 	addi	r22,r22,1
    4618:	1813883a 	mov	r9,r3
    461c:	8021d07a 	srai	r16,r16,1
    4620:	8c400204 	addi	r17,r17,8
    4624:	803ff21e 	bne	r16,zero,45f0 <_dtoa_r+0xd18>
    4628:	4029883a 	mov	r20,r8
    462c:	482b883a 	mov	r21,r9
    4630:	003dca06 	br	3d5c <_dtoa_r+0x484>
    4634:	d9000817 	ldw	r4,32(sp)
    4638:	2005003a 	cmpeq	r2,r4,zero
    463c:	1001f61e 	bne	r2,zero,4e18 <_dtoa_r+0x1540>
    4640:	dc001117 	ldw	r16,68(sp)
    4644:	dc801017 	ldw	r18,64(sp)
    4648:	18c10cc4 	addi	r3,r3,1075
    464c:	003f6106 	br	43d4 <_dtoa_r+0xafc>
    4650:	d8000b15 	stw	zero,44(sp)
    4654:	d9802617 	ldw	r6,152(sp)
    4658:	d8c00d17 	ldw	r3,52(sp)
    465c:	30800044 	addi	r2,r6,1
    4660:	18ad883a 	add	r22,r3,r2
    4664:	b13fffc4 	addi	r4,r22,-1
    4668:	d9000e15 	stw	r4,56(sp)
    466c:	0581f60e 	bge	zero,r22,4e48 <_dtoa_r+0x1570>
    4670:	dd800f15 	stw	r22,60(sp)
    4674:	003f3006 	br	4338 <_dtoa_r+0xa60>
    4678:	d8000b15 	stw	zero,44(sp)
    467c:	d9002617 	ldw	r4,152(sp)
    4680:	0101eb0e 	bge	zero,r4,4e30 <_dtoa_r+0x1558>
    4684:	202d883a 	mov	r22,r4
    4688:	d9000e15 	stw	r4,56(sp)
    468c:	d9000f15 	stw	r4,60(sp)
    4690:	003f2906 	br	4338 <_dtoa_r+0xa60>
    4694:	01800044 	movi	r6,1
    4698:	d9800b15 	stw	r6,44(sp)
    469c:	003ff706 	br	467c <_dtoa_r+0xda4>
    46a0:	01000044 	movi	r4,1
    46a4:	d9000b15 	stw	r4,44(sp)
    46a8:	003fea06 	br	4654 <_dtoa_r+0xd7c>
    46ac:	04000c0e 	bge	zero,r16,46e0 <_dtoa_r+0xe08>
    46b0:	d9400717 	ldw	r5,28(sp)
    46b4:	d9001617 	ldw	r4,88(sp)
    46b8:	01800044 	movi	r6,1
    46bc:	0006ca40 	call	6ca4 <__lshift>
    46c0:	1009883a 	mov	r4,r2
    46c4:	900b883a 	mov	r5,r18
    46c8:	d8800715 	stw	r2,28(sp)
    46cc:	00064bc0 	call	64bc <__mcmp>
    46d0:	0081e00e 	bge	zero,r2,4e54 <_dtoa_r+0x157c>
    46d4:	bdc00044 	addi	r23,r23,1
    46d8:	00800e84 	movi	r2,58
    46dc:	b881a226 	beq	r23,r2,4d68 <_dtoa_r+0x1490>
    46e0:	b7000044 	addi	fp,r22,1
    46e4:	b5c00005 	stb	r23,0(r22)
    46e8:	003f7406 	br	44bc <_dtoa_r+0xbe4>
    46ec:	00800e44 	movi	r2,57
    46f0:	b8819d26 	beq	r23,r2,4d68 <_dtoa_r+0x1490>
    46f4:	053ffa0e 	bge	zero,r20,46e0 <_dtoa_r+0xe08>
    46f8:	8dc00c44 	addi	r23,r17,49
    46fc:	003ff806 	br	46e0 <_dtoa_r+0xe08>
    4700:	d9001617 	ldw	r4,88(sp)
    4704:	a80b883a 	mov	r5,r21
    4708:	04000044 	movi	r16,1
    470c:	00063600 	call	6360 <_Bfree>
    4710:	003edf06 	br	4290 <_dtoa_r+0x9b8>
    4714:	d9001617 	ldw	r4,88(sp)
    4718:	980b883a 	mov	r5,r19
    471c:	01800284 	movi	r6,10
    4720:	000f883a 	mov	r7,zero
    4724:	00070800 	call	7080 <__multadd>
    4728:	1027883a 	mov	r19,r2
    472c:	d8800615 	stw	r2,24(sp)
    4730:	003ebb06 	br	4220 <_dtoa_r+0x948>
    4734:	d9801117 	ldw	r6,68(sp)
    4738:	d8800d17 	ldw	r2,52(sp)
    473c:	d8000915 	stw	zero,36(sp)
    4740:	308dc83a 	sub	r6,r6,r2
    4744:	0087c83a 	sub	r3,zero,r2
    4748:	d9801115 	stw	r6,68(sp)
    474c:	d8c01015 	stw	r3,64(sp)
    4750:	003cfe06 	br	3b4c <_dtoa_r+0x274>
    4754:	018dc83a 	sub	r6,zero,r6
    4758:	d9801115 	stw	r6,68(sp)
    475c:	d8000a15 	stw	zero,40(sp)
    4760:	003cf306 	br	3b30 <_dtoa_r+0x258>
    4764:	d9000d17 	ldw	r4,52(sp)
    4768:	0009b940 	call	9b94 <__floatsidf>
    476c:	880b883a 	mov	r5,r17
    4770:	8009883a 	mov	r4,r16
    4774:	180f883a 	mov	r7,r3
    4778:	100d883a 	mov	r6,r2
    477c:	00099740 	call	9974 <__nedf2>
    4780:	103ce126 	beq	r2,zero,3b08 <_dtoa_r+0x230>
    4784:	d9800d17 	ldw	r6,52(sp)
    4788:	31bfffc4 	addi	r6,r6,-1
    478c:	d9800d15 	stw	r6,52(sp)
    4790:	003cdd06 	br	3b08 <_dtoa_r+0x230>
    4794:	d9000717 	ldw	r4,28(sp)
    4798:	900b883a 	mov	r5,r18
    479c:	00064bc0 	call	64bc <__mcmp>
    47a0:	103e8d0e 	bge	r2,zero,41d8 <_dtoa_r+0x900>
    47a4:	d9400717 	ldw	r5,28(sp)
    47a8:	d9001617 	ldw	r4,88(sp)
    47ac:	01800284 	movi	r6,10
    47b0:	000f883a 	mov	r7,zero
    47b4:	00070800 	call	7080 <__multadd>
    47b8:	d9800d17 	ldw	r6,52(sp)
    47bc:	d8800715 	stw	r2,28(sp)
    47c0:	31bfffc4 	addi	r6,r6,-1
    47c4:	d9800d15 	stw	r6,52(sp)
    47c8:	b001a71e 	bne	r22,zero,4e68 <_dtoa_r+0x1590>
    47cc:	d8800e17 	ldw	r2,56(sp)
    47d0:	d8800f15 	stw	r2,60(sp)
    47d4:	003e8006 	br	41d8 <_dtoa_r+0x900>
    47d8:	90800417 	ldw	r2,16(r18)
    47dc:	1085883a 	add	r2,r2,r2
    47e0:	1085883a 	add	r2,r2,r2
    47e4:	1485883a 	add	r2,r2,r18
    47e8:	11000417 	ldw	r4,16(r2)
    47ec:	00063880 	call	6388 <__hi0bits>
    47f0:	00c00804 	movi	r3,32
    47f4:	1887c83a 	sub	r3,r3,r2
    47f8:	003e5a06 	br	4164 <_dtoa_r+0x88c>
    47fc:	d9400717 	ldw	r5,28(sp)
    4800:	d9801017 	ldw	r6,64(sp)
    4804:	d9001617 	ldw	r4,88(sp)
    4808:	00071ac0 	call	71ac <__pow5mult>
    480c:	d8800715 	stw	r2,28(sp)
    4810:	003e4306 	br	4120 <_dtoa_r+0x848>
    4814:	d9800f17 	ldw	r6,60(sp)
    4818:	d8800d17 	ldw	r2,52(sp)
    481c:	d9800315 	stw	r6,12(sp)
    4820:	d8800415 	stw	r2,16(sp)
    4824:	d8c00b17 	ldw	r3,44(sp)
    4828:	1805003a 	cmpeq	r2,r3,zero
    482c:	1000e21e 	bne	r2,zero,4bb8 <_dtoa_r+0x12e0>
    4830:	d9000317 	ldw	r4,12(sp)
    4834:	0005883a 	mov	r2,zero
    4838:	00cff834 	movhi	r3,16352
    483c:	200c90fa 	slli	r6,r4,3
    4840:	01000074 	movhi	r4,1
    4844:	2135db04 	addi	r4,r4,-10388
    4848:	180b883a 	mov	r5,r3
    484c:	310d883a 	add	r6,r6,r4
    4850:	327fff17 	ldw	r9,-4(r6)
    4854:	323ffe17 	ldw	r8,-8(r6)
    4858:	1009883a 	mov	r4,r2
    485c:	480f883a 	mov	r7,r9
    4860:	400d883a 	mov	r6,r8
    4864:	00096940 	call	9694 <__divdf3>
    4868:	180b883a 	mov	r5,r3
    486c:	b00d883a 	mov	r6,r22
    4870:	b80f883a 	mov	r7,r23
    4874:	1009883a 	mov	r4,r2
    4878:	00091dc0 	call	91dc <__subdf3>
    487c:	a80b883a 	mov	r5,r21
    4880:	a009883a 	mov	r4,r20
    4884:	d8c01915 	stw	r3,100(sp)
    4888:	d8801815 	stw	r2,96(sp)
    488c:	0009c8c0 	call	9c8c <__fixdfsi>
    4890:	1009883a 	mov	r4,r2
    4894:	1027883a 	mov	r19,r2
    4898:	0009b940 	call	9b94 <__floatsidf>
    489c:	a80b883a 	mov	r5,r21
    48a0:	a009883a 	mov	r4,r20
    48a4:	180f883a 	mov	r7,r3
    48a8:	100d883a 	mov	r6,r2
    48ac:	00091dc0 	call	91dc <__subdf3>
    48b0:	d9801817 	ldw	r6,96(sp)
    48b4:	1823883a 	mov	r17,r3
    48b8:	d8801415 	stw	r2,80(sp)
    48bc:	302d883a 	mov	r22,r6
    48c0:	d9800517 	ldw	r6,20(sp)
    48c4:	9cc00c04 	addi	r19,r19,48
    48c8:	dc401515 	stw	r17,84(sp)
    48cc:	d8c01917 	ldw	r3,100(sp)
    48d0:	34c00005 	stb	r19,0(r6)
    48d4:	d8800517 	ldw	r2,20(sp)
    48d8:	d9401917 	ldw	r5,100(sp)
    48dc:	d9801417 	ldw	r6,80(sp)
    48e0:	b009883a 	mov	r4,r22
    48e4:	880f883a 	mov	r7,r17
    48e8:	182f883a 	mov	r23,r3
    48ec:	17000044 	addi	fp,r2,1
    48f0:	00099fc0 	call	99fc <__gtdf2>
    48f4:	00804e16 	blt	zero,r2,4a30 <_dtoa_r+0x1158>
    48f8:	d9801417 	ldw	r6,80(sp)
    48fc:	0005883a 	mov	r2,zero
    4900:	00cffc34 	movhi	r3,16368
    4904:	180b883a 	mov	r5,r3
    4908:	880f883a 	mov	r7,r17
    490c:	1009883a 	mov	r4,r2
    4910:	00091dc0 	call	91dc <__subdf3>
    4914:	d9401917 	ldw	r5,100(sp)
    4918:	180f883a 	mov	r7,r3
    491c:	b009883a 	mov	r4,r22
    4920:	100d883a 	mov	r6,r2
    4924:	00099fc0 	call	99fc <__gtdf2>
    4928:	00bda216 	blt	zero,r2,3fb4 <_dtoa_r+0x6dc>
    492c:	d8c00317 	ldw	r3,12(sp)
    4930:	00800044 	movi	r2,1
    4934:	10c01216 	blt	r2,r3,4980 <_dtoa_r+0x10a8>
    4938:	003d4506 	br	3e50 <_dtoa_r+0x578>
    493c:	d9801417 	ldw	r6,80(sp)
    4940:	0005883a 	mov	r2,zero
    4944:	00cffc34 	movhi	r3,16368
    4948:	180b883a 	mov	r5,r3
    494c:	880f883a 	mov	r7,r17
    4950:	1009883a 	mov	r4,r2
    4954:	00091dc0 	call	91dc <__subdf3>
    4958:	d9c01b17 	ldw	r7,108(sp)
    495c:	180b883a 	mov	r5,r3
    4960:	1009883a 	mov	r4,r2
    4964:	b00d883a 	mov	r6,r22
    4968:	0009b0c0 	call	9b0c <__ltdf2>
    496c:	103d9116 	blt	r2,zero,3fb4 <_dtoa_r+0x6dc>
    4970:	d9800517 	ldw	r6,20(sp)
    4974:	d9000317 	ldw	r4,12(sp)
    4978:	3105883a 	add	r2,r6,r4
    497c:	e0bd3426 	beq	fp,r2,3e50 <_dtoa_r+0x578>
    4980:	04500934 	movhi	r17,16420
    4984:	0021883a 	mov	r16,zero
    4988:	b80b883a 	mov	r5,r23
    498c:	b009883a 	mov	r4,r22
    4990:	800d883a 	mov	r6,r16
    4994:	880f883a 	mov	r7,r17
    4998:	00092d00 	call	92d0 <__muldf3>
    499c:	d9401517 	ldw	r5,84(sp)
    49a0:	d9001417 	ldw	r4,80(sp)
    49a4:	880f883a 	mov	r7,r17
    49a8:	000d883a 	mov	r6,zero
    49ac:	d8801a15 	stw	r2,104(sp)
    49b0:	d8c01b15 	stw	r3,108(sp)
    49b4:	00092d00 	call	92d0 <__muldf3>
    49b8:	180b883a 	mov	r5,r3
    49bc:	1009883a 	mov	r4,r2
    49c0:	1823883a 	mov	r17,r3
    49c4:	1021883a 	mov	r16,r2
    49c8:	0009c8c0 	call	9c8c <__fixdfsi>
    49cc:	1009883a 	mov	r4,r2
    49d0:	102b883a 	mov	r21,r2
    49d4:	0009b940 	call	9b94 <__floatsidf>
    49d8:	880b883a 	mov	r5,r17
    49dc:	8009883a 	mov	r4,r16
    49e0:	180f883a 	mov	r7,r3
    49e4:	100d883a 	mov	r6,r2
    49e8:	00091dc0 	call	91dc <__subdf3>
    49ec:	1021883a 	mov	r16,r2
    49f0:	d9001b17 	ldw	r4,108(sp)
    49f4:	1823883a 	mov	r17,r3
    49f8:	dc001415 	stw	r16,80(sp)
    49fc:	ad400c04 	addi	r21,r21,48
    4a00:	dc401515 	stw	r17,84(sp)
    4a04:	d8801a17 	ldw	r2,104(sp)
    4a08:	e5400005 	stb	r21,0(fp)
    4a0c:	202f883a 	mov	r23,r4
    4a10:	d9c01b17 	ldw	r7,108(sp)
    4a14:	d9001417 	ldw	r4,80(sp)
    4a18:	880b883a 	mov	r5,r17
    4a1c:	100d883a 	mov	r6,r2
    4a20:	102d883a 	mov	r22,r2
    4a24:	e7000044 	addi	fp,fp,1
    4a28:	0009b0c0 	call	9b0c <__ltdf2>
    4a2c:	103fc30e 	bge	r2,zero,493c <_dtoa_r+0x1064>
    4a30:	d9000417 	ldw	r4,16(sp)
    4a34:	d9000d15 	stw	r4,52(sp)
    4a38:	003d7106 	br	4000 <_dtoa_r+0x728>
    4a3c:	d9801717 	ldw	r6,92(sp)
    4a40:	00800084 	movi	r2,2
    4a44:	11bde60e 	bge	r2,r6,41e0 <_dtoa_r+0x908>
    4a48:	203cfb1e 	bne	r4,zero,3e38 <_dtoa_r+0x560>
    4a4c:	d9001617 	ldw	r4,88(sp)
    4a50:	900b883a 	mov	r5,r18
    4a54:	01800144 	movi	r6,5
    4a58:	000f883a 	mov	r7,zero
    4a5c:	00070800 	call	7080 <__multadd>
    4a60:	d9000717 	ldw	r4,28(sp)
    4a64:	100b883a 	mov	r5,r2
    4a68:	1025883a 	mov	r18,r2
    4a6c:	00064bc0 	call	64bc <__mcmp>
    4a70:	00bcf10e 	bge	zero,r2,3e38 <_dtoa_r+0x560>
    4a74:	d8c00d17 	ldw	r3,52(sp)
    4a78:	d9000517 	ldw	r4,20(sp)
    4a7c:	d8000615 	stw	zero,24(sp)
    4a80:	18c00044 	addi	r3,r3,1
    4a84:	d8c00d15 	stw	r3,52(sp)
    4a88:	00800c44 	movi	r2,49
    4a8c:	27000044 	addi	fp,r4,1
    4a90:	20800005 	stb	r2,0(r4)
    4a94:	003e8906 	br	44bc <_dtoa_r+0xbe4>
    4a98:	d8c00517 	ldw	r3,20(sp)
    4a9c:	003bc206 	br	39a8 <_dtoa_r+0xd0>
    4aa0:	01800074 	movhi	r6,1
    4aa4:	31b60d04 	addi	r6,r6,-10188
    4aa8:	30c00917 	ldw	r3,36(r6)
    4aac:	30800817 	ldw	r2,32(r6)
    4ab0:	d9001217 	ldw	r4,72(sp)
    4ab4:	d9401317 	ldw	r5,76(sp)
    4ab8:	180f883a 	mov	r7,r3
    4abc:	100d883a 	mov	r6,r2
    4ac0:	00096940 	call	9694 <__divdf3>
    4ac4:	948003cc 	andi	r18,r18,15
    4ac8:	058000c4 	movi	r22,3
    4acc:	1029883a 	mov	r20,r2
    4ad0:	182b883a 	mov	r21,r3
    4ad4:	003c8906 	br	3cfc <_dtoa_r+0x424>
    4ad8:	d9001017 	ldw	r4,64(sp)
    4adc:	d9800917 	ldw	r6,36(sp)
    4ae0:	0025883a 	mov	r18,zero
    4ae4:	1105c83a 	sub	r2,r2,r4
    4ae8:	2089883a 	add	r4,r4,r2
    4aec:	308d883a 	add	r6,r6,r2
    4af0:	d9001015 	stw	r4,64(sp)
    4af4:	d9800915 	stw	r6,36(sp)
    4af8:	003e3206 	br	43c4 <_dtoa_r+0xaec>
    4afc:	28800044 	addi	r2,r5,1
    4b00:	27000044 	addi	fp,r4,1
    4b04:	20800005 	stb	r2,0(r4)
    4b08:	003e6c06 	br	44bc <_dtoa_r+0xbe4>
    4b0c:	d8800f17 	ldw	r2,60(sp)
    4b10:	00bce016 	blt	zero,r2,3e94 <_dtoa_r+0x5bc>
    4b14:	d9800f17 	ldw	r6,60(sp)
    4b18:	303cc51e 	bne	r6,zero,3e30 <_dtoa_r+0x558>
    4b1c:	0005883a 	mov	r2,zero
    4b20:	00d00534 	movhi	r3,16404
    4b24:	980b883a 	mov	r5,r19
    4b28:	180f883a 	mov	r7,r3
    4b2c:	9009883a 	mov	r4,r18
    4b30:	100d883a 	mov	r6,r2
    4b34:	00092d00 	call	92d0 <__muldf3>
    4b38:	180b883a 	mov	r5,r3
    4b3c:	a80f883a 	mov	r7,r21
    4b40:	1009883a 	mov	r4,r2
    4b44:	a00d883a 	mov	r6,r20
    4b48:	0009a840 	call	9a84 <__gedf2>
    4b4c:	103cb80e 	bge	r2,zero,3e30 <_dtoa_r+0x558>
    4b50:	0027883a 	mov	r19,zero
    4b54:	0025883a 	mov	r18,zero
    4b58:	003fc606 	br	4a74 <_dtoa_r+0x119c>
    4b5c:	99400117 	ldw	r5,4(r19)
    4b60:	d9001617 	ldw	r4,88(sp)
    4b64:	00068e00 	call	68e0 <_Balloc>
    4b68:	99800417 	ldw	r6,16(r19)
    4b6c:	11000304 	addi	r4,r2,12
    4b70:	99400304 	addi	r5,r19,12
    4b74:	318d883a 	add	r6,r6,r6
    4b78:	318d883a 	add	r6,r6,r6
    4b7c:	31800204 	addi	r6,r6,8
    4b80:	1023883a 	mov	r17,r2
    4b84:	00061480 	call	6148 <memcpy>
    4b88:	d9001617 	ldw	r4,88(sp)
    4b8c:	880b883a 	mov	r5,r17
    4b90:	01800044 	movi	r6,1
    4b94:	0006ca40 	call	6ca4 <__lshift>
    4b98:	100b883a 	mov	r5,r2
    4b9c:	003d9c06 	br	4210 <_dtoa_r+0x938>
    4ba0:	00800e44 	movi	r2,57
    4ba4:	b8807026 	beq	r23,r2,4d68 <_dtoa_r+0x1490>
    4ba8:	b8800044 	addi	r2,r23,1
    4bac:	b7000044 	addi	fp,r22,1
    4bb0:	b0800005 	stb	r2,0(r22)
    4bb4:	003e4106 	br	44bc <_dtoa_r+0xbe4>
    4bb8:	d8800317 	ldw	r2,12(sp)
    4bbc:	01800074 	movhi	r6,1
    4bc0:	31b5db04 	addi	r6,r6,-10388
    4bc4:	b009883a 	mov	r4,r22
    4bc8:	100e90fa 	slli	r7,r2,3
    4bcc:	b80b883a 	mov	r5,r23
    4bd0:	398f883a 	add	r7,r7,r6
    4bd4:	38bffe17 	ldw	r2,-8(r7)
    4bd8:	d9800517 	ldw	r6,20(sp)
    4bdc:	38ffff17 	ldw	r3,-4(r7)
    4be0:	37000044 	addi	fp,r6,1
    4be4:	180f883a 	mov	r7,r3
    4be8:	100d883a 	mov	r6,r2
    4bec:	00092d00 	call	92d0 <__muldf3>
    4bf0:	a80b883a 	mov	r5,r21
    4bf4:	a009883a 	mov	r4,r20
    4bf8:	182f883a 	mov	r23,r3
    4bfc:	102d883a 	mov	r22,r2
    4c00:	0009c8c0 	call	9c8c <__fixdfsi>
    4c04:	1009883a 	mov	r4,r2
    4c08:	1027883a 	mov	r19,r2
    4c0c:	0009b940 	call	9b94 <__floatsidf>
    4c10:	a80b883a 	mov	r5,r21
    4c14:	a009883a 	mov	r4,r20
    4c18:	180f883a 	mov	r7,r3
    4c1c:	100d883a 	mov	r6,r2
    4c20:	00091dc0 	call	91dc <__subdf3>
    4c24:	180b883a 	mov	r5,r3
    4c28:	d8c00517 	ldw	r3,20(sp)
    4c2c:	9cc00c04 	addi	r19,r19,48
    4c30:	1009883a 	mov	r4,r2
    4c34:	1cc00005 	stb	r19,0(r3)
    4c38:	2021883a 	mov	r16,r4
    4c3c:	d9000317 	ldw	r4,12(sp)
    4c40:	00800044 	movi	r2,1
    4c44:	2823883a 	mov	r17,r5
    4c48:	20802226 	beq	r4,r2,4cd4 <_dtoa_r+0x13fc>
    4c4c:	1029883a 	mov	r20,r2
    4c50:	0005883a 	mov	r2,zero
    4c54:	00d00934 	movhi	r3,16420
    4c58:	180f883a 	mov	r7,r3
    4c5c:	100d883a 	mov	r6,r2
    4c60:	880b883a 	mov	r5,r17
    4c64:	8009883a 	mov	r4,r16
    4c68:	00092d00 	call	92d0 <__muldf3>
    4c6c:	180b883a 	mov	r5,r3
    4c70:	1009883a 	mov	r4,r2
    4c74:	1823883a 	mov	r17,r3
    4c78:	1021883a 	mov	r16,r2
    4c7c:	0009c8c0 	call	9c8c <__fixdfsi>
    4c80:	1009883a 	mov	r4,r2
    4c84:	102b883a 	mov	r21,r2
    4c88:	0009b940 	call	9b94 <__floatsidf>
    4c8c:	880b883a 	mov	r5,r17
    4c90:	8009883a 	mov	r4,r16
    4c94:	180f883a 	mov	r7,r3
    4c98:	100d883a 	mov	r6,r2
    4c9c:	00091dc0 	call	91dc <__subdf3>
    4ca0:	180b883a 	mov	r5,r3
    4ca4:	d8c00517 	ldw	r3,20(sp)
    4ca8:	1009883a 	mov	r4,r2
    4cac:	ad400c04 	addi	r21,r21,48
    4cb0:	1d05883a 	add	r2,r3,r20
    4cb4:	15400005 	stb	r21,0(r2)
    4cb8:	2021883a 	mov	r16,r4
    4cbc:	d9000317 	ldw	r4,12(sp)
    4cc0:	a5000044 	addi	r20,r20,1
    4cc4:	2823883a 	mov	r17,r5
    4cc8:	a13fe11e 	bne	r20,r4,4c50 <_dtoa_r+0x1378>
    4ccc:	e505883a 	add	r2,fp,r20
    4cd0:	173fffc4 	addi	fp,r2,-1
    4cd4:	0025883a 	mov	r18,zero
    4cd8:	04cff834 	movhi	r19,16352
    4cdc:	b009883a 	mov	r4,r22
    4ce0:	b80b883a 	mov	r5,r23
    4ce4:	900d883a 	mov	r6,r18
    4ce8:	980f883a 	mov	r7,r19
    4cec:	000925c0 	call	925c <__adddf3>
    4cf0:	180b883a 	mov	r5,r3
    4cf4:	1009883a 	mov	r4,r2
    4cf8:	800d883a 	mov	r6,r16
    4cfc:	880f883a 	mov	r7,r17
    4d00:	0009b0c0 	call	9b0c <__ltdf2>
    4d04:	103cab16 	blt	r2,zero,3fb4 <_dtoa_r+0x6dc>
    4d08:	0009883a 	mov	r4,zero
    4d0c:	980b883a 	mov	r5,r19
    4d10:	b80f883a 	mov	r7,r23
    4d14:	b00d883a 	mov	r6,r22
    4d18:	00091dc0 	call	91dc <__subdf3>
    4d1c:	180b883a 	mov	r5,r3
    4d20:	880f883a 	mov	r7,r17
    4d24:	1009883a 	mov	r4,r2
    4d28:	800d883a 	mov	r6,r16
    4d2c:	00099fc0 	call	99fc <__gtdf2>
    4d30:	00bc470e 	bge	zero,r2,3e50 <_dtoa_r+0x578>
    4d34:	00c00c04 	movi	r3,48
    4d38:	e73fffc4 	addi	fp,fp,-1
    4d3c:	e0800007 	ldb	r2,0(fp)
    4d40:	10fffd26 	beq	r2,r3,4d38 <_dtoa_r+0x1460>
    4d44:	d9800417 	ldw	r6,16(sp)
    4d48:	e7000044 	addi	fp,fp,1
    4d4c:	d9800d15 	stw	r6,52(sp)
    4d50:	003cab06 	br	4000 <_dtoa_r+0x728>
    4d54:	d8c00f17 	ldw	r3,60(sp)
    4d58:	d9001117 	ldw	r4,68(sp)
    4d5c:	20e1c83a 	sub	r16,r4,r3
    4d60:	0007883a 	mov	r3,zero
    4d64:	003d9b06 	br	43d4 <_dtoa_r+0xafc>
    4d68:	00800e44 	movi	r2,57
    4d6c:	b0800005 	stb	r2,0(r22)
    4d70:	b5800044 	addi	r22,r22,1
    4d74:	003dc106 	br	447c <_dtoa_r+0xba4>
    4d78:	05800084 	movi	r22,2
    4d7c:	003bf706 	br	3d5c <_dtoa_r+0x484>
    4d80:	d9000f17 	ldw	r4,60(sp)
    4d84:	013c000e 	bge	zero,r4,3d88 <_dtoa_r+0x4b0>
    4d88:	d9800e17 	ldw	r6,56(sp)
    4d8c:	01bc300e 	bge	zero,r6,3e50 <_dtoa_r+0x578>
    4d90:	0005883a 	mov	r2,zero
    4d94:	00d00934 	movhi	r3,16420
    4d98:	a80b883a 	mov	r5,r21
    4d9c:	180f883a 	mov	r7,r3
    4da0:	a009883a 	mov	r4,r20
    4da4:	100d883a 	mov	r6,r2
    4da8:	00092d00 	call	92d0 <__muldf3>
    4dac:	b1000044 	addi	r4,r22,1
    4db0:	1021883a 	mov	r16,r2
    4db4:	1823883a 	mov	r17,r3
    4db8:	0009b940 	call	9b94 <__floatsidf>
    4dbc:	880b883a 	mov	r5,r17
    4dc0:	8009883a 	mov	r4,r16
    4dc4:	180f883a 	mov	r7,r3
    4dc8:	100d883a 	mov	r6,r2
    4dcc:	00092d00 	call	92d0 <__muldf3>
    4dd0:	0011883a 	mov	r8,zero
    4dd4:	02500734 	movhi	r9,16412
    4dd8:	180b883a 	mov	r5,r3
    4ddc:	480f883a 	mov	r7,r9
    4de0:	1009883a 	mov	r4,r2
    4de4:	400d883a 	mov	r6,r8
    4de8:	000925c0 	call	925c <__adddf3>
    4dec:	102d883a 	mov	r22,r2
    4df0:	00bf3034 	movhi	r2,64704
    4df4:	10ef883a 	add	r23,r2,r3
    4df8:	d8800d17 	ldw	r2,52(sp)
    4dfc:	d8c00e17 	ldw	r3,56(sp)
    4e00:	8029883a 	mov	r20,r16
    4e04:	10bfffc4 	addi	r2,r2,-1
    4e08:	882b883a 	mov	r21,r17
    4e0c:	d8800415 	stw	r2,16(sp)
    4e10:	d8c00315 	stw	r3,12(sp)
    4e14:	003e8306 	br	4824 <_dtoa_r+0xf4c>
    4e18:	d8800117 	ldw	r2,4(sp)
    4e1c:	dc001117 	ldw	r16,68(sp)
    4e20:	dc801017 	ldw	r18,64(sp)
    4e24:	00c00d84 	movi	r3,54
    4e28:	1887c83a 	sub	r3,r3,r2
    4e2c:	003d6906 	br	43d4 <_dtoa_r+0xafc>
    4e30:	01800044 	movi	r6,1
    4e34:	3021883a 	mov	r16,r6
    4e38:	d9800f15 	stw	r6,60(sp)
    4e3c:	d9802615 	stw	r6,152(sp)
    4e40:	d9800e15 	stw	r6,56(sp)
    4e44:	003b9306 	br	3c94 <_dtoa_r+0x3bc>
    4e48:	b021883a 	mov	r16,r22
    4e4c:	dd800f15 	stw	r22,60(sp)
    4e50:	003b9006 	br	3c94 <_dtoa_r+0x3bc>
    4e54:	103e221e 	bne	r2,zero,46e0 <_dtoa_r+0xe08>
    4e58:	b880004c 	andi	r2,r23,1
    4e5c:	1005003a 	cmpeq	r2,r2,zero
    4e60:	103e1f1e 	bne	r2,zero,46e0 <_dtoa_r+0xe08>
    4e64:	003e1b06 	br	46d4 <_dtoa_r+0xdfc>
    4e68:	d9001617 	ldw	r4,88(sp)
    4e6c:	980b883a 	mov	r5,r19
    4e70:	01800284 	movi	r6,10
    4e74:	000f883a 	mov	r7,zero
    4e78:	00070800 	call	7080 <__multadd>
    4e7c:	d8c00e17 	ldw	r3,56(sp)
    4e80:	1027883a 	mov	r19,r2
    4e84:	d8c00f15 	stw	r3,60(sp)
    4e88:	003cd306 	br	41d8 <_dtoa_r+0x900>

00004e8c <_fflush_r>:
    4e8c:	defffb04 	addi	sp,sp,-20
    4e90:	dcc00315 	stw	r19,12(sp)
    4e94:	dc800215 	stw	r18,8(sp)
    4e98:	dfc00415 	stw	ra,16(sp)
    4e9c:	dc400115 	stw	r17,4(sp)
    4ea0:	dc000015 	stw	r16,0(sp)
    4ea4:	2027883a 	mov	r19,r4
    4ea8:	2825883a 	mov	r18,r5
    4eac:	20000226 	beq	r4,zero,4eb8 <_fflush_r+0x2c>
    4eb0:	20800e17 	ldw	r2,56(r4)
    4eb4:	10005626 	beq	r2,zero,5010 <_fflush_r+0x184>
    4eb8:	9100030b 	ldhu	r4,12(r18)
    4ebc:	20ffffcc 	andi	r3,r4,65535
    4ec0:	18e0001c 	xori	r3,r3,32768
    4ec4:	18e00004 	addi	r3,r3,-32768
    4ec8:	1880020c 	andi	r2,r3,8
    4ecc:	1000261e 	bne	r2,zero,4f68 <_fflush_r+0xdc>
    4ed0:	90c00117 	ldw	r3,4(r18)
    4ed4:	20820014 	ori	r2,r4,2048
    4ed8:	9080030d 	sth	r2,12(r18)
    4edc:	1009883a 	mov	r4,r2
    4ee0:	00c0400e 	bge	zero,r3,4fe4 <_fflush_r+0x158>
    4ee4:	92000a17 	ldw	r8,40(r18)
    4ee8:	40004026 	beq	r8,zero,4fec <_fflush_r+0x160>
    4eec:	2084000c 	andi	r2,r4,4096
    4ef0:	10005326 	beq	r2,zero,5040 <_fflush_r+0x1b4>
    4ef4:	94001417 	ldw	r16,80(r18)
    4ef8:	9080030b 	ldhu	r2,12(r18)
    4efc:	1080010c 	andi	r2,r2,4
    4f00:	1000481e 	bne	r2,zero,5024 <_fflush_r+0x198>
    4f04:	91400717 	ldw	r5,28(r18)
    4f08:	9809883a 	mov	r4,r19
    4f0c:	800d883a 	mov	r6,r16
    4f10:	000f883a 	mov	r7,zero
    4f14:	403ee83a 	callr	r8
    4f18:	8080261e 	bne	r16,r2,4fb4 <_fflush_r+0x128>
    4f1c:	9080030b 	ldhu	r2,12(r18)
    4f20:	91000417 	ldw	r4,16(r18)
    4f24:	90000115 	stw	zero,4(r18)
    4f28:	10bdffcc 	andi	r2,r2,63487
    4f2c:	10ffffcc 	andi	r3,r2,65535
    4f30:	18c4000c 	andi	r3,r3,4096
    4f34:	9080030d 	sth	r2,12(r18)
    4f38:	91000015 	stw	r4,0(r18)
    4f3c:	18002b26 	beq	r3,zero,4fec <_fflush_r+0x160>
    4f40:	0007883a 	mov	r3,zero
    4f44:	1805883a 	mov	r2,r3
    4f48:	94001415 	stw	r16,80(r18)
    4f4c:	dfc00417 	ldw	ra,16(sp)
    4f50:	dcc00317 	ldw	r19,12(sp)
    4f54:	dc800217 	ldw	r18,8(sp)
    4f58:	dc400117 	ldw	r17,4(sp)
    4f5c:	dc000017 	ldw	r16,0(sp)
    4f60:	dec00504 	addi	sp,sp,20
    4f64:	f800283a 	ret
    4f68:	94400417 	ldw	r17,16(r18)
    4f6c:	88001f26 	beq	r17,zero,4fec <_fflush_r+0x160>
    4f70:	90800017 	ldw	r2,0(r18)
    4f74:	18c000cc 	andi	r3,r3,3
    4f78:	94400015 	stw	r17,0(r18)
    4f7c:	1461c83a 	sub	r16,r2,r17
    4f80:	18002526 	beq	r3,zero,5018 <_fflush_r+0x18c>
    4f84:	0005883a 	mov	r2,zero
    4f88:	90800215 	stw	r2,8(r18)
    4f8c:	0400170e 	bge	zero,r16,4fec <_fflush_r+0x160>
    4f90:	90c00917 	ldw	r3,36(r18)
    4f94:	91400717 	ldw	r5,28(r18)
    4f98:	880d883a 	mov	r6,r17
    4f9c:	800f883a 	mov	r7,r16
    4fa0:	9809883a 	mov	r4,r19
    4fa4:	183ee83a 	callr	r3
    4fa8:	88a3883a 	add	r17,r17,r2
    4fac:	80a1c83a 	sub	r16,r16,r2
    4fb0:	00bff616 	blt	zero,r2,4f8c <_fflush_r+0x100>
    4fb4:	9080030b 	ldhu	r2,12(r18)
    4fb8:	00ffffc4 	movi	r3,-1
    4fbc:	10801014 	ori	r2,r2,64
    4fc0:	9080030d 	sth	r2,12(r18)
    4fc4:	1805883a 	mov	r2,r3
    4fc8:	dfc00417 	ldw	ra,16(sp)
    4fcc:	dcc00317 	ldw	r19,12(sp)
    4fd0:	dc800217 	ldw	r18,8(sp)
    4fd4:	dc400117 	ldw	r17,4(sp)
    4fd8:	dc000017 	ldw	r16,0(sp)
    4fdc:	dec00504 	addi	sp,sp,20
    4fe0:	f800283a 	ret
    4fe4:	90800f17 	ldw	r2,60(r18)
    4fe8:	00bfbe16 	blt	zero,r2,4ee4 <_fflush_r+0x58>
    4fec:	0007883a 	mov	r3,zero
    4ff0:	1805883a 	mov	r2,r3
    4ff4:	dfc00417 	ldw	ra,16(sp)
    4ff8:	dcc00317 	ldw	r19,12(sp)
    4ffc:	dc800217 	ldw	r18,8(sp)
    5000:	dc400117 	ldw	r17,4(sp)
    5004:	dc000017 	ldw	r16,0(sp)
    5008:	dec00504 	addi	sp,sp,20
    500c:	f800283a 	ret
    5010:	00051240 	call	5124 <__sinit>
    5014:	003fa806 	br	4eb8 <_fflush_r+0x2c>
    5018:	90800517 	ldw	r2,20(r18)
    501c:	90800215 	stw	r2,8(r18)
    5020:	003fda06 	br	4f8c <_fflush_r+0x100>
    5024:	90800117 	ldw	r2,4(r18)
    5028:	90c00c17 	ldw	r3,48(r18)
    502c:	80a1c83a 	sub	r16,r16,r2
    5030:	183fb426 	beq	r3,zero,4f04 <_fflush_r+0x78>
    5034:	90800f17 	ldw	r2,60(r18)
    5038:	80a1c83a 	sub	r16,r16,r2
    503c:	003fb106 	br	4f04 <_fflush_r+0x78>
    5040:	91400717 	ldw	r5,28(r18)
    5044:	9809883a 	mov	r4,r19
    5048:	000d883a 	mov	r6,zero
    504c:	01c00044 	movi	r7,1
    5050:	403ee83a 	callr	r8
    5054:	1021883a 	mov	r16,r2
    5058:	00bfffc4 	movi	r2,-1
    505c:	80800226 	beq	r16,r2,5068 <_fflush_r+0x1dc>
    5060:	92000a17 	ldw	r8,40(r18)
    5064:	003fa406 	br	4ef8 <_fflush_r+0x6c>
    5068:	98c00017 	ldw	r3,0(r19)
    506c:	00800744 	movi	r2,29
    5070:	18bfde26 	beq	r3,r2,4fec <_fflush_r+0x160>
    5074:	9080030b 	ldhu	r2,12(r18)
    5078:	8007883a 	mov	r3,r16
    507c:	10801014 	ori	r2,r2,64
    5080:	9080030d 	sth	r2,12(r18)
    5084:	003fcf06 	br	4fc4 <_fflush_r+0x138>

00005088 <fflush>:
    5088:	01400034 	movhi	r5,0
    508c:	2953a304 	addi	r5,r5,20108
    5090:	2007883a 	mov	r3,r4
    5094:	20000526 	beq	r4,zero,50ac <fflush+0x24>
    5098:	00800074 	movhi	r2,1
    509c:	10bcfe04 	addi	r2,r2,-3080
    50a0:	11000017 	ldw	r4,0(r2)
    50a4:	180b883a 	mov	r5,r3
    50a8:	0004e8c1 	jmpi	4e8c <_fflush_r>
    50ac:	00800074 	movhi	r2,1
    50b0:	10bcff04 	addi	r2,r2,-3076
    50b4:	11000017 	ldw	r4,0(r2)
    50b8:	0005c8c1 	jmpi	5c8c <_fwalk_reent>

000050bc <std>:
    50bc:	00800034 	movhi	r2,0
    50c0:	109e9404 	addi	r2,r2,31312
    50c4:	20800b15 	stw	r2,44(r4)
    50c8:	00800034 	movhi	r2,0
    50cc:	109ecf04 	addi	r2,r2,31548
    50d0:	20800815 	stw	r2,32(r4)
    50d4:	00c00034 	movhi	r3,0
    50d8:	18deb004 	addi	r3,r3,31424
    50dc:	00800034 	movhi	r2,0
    50e0:	109e9604 	addi	r2,r2,31320
    50e4:	2140030d 	sth	r5,12(r4)
    50e8:	2180038d 	sth	r6,14(r4)
    50ec:	20c00915 	stw	r3,36(r4)
    50f0:	20800a15 	stw	r2,40(r4)
    50f4:	20000015 	stw	zero,0(r4)
    50f8:	20000115 	stw	zero,4(r4)
    50fc:	20000215 	stw	zero,8(r4)
    5100:	20000415 	stw	zero,16(r4)
    5104:	20000515 	stw	zero,20(r4)
    5108:	20000615 	stw	zero,24(r4)
    510c:	21000715 	stw	r4,28(r4)
    5110:	f800283a 	ret

00005114 <__sfp_lock_acquire>:
    5114:	f800283a 	ret

00005118 <__sfp_lock_release>:
    5118:	f800283a 	ret

0000511c <__sinit_lock_acquire>:
    511c:	f800283a 	ret

00005120 <__sinit_lock_release>:
    5120:	f800283a 	ret

00005124 <__sinit>:
    5124:	20800e17 	ldw	r2,56(r4)
    5128:	defffd04 	addi	sp,sp,-12
    512c:	dc400115 	stw	r17,4(sp)
    5130:	dc000015 	stw	r16,0(sp)
    5134:	dfc00215 	stw	ra,8(sp)
    5138:	04400044 	movi	r17,1
    513c:	01400104 	movi	r5,4
    5140:	000d883a 	mov	r6,zero
    5144:	2021883a 	mov	r16,r4
    5148:	2200bb04 	addi	r8,r4,748
    514c:	200f883a 	mov	r7,r4
    5150:	10000526 	beq	r2,zero,5168 <__sinit+0x44>
    5154:	dfc00217 	ldw	ra,8(sp)
    5158:	dc400117 	ldw	r17,4(sp)
    515c:	dc000017 	ldw	r16,0(sp)
    5160:	dec00304 	addi	sp,sp,12
    5164:	f800283a 	ret
    5168:	21000117 	ldw	r4,4(r4)
    516c:	00800034 	movhi	r2,0
    5170:	10948204 	addi	r2,r2,21000
    5174:	00c000c4 	movi	r3,3
    5178:	80800f15 	stw	r2,60(r16)
    517c:	80c0b915 	stw	r3,740(r16)
    5180:	8200ba15 	stw	r8,744(r16)
    5184:	84400e15 	stw	r17,56(r16)
    5188:	8000b815 	stw	zero,736(r16)
    518c:	00050bc0 	call	50bc <std>
    5190:	81000217 	ldw	r4,8(r16)
    5194:	880d883a 	mov	r6,r17
    5198:	800f883a 	mov	r7,r16
    519c:	01400284 	movi	r5,10
    51a0:	00050bc0 	call	50bc <std>
    51a4:	81000317 	ldw	r4,12(r16)
    51a8:	800f883a 	mov	r7,r16
    51ac:	01400484 	movi	r5,18
    51b0:	01800084 	movi	r6,2
    51b4:	dfc00217 	ldw	ra,8(sp)
    51b8:	dc400117 	ldw	r17,4(sp)
    51bc:	dc000017 	ldw	r16,0(sp)
    51c0:	dec00304 	addi	sp,sp,12
    51c4:	00050bc1 	jmpi	50bc <std>

000051c8 <__fp_lock>:
    51c8:	0005883a 	mov	r2,zero
    51cc:	f800283a 	ret

000051d0 <__fp_unlock>:
    51d0:	0005883a 	mov	r2,zero
    51d4:	f800283a 	ret

000051d8 <__fp_unlock_all>:
    51d8:	00800074 	movhi	r2,1
    51dc:	10bcfe04 	addi	r2,r2,-3080
    51e0:	11000017 	ldw	r4,0(r2)
    51e4:	01400034 	movhi	r5,0
    51e8:	29547404 	addi	r5,r5,20944
    51ec:	0005d541 	jmpi	5d54 <_fwalk>

000051f0 <__fp_lock_all>:
    51f0:	00800074 	movhi	r2,1
    51f4:	10bcfe04 	addi	r2,r2,-3080
    51f8:	11000017 	ldw	r4,0(r2)
    51fc:	01400034 	movhi	r5,0
    5200:	29547204 	addi	r5,r5,20936
    5204:	0005d541 	jmpi	5d54 <_fwalk>

00005208 <_cleanup_r>:
    5208:	01400034 	movhi	r5,0
    520c:	295fc604 	addi	r5,r5,32536
    5210:	0005d541 	jmpi	5d54 <_fwalk>

00005214 <_cleanup>:
    5214:	00800074 	movhi	r2,1
    5218:	10bcff04 	addi	r2,r2,-3076
    521c:	11000017 	ldw	r4,0(r2)
    5220:	00052081 	jmpi	5208 <_cleanup_r>

00005224 <__sfmoreglue>:
    5224:	defffc04 	addi	sp,sp,-16
    5228:	dc000015 	stw	r16,0(sp)
    522c:	2821883a 	mov	r16,r5
    5230:	dc400115 	stw	r17,4(sp)
    5234:	01401704 	movi	r5,92
    5238:	2023883a 	mov	r17,r4
    523c:	8009883a 	mov	r4,r16
    5240:	dfc00315 	stw	ra,12(sp)
    5244:	dcc00215 	stw	r19,8(sp)
    5248:	0000c680 	call	c68 <__mulsi3>
    524c:	11400304 	addi	r5,r2,12
    5250:	8809883a 	mov	r4,r17
    5254:	1027883a 	mov	r19,r2
    5258:	0000cc80 	call	cc8 <_malloc_r>
    525c:	10c00304 	addi	r3,r2,12
    5260:	1023883a 	mov	r17,r2
    5264:	1809883a 	mov	r4,r3
    5268:	980d883a 	mov	r6,r19
    526c:	000b883a 	mov	r5,zero
    5270:	10000b26 	beq	r2,zero,52a0 <__sfmoreglue+0x7c>
    5274:	14000115 	stw	r16,4(r2)
    5278:	10c00215 	stw	r3,8(r2)
    527c:	10000015 	stw	zero,0(r2)
    5280:	00062c80 	call	62c8 <memset>
    5284:	8805883a 	mov	r2,r17
    5288:	dfc00317 	ldw	ra,12(sp)
    528c:	dcc00217 	ldw	r19,8(sp)
    5290:	dc400117 	ldw	r17,4(sp)
    5294:	dc000017 	ldw	r16,0(sp)
    5298:	dec00404 	addi	sp,sp,16
    529c:	f800283a 	ret
    52a0:	0023883a 	mov	r17,zero
    52a4:	8805883a 	mov	r2,r17
    52a8:	dfc00317 	ldw	ra,12(sp)
    52ac:	dcc00217 	ldw	r19,8(sp)
    52b0:	dc400117 	ldw	r17,4(sp)
    52b4:	dc000017 	ldw	r16,0(sp)
    52b8:	dec00404 	addi	sp,sp,16
    52bc:	f800283a 	ret

000052c0 <__sfp>:
    52c0:	defffd04 	addi	sp,sp,-12
    52c4:	00800074 	movhi	r2,1
    52c8:	10bcff04 	addi	r2,r2,-3076
    52cc:	dc000015 	stw	r16,0(sp)
    52d0:	14000017 	ldw	r16,0(r2)
    52d4:	dc400115 	stw	r17,4(sp)
    52d8:	dfc00215 	stw	ra,8(sp)
    52dc:	80800e17 	ldw	r2,56(r16)
    52e0:	2023883a 	mov	r17,r4
    52e4:	10002626 	beq	r2,zero,5380 <__sfp+0xc0>
    52e8:	8400b804 	addi	r16,r16,736
    52ec:	80800117 	ldw	r2,4(r16)
    52f0:	81000217 	ldw	r4,8(r16)
    52f4:	10ffffc4 	addi	r3,r2,-1
    52f8:	18000916 	blt	r3,zero,5320 <__sfp+0x60>
    52fc:	2080030f 	ldh	r2,12(r4)
    5300:	10000b26 	beq	r2,zero,5330 <__sfp+0x70>
    5304:	017fffc4 	movi	r5,-1
    5308:	00000206 	br	5314 <__sfp+0x54>
    530c:	2080030f 	ldh	r2,12(r4)
    5310:	10000726 	beq	r2,zero,5330 <__sfp+0x70>
    5314:	18ffffc4 	addi	r3,r3,-1
    5318:	21001704 	addi	r4,r4,92
    531c:	197ffb1e 	bne	r3,r5,530c <__sfp+0x4c>
    5320:	80800017 	ldw	r2,0(r16)
    5324:	10001926 	beq	r2,zero,538c <__sfp+0xcc>
    5328:	1021883a 	mov	r16,r2
    532c:	003fef06 	br	52ec <__sfp+0x2c>
    5330:	00bfffc4 	movi	r2,-1
    5334:	00c00044 	movi	r3,1
    5338:	2080038d 	sth	r2,14(r4)
    533c:	20c0030d 	sth	r3,12(r4)
    5340:	20000015 	stw	zero,0(r4)
    5344:	20000215 	stw	zero,8(r4)
    5348:	20000115 	stw	zero,4(r4)
    534c:	20000415 	stw	zero,16(r4)
    5350:	20000515 	stw	zero,20(r4)
    5354:	20000615 	stw	zero,24(r4)
    5358:	20000c15 	stw	zero,48(r4)
    535c:	20000d15 	stw	zero,52(r4)
    5360:	20001115 	stw	zero,68(r4)
    5364:	20001215 	stw	zero,72(r4)
    5368:	2005883a 	mov	r2,r4
    536c:	dfc00217 	ldw	ra,8(sp)
    5370:	dc400117 	ldw	r17,4(sp)
    5374:	dc000017 	ldw	r16,0(sp)
    5378:	dec00304 	addi	sp,sp,12
    537c:	f800283a 	ret
    5380:	8009883a 	mov	r4,r16
    5384:	00051240 	call	5124 <__sinit>
    5388:	003fd706 	br	52e8 <__sfp+0x28>
    538c:	8809883a 	mov	r4,r17
    5390:	01400104 	movi	r5,4
    5394:	00052240 	call	5224 <__sfmoreglue>
    5398:	80800015 	stw	r2,0(r16)
    539c:	103fe21e 	bne	r2,zero,5328 <__sfp+0x68>
    53a0:	00800304 	movi	r2,12
    53a4:	0009883a 	mov	r4,zero
    53a8:	88800015 	stw	r2,0(r17)
    53ac:	003fee06 	br	5368 <__sfp+0xa8>

000053b0 <_malloc_trim_r>:
    53b0:	defffb04 	addi	sp,sp,-20
    53b4:	dcc00315 	stw	r19,12(sp)
    53b8:	04c00074 	movhi	r19,1
    53bc:	9cf67404 	addi	r19,r19,-9776
    53c0:	dc800215 	stw	r18,8(sp)
    53c4:	dc400115 	stw	r17,4(sp)
    53c8:	dc000015 	stw	r16,0(sp)
    53cc:	2823883a 	mov	r17,r5
    53d0:	2025883a 	mov	r18,r4
    53d4:	dfc00415 	stw	ra,16(sp)
    53d8:	000ad980 	call	ad98 <__malloc_lock>
    53dc:	98800217 	ldw	r2,8(r19)
    53e0:	9009883a 	mov	r4,r18
    53e4:	000b883a 	mov	r5,zero
    53e8:	10c00117 	ldw	r3,4(r2)
    53ec:	00bfff04 	movi	r2,-4
    53f0:	18a0703a 	and	r16,r3,r2
    53f4:	8463c83a 	sub	r17,r16,r17
    53f8:	8c43fbc4 	addi	r17,r17,4079
    53fc:	8822d33a 	srli	r17,r17,12
    5400:	0083ffc4 	movi	r2,4095
    5404:	8c7fffc4 	addi	r17,r17,-1
    5408:	8822933a 	slli	r17,r17,12
    540c:	1440060e 	bge	r2,r17,5428 <_malloc_trim_r+0x78>
    5410:	00015340 	call	1534 <_sbrk_r>
    5414:	98c00217 	ldw	r3,8(r19)
    5418:	9009883a 	mov	r4,r18
    541c:	044bc83a 	sub	r5,zero,r17
    5420:	80c7883a 	add	r3,r16,r3
    5424:	10c00926 	beq	r2,r3,544c <_malloc_trim_r+0x9c>
    5428:	000adb80 	call	adb8 <__malloc_unlock>
    542c:	0005883a 	mov	r2,zero
    5430:	dfc00417 	ldw	ra,16(sp)
    5434:	dcc00317 	ldw	r19,12(sp)
    5438:	dc800217 	ldw	r18,8(sp)
    543c:	dc400117 	ldw	r17,4(sp)
    5440:	dc000017 	ldw	r16,0(sp)
    5444:	dec00504 	addi	sp,sp,20
    5448:	f800283a 	ret
    544c:	9009883a 	mov	r4,r18
    5450:	00015340 	call	1534 <_sbrk_r>
    5454:	844dc83a 	sub	r6,r16,r17
    5458:	00ffffc4 	movi	r3,-1
    545c:	9009883a 	mov	r4,r18
    5460:	000b883a 	mov	r5,zero
    5464:	01c00074 	movhi	r7,1
    5468:	39c3b404 	addi	r7,r7,3792
    546c:	31800054 	ori	r6,r6,1
    5470:	10c00926 	beq	r2,r3,5498 <_malloc_trim_r+0xe8>
    5474:	38800017 	ldw	r2,0(r7)
    5478:	98c00217 	ldw	r3,8(r19)
    547c:	9009883a 	mov	r4,r18
    5480:	1445c83a 	sub	r2,r2,r17
    5484:	38800015 	stw	r2,0(r7)
    5488:	19800115 	stw	r6,4(r3)
    548c:	000adb80 	call	adb8 <__malloc_unlock>
    5490:	00800044 	movi	r2,1
    5494:	003fe606 	br	5430 <_malloc_trim_r+0x80>
    5498:	00015340 	call	1534 <_sbrk_r>
    549c:	99800217 	ldw	r6,8(r19)
    54a0:	100f883a 	mov	r7,r2
    54a4:	9009883a 	mov	r4,r18
    54a8:	1187c83a 	sub	r3,r2,r6
    54ac:	008003c4 	movi	r2,15
    54b0:	19400054 	ori	r5,r3,1
    54b4:	10ffdc0e 	bge	r2,r3,5428 <_malloc_trim_r+0x78>
    54b8:	00800074 	movhi	r2,1
    54bc:	10bcfd04 	addi	r2,r2,-3084
    54c0:	10c00017 	ldw	r3,0(r2)
    54c4:	00800074 	movhi	r2,1
    54c8:	1083b404 	addi	r2,r2,3792
    54cc:	31400115 	stw	r5,4(r6)
    54d0:	38c7c83a 	sub	r3,r7,r3
    54d4:	10c00015 	stw	r3,0(r2)
    54d8:	003fd306 	br	5428 <_malloc_trim_r+0x78>

000054dc <_free_r>:
    54dc:	defffd04 	addi	sp,sp,-12
    54e0:	dc400115 	stw	r17,4(sp)
    54e4:	dc000015 	stw	r16,0(sp)
    54e8:	dfc00215 	stw	ra,8(sp)
    54ec:	2821883a 	mov	r16,r5
    54f0:	2023883a 	mov	r17,r4
    54f4:	28005a26 	beq	r5,zero,5660 <_free_r+0x184>
    54f8:	000ad980 	call	ad98 <__malloc_lock>
    54fc:	823ffe04 	addi	r8,r16,-8
    5500:	41400117 	ldw	r5,4(r8)
    5504:	00bfff84 	movi	r2,-2
    5508:	02800074 	movhi	r10,1
    550c:	52b67404 	addi	r10,r10,-9776
    5510:	288e703a 	and	r7,r5,r2
    5514:	41cd883a 	add	r6,r8,r7
    5518:	30c00117 	ldw	r3,4(r6)
    551c:	51000217 	ldw	r4,8(r10)
    5520:	00bfff04 	movi	r2,-4
    5524:	1892703a 	and	r9,r3,r2
    5528:	5017883a 	mov	r11,r10
    552c:	31006726 	beq	r6,r4,56cc <_free_r+0x1f0>
    5530:	2880004c 	andi	r2,r5,1
    5534:	1005003a 	cmpeq	r2,r2,zero
    5538:	32400115 	stw	r9,4(r6)
    553c:	10001a1e 	bne	r2,zero,55a8 <_free_r+0xcc>
    5540:	000b883a 	mov	r5,zero
    5544:	3247883a 	add	r3,r6,r9
    5548:	18800117 	ldw	r2,4(r3)
    554c:	1080004c 	andi	r2,r2,1
    5550:	1000231e 	bne	r2,zero,55e0 <_free_r+0x104>
    5554:	280ac03a 	cmpne	r5,r5,zero
    5558:	3a4f883a 	add	r7,r7,r9
    555c:	2800451e 	bne	r5,zero,5674 <_free_r+0x198>
    5560:	31000217 	ldw	r4,8(r6)
    5564:	00800074 	movhi	r2,1
    5568:	10b67604 	addi	r2,r2,-9768
    556c:	20807b26 	beq	r4,r2,575c <_free_r+0x280>
    5570:	30800317 	ldw	r2,12(r6)
    5574:	3a07883a 	add	r3,r7,r8
    5578:	19c00015 	stw	r7,0(r3)
    557c:	11000215 	stw	r4,8(r2)
    5580:	20800315 	stw	r2,12(r4)
    5584:	38800054 	ori	r2,r7,1
    5588:	40800115 	stw	r2,4(r8)
    558c:	28001a26 	beq	r5,zero,55f8 <_free_r+0x11c>
    5590:	8809883a 	mov	r4,r17
    5594:	dfc00217 	ldw	ra,8(sp)
    5598:	dc400117 	ldw	r17,4(sp)
    559c:	dc000017 	ldw	r16,0(sp)
    55a0:	dec00304 	addi	sp,sp,12
    55a4:	000adb81 	jmpi	adb8 <__malloc_unlock>
    55a8:	80bffe17 	ldw	r2,-8(r16)
    55ac:	50c00204 	addi	r3,r10,8
    55b0:	4091c83a 	sub	r8,r8,r2
    55b4:	41000217 	ldw	r4,8(r8)
    55b8:	388f883a 	add	r7,r7,r2
    55bc:	20c06126 	beq	r4,r3,5744 <_free_r+0x268>
    55c0:	40800317 	ldw	r2,12(r8)
    55c4:	3247883a 	add	r3,r6,r9
    55c8:	000b883a 	mov	r5,zero
    55cc:	11000215 	stw	r4,8(r2)
    55d0:	20800315 	stw	r2,12(r4)
    55d4:	18800117 	ldw	r2,4(r3)
    55d8:	1080004c 	andi	r2,r2,1
    55dc:	103fdd26 	beq	r2,zero,5554 <_free_r+0x78>
    55e0:	38800054 	ori	r2,r7,1
    55e4:	3a07883a 	add	r3,r7,r8
    55e8:	280ac03a 	cmpne	r5,r5,zero
    55ec:	40800115 	stw	r2,4(r8)
    55f0:	19c00015 	stw	r7,0(r3)
    55f4:	283fe61e 	bne	r5,zero,5590 <_free_r+0xb4>
    55f8:	00807fc4 	movi	r2,511
    55fc:	11c01f2e 	bgeu	r2,r7,567c <_free_r+0x1a0>
    5600:	3806d27a 	srli	r3,r7,9
    5604:	1800481e 	bne	r3,zero,5728 <_free_r+0x24c>
    5608:	3804d0fa 	srli	r2,r7,3
    560c:	100690fa 	slli	r3,r2,3
    5610:	1acd883a 	add	r6,r3,r11
    5614:	31400217 	ldw	r5,8(r6)
    5618:	31405926 	beq	r6,r5,5780 <_free_r+0x2a4>
    561c:	28800117 	ldw	r2,4(r5)
    5620:	00ffff04 	movi	r3,-4
    5624:	10c4703a 	and	r2,r2,r3
    5628:	3880022e 	bgeu	r7,r2,5634 <_free_r+0x158>
    562c:	29400217 	ldw	r5,8(r5)
    5630:	317ffa1e 	bne	r6,r5,561c <_free_r+0x140>
    5634:	29800317 	ldw	r6,12(r5)
    5638:	41800315 	stw	r6,12(r8)
    563c:	41400215 	stw	r5,8(r8)
    5640:	8809883a 	mov	r4,r17
    5644:	2a000315 	stw	r8,12(r5)
    5648:	32000215 	stw	r8,8(r6)
    564c:	dfc00217 	ldw	ra,8(sp)
    5650:	dc400117 	ldw	r17,4(sp)
    5654:	dc000017 	ldw	r16,0(sp)
    5658:	dec00304 	addi	sp,sp,12
    565c:	000adb81 	jmpi	adb8 <__malloc_unlock>
    5660:	dfc00217 	ldw	ra,8(sp)
    5664:	dc400117 	ldw	r17,4(sp)
    5668:	dc000017 	ldw	r16,0(sp)
    566c:	dec00304 	addi	sp,sp,12
    5670:	f800283a 	ret
    5674:	31000217 	ldw	r4,8(r6)
    5678:	003fbd06 	br	5570 <_free_r+0x94>
    567c:	3806d0fa 	srli	r3,r7,3
    5680:	00800044 	movi	r2,1
    5684:	51400117 	ldw	r5,4(r10)
    5688:	180890fa 	slli	r4,r3,3
    568c:	1807d0ba 	srai	r3,r3,2
    5690:	22c9883a 	add	r4,r4,r11
    5694:	21800217 	ldw	r6,8(r4)
    5698:	10c4983a 	sll	r2,r2,r3
    569c:	41000315 	stw	r4,12(r8)
    56a0:	41800215 	stw	r6,8(r8)
    56a4:	288ab03a 	or	r5,r5,r2
    56a8:	22000215 	stw	r8,8(r4)
    56ac:	8809883a 	mov	r4,r17
    56b0:	51400115 	stw	r5,4(r10)
    56b4:	32000315 	stw	r8,12(r6)
    56b8:	dfc00217 	ldw	ra,8(sp)
    56bc:	dc400117 	ldw	r17,4(sp)
    56c0:	dc000017 	ldw	r16,0(sp)
    56c4:	dec00304 	addi	sp,sp,12
    56c8:	000adb81 	jmpi	adb8 <__malloc_unlock>
    56cc:	2880004c 	andi	r2,r5,1
    56d0:	3a4d883a 	add	r6,r7,r9
    56d4:	1000071e 	bne	r2,zero,56f4 <_free_r+0x218>
    56d8:	80bffe17 	ldw	r2,-8(r16)
    56dc:	4091c83a 	sub	r8,r8,r2
    56e0:	41000317 	ldw	r4,12(r8)
    56e4:	40c00217 	ldw	r3,8(r8)
    56e8:	308d883a 	add	r6,r6,r2
    56ec:	20c00215 	stw	r3,8(r4)
    56f0:	19000315 	stw	r4,12(r3)
    56f4:	00800074 	movhi	r2,1
    56f8:	10bcfc04 	addi	r2,r2,-3088
    56fc:	11000017 	ldw	r4,0(r2)
    5700:	30c00054 	ori	r3,r6,1
    5704:	52000215 	stw	r8,8(r10)
    5708:	40c00115 	stw	r3,4(r8)
    570c:	313fa036 	bltu	r6,r4,5590 <_free_r+0xb4>
    5710:	00800074 	movhi	r2,1
    5714:	1083a704 	addi	r2,r2,3740
    5718:	11400017 	ldw	r5,0(r2)
    571c:	8809883a 	mov	r4,r17
    5720:	00053b00 	call	53b0 <_malloc_trim_r>
    5724:	003f9a06 	br	5590 <_free_r+0xb4>
    5728:	00800104 	movi	r2,4
    572c:	10c0072e 	bgeu	r2,r3,574c <_free_r+0x270>
    5730:	00800504 	movi	r2,20
    5734:	10c01936 	bltu	r2,r3,579c <_free_r+0x2c0>
    5738:	188016c4 	addi	r2,r3,91
    573c:	100690fa 	slli	r3,r2,3
    5740:	003fb306 	br	5610 <_free_r+0x134>
    5744:	01400044 	movi	r5,1
    5748:	003f7e06 	br	5544 <_free_r+0x68>
    574c:	3804d1ba 	srli	r2,r7,6
    5750:	10800e04 	addi	r2,r2,56
    5754:	100690fa 	slli	r3,r2,3
    5758:	003fad06 	br	5610 <_free_r+0x134>
    575c:	22000315 	stw	r8,12(r4)
    5760:	22000215 	stw	r8,8(r4)
    5764:	3a05883a 	add	r2,r7,r8
    5768:	38c00054 	ori	r3,r7,1
    576c:	11c00015 	stw	r7,0(r2)
    5770:	41000215 	stw	r4,8(r8)
    5774:	40c00115 	stw	r3,4(r8)
    5778:	41000315 	stw	r4,12(r8)
    577c:	003f8406 	br	5590 <_free_r+0xb4>
    5780:	1005d0ba 	srai	r2,r2,2
    5784:	00c00044 	movi	r3,1
    5788:	51000117 	ldw	r4,4(r10)
    578c:	1886983a 	sll	r3,r3,r2
    5790:	20c8b03a 	or	r4,r4,r3
    5794:	51000115 	stw	r4,4(r10)
    5798:	003fa706 	br	5638 <_free_r+0x15c>
    579c:	00801504 	movi	r2,84
    57a0:	10c00436 	bltu	r2,r3,57b4 <_free_r+0x2d8>
    57a4:	3804d33a 	srli	r2,r7,12
    57a8:	10801b84 	addi	r2,r2,110
    57ac:	100690fa 	slli	r3,r2,3
    57b0:	003f9706 	br	5610 <_free_r+0x134>
    57b4:	00805504 	movi	r2,340
    57b8:	10c00436 	bltu	r2,r3,57cc <_free_r+0x2f0>
    57bc:	3804d3fa 	srli	r2,r7,15
    57c0:	10801dc4 	addi	r2,r2,119
    57c4:	100690fa 	slli	r3,r2,3
    57c8:	003f9106 	br	5610 <_free_r+0x134>
    57cc:	00815504 	movi	r2,1364
    57d0:	10c0032e 	bgeu	r2,r3,57e0 <_free_r+0x304>
    57d4:	00801f84 	movi	r2,126
    57d8:	00c0fc04 	movi	r3,1008
    57dc:	003f8c06 	br	5610 <_free_r+0x134>
    57e0:	3804d4ba 	srli	r2,r7,18
    57e4:	10801f04 	addi	r2,r2,124
    57e8:	100690fa 	slli	r3,r2,3
    57ec:	003f8806 	br	5610 <_free_r+0x134>

000057f0 <__sfvwrite_r>:
    57f0:	30800217 	ldw	r2,8(r6)
    57f4:	defff504 	addi	sp,sp,-44
    57f8:	df000915 	stw	fp,36(sp)
    57fc:	dd800715 	stw	r22,28(sp)
    5800:	dc800315 	stw	r18,12(sp)
    5804:	dfc00a15 	stw	ra,40(sp)
    5808:	ddc00815 	stw	r23,32(sp)
    580c:	dd400615 	stw	r21,24(sp)
    5810:	dd000515 	stw	r20,20(sp)
    5814:	dcc00415 	stw	r19,16(sp)
    5818:	dc400215 	stw	r17,8(sp)
    581c:	dc000115 	stw	r16,4(sp)
    5820:	302d883a 	mov	r22,r6
    5824:	2039883a 	mov	fp,r4
    5828:	2825883a 	mov	r18,r5
    582c:	10001c26 	beq	r2,zero,58a0 <__sfvwrite_r+0xb0>
    5830:	29c0030b 	ldhu	r7,12(r5)
    5834:	3880020c 	andi	r2,r7,8
    5838:	10002726 	beq	r2,zero,58d8 <__sfvwrite_r+0xe8>
    583c:	28800417 	ldw	r2,16(r5)
    5840:	10002526 	beq	r2,zero,58d8 <__sfvwrite_r+0xe8>
    5844:	3880008c 	andi	r2,r7,2
    5848:	b5400017 	ldw	r21,0(r22)
    584c:	10002826 	beq	r2,zero,58f0 <__sfvwrite_r+0x100>
    5850:	0021883a 	mov	r16,zero
    5854:	0023883a 	mov	r17,zero
    5858:	880d883a 	mov	r6,r17
    585c:	e009883a 	mov	r4,fp
    5860:	00810004 	movi	r2,1024
    5864:	80006e26 	beq	r16,zero,5a20 <__sfvwrite_r+0x230>
    5868:	800f883a 	mov	r7,r16
    586c:	91400717 	ldw	r5,28(r18)
    5870:	1400012e 	bgeu	r2,r16,5878 <__sfvwrite_r+0x88>
    5874:	100f883a 	mov	r7,r2
    5878:	90c00917 	ldw	r3,36(r18)
    587c:	183ee83a 	callr	r3
    5880:	1007883a 	mov	r3,r2
    5884:	80a1c83a 	sub	r16,r16,r2
    5888:	88a3883a 	add	r17,r17,r2
    588c:	00806d0e 	bge	zero,r2,5a44 <__sfvwrite_r+0x254>
    5890:	b0800217 	ldw	r2,8(r22)
    5894:	10c5c83a 	sub	r2,r2,r3
    5898:	b0800215 	stw	r2,8(r22)
    589c:	103fee1e 	bne	r2,zero,5858 <__sfvwrite_r+0x68>
    58a0:	0009883a 	mov	r4,zero
    58a4:	2005883a 	mov	r2,r4
    58a8:	dfc00a17 	ldw	ra,40(sp)
    58ac:	df000917 	ldw	fp,36(sp)
    58b0:	ddc00817 	ldw	r23,32(sp)
    58b4:	dd800717 	ldw	r22,28(sp)
    58b8:	dd400617 	ldw	r21,24(sp)
    58bc:	dd000517 	ldw	r20,20(sp)
    58c0:	dcc00417 	ldw	r19,16(sp)
    58c4:	dc800317 	ldw	r18,12(sp)
    58c8:	dc400217 	ldw	r17,8(sp)
    58cc:	dc000117 	ldw	r16,4(sp)
    58d0:	dec00b04 	addi	sp,sp,44
    58d4:	f800283a 	ret
    58d8:	00035580 	call	3558 <__swsetup_r>
    58dc:	1000e41e 	bne	r2,zero,5c70 <__sfvwrite_r+0x480>
    58e0:	91c0030b 	ldhu	r7,12(r18)
    58e4:	b5400017 	ldw	r21,0(r22)
    58e8:	3880008c 	andi	r2,r7,2
    58ec:	103fd81e 	bne	r2,zero,5850 <__sfvwrite_r+0x60>
    58f0:	3880004c 	andi	r2,r7,1
    58f4:	1005003a 	cmpeq	r2,r2,zero
    58f8:	10005726 	beq	r2,zero,5a58 <__sfvwrite_r+0x268>
    58fc:	0029883a 	mov	r20,zero
    5900:	002f883a 	mov	r23,zero
    5904:	a0004226 	beq	r20,zero,5a10 <__sfvwrite_r+0x220>
    5908:	3880800c 	andi	r2,r7,512
    590c:	94000217 	ldw	r16,8(r18)
    5910:	10008b26 	beq	r2,zero,5b40 <__sfvwrite_r+0x350>
    5914:	800d883a 	mov	r6,r16
    5918:	a400a536 	bltu	r20,r16,5bb0 <__sfvwrite_r+0x3c0>
    591c:	3881200c 	andi	r2,r7,1152
    5920:	10002726 	beq	r2,zero,59c0 <__sfvwrite_r+0x1d0>
    5924:	90800517 	ldw	r2,20(r18)
    5928:	92000417 	ldw	r8,16(r18)
    592c:	91400017 	ldw	r5,0(r18)
    5930:	1087883a 	add	r3,r2,r2
    5934:	1887883a 	add	r3,r3,r2
    5938:	1808d7fa 	srli	r4,r3,31
    593c:	2a21c83a 	sub	r16,r5,r8
    5940:	80800044 	addi	r2,r16,1
    5944:	20c9883a 	add	r4,r4,r3
    5948:	2027d07a 	srai	r19,r4,1
    594c:	a085883a 	add	r2,r20,r2
    5950:	980d883a 	mov	r6,r19
    5954:	9880022e 	bgeu	r19,r2,5960 <__sfvwrite_r+0x170>
    5958:	1027883a 	mov	r19,r2
    595c:	100d883a 	mov	r6,r2
    5960:	3881000c 	andi	r2,r7,1024
    5964:	1000b826 	beq	r2,zero,5c48 <__sfvwrite_r+0x458>
    5968:	300b883a 	mov	r5,r6
    596c:	e009883a 	mov	r4,fp
    5970:	0000cc80 	call	cc8 <_malloc_r>
    5974:	10003126 	beq	r2,zero,5a3c <__sfvwrite_r+0x24c>
    5978:	91400417 	ldw	r5,16(r18)
    597c:	1009883a 	mov	r4,r2
    5980:	800d883a 	mov	r6,r16
    5984:	1023883a 	mov	r17,r2
    5988:	00061480 	call	6148 <memcpy>
    598c:	90c0030b 	ldhu	r3,12(r18)
    5990:	00beffc4 	movi	r2,-1025
    5994:	1886703a 	and	r3,r3,r2
    5998:	18c02014 	ori	r3,r3,128
    599c:	90c0030d 	sth	r3,12(r18)
    59a0:	9c07c83a 	sub	r3,r19,r16
    59a4:	8c05883a 	add	r2,r17,r16
    59a8:	a00d883a 	mov	r6,r20
    59ac:	a021883a 	mov	r16,r20
    59b0:	90800015 	stw	r2,0(r18)
    59b4:	90c00215 	stw	r3,8(r18)
    59b8:	94400415 	stw	r17,16(r18)
    59bc:	94c00515 	stw	r19,20(r18)
    59c0:	91000017 	ldw	r4,0(r18)
    59c4:	b80b883a 	mov	r5,r23
    59c8:	a023883a 	mov	r17,r20
    59cc:	00061e80 	call	61e8 <memmove>
    59d0:	90c00217 	ldw	r3,8(r18)
    59d4:	90800017 	ldw	r2,0(r18)
    59d8:	a027883a 	mov	r19,r20
    59dc:	1c07c83a 	sub	r3,r3,r16
    59e0:	1405883a 	add	r2,r2,r16
    59e4:	90c00215 	stw	r3,8(r18)
    59e8:	a021883a 	mov	r16,r20
    59ec:	90800015 	stw	r2,0(r18)
    59f0:	b0800217 	ldw	r2,8(r22)
    59f4:	1405c83a 	sub	r2,r2,r16
    59f8:	b0800215 	stw	r2,8(r22)
    59fc:	103fa826 	beq	r2,zero,58a0 <__sfvwrite_r+0xb0>
    5a00:	a469c83a 	sub	r20,r20,r17
    5a04:	91c0030b 	ldhu	r7,12(r18)
    5a08:	bcef883a 	add	r23,r23,r19
    5a0c:	a03fbe1e 	bne	r20,zero,5908 <__sfvwrite_r+0x118>
    5a10:	adc00017 	ldw	r23,0(r21)
    5a14:	ad000117 	ldw	r20,4(r21)
    5a18:	ad400204 	addi	r21,r21,8
    5a1c:	003fb906 	br	5904 <__sfvwrite_r+0x114>
    5a20:	ac400017 	ldw	r17,0(r21)
    5a24:	ac000117 	ldw	r16,4(r21)
    5a28:	ad400204 	addi	r21,r21,8
    5a2c:	003f8a06 	br	5858 <__sfvwrite_r+0x68>
    5a30:	91400417 	ldw	r5,16(r18)
    5a34:	e009883a 	mov	r4,fp
    5a38:	00054dc0 	call	54dc <_free_r>
    5a3c:	00800304 	movi	r2,12
    5a40:	e0800015 	stw	r2,0(fp)
    5a44:	9080030b 	ldhu	r2,12(r18)
    5a48:	013fffc4 	movi	r4,-1
    5a4c:	10801014 	ori	r2,r2,64
    5a50:	9080030d 	sth	r2,12(r18)
    5a54:	003f9306 	br	58a4 <__sfvwrite_r+0xb4>
    5a58:	0027883a 	mov	r19,zero
    5a5c:	002f883a 	mov	r23,zero
    5a60:	d8000015 	stw	zero,0(sp)
    5a64:	0029883a 	mov	r20,zero
    5a68:	98001e26 	beq	r19,zero,5ae4 <__sfvwrite_r+0x2f4>
    5a6c:	d8c00017 	ldw	r3,0(sp)
    5a70:	1804c03a 	cmpne	r2,r3,zero
    5a74:	10005e26 	beq	r2,zero,5bf0 <__sfvwrite_r+0x400>
    5a78:	9821883a 	mov	r16,r19
    5a7c:	a4c0012e 	bgeu	r20,r19,5a84 <__sfvwrite_r+0x294>
    5a80:	a021883a 	mov	r16,r20
    5a84:	91000017 	ldw	r4,0(r18)
    5a88:	90800417 	ldw	r2,16(r18)
    5a8c:	91800217 	ldw	r6,8(r18)
    5a90:	91c00517 	ldw	r7,20(r18)
    5a94:	1100022e 	bgeu	r2,r4,5aa0 <__sfvwrite_r+0x2b0>
    5a98:	31e3883a 	add	r17,r6,r7
    5a9c:	8c001616 	blt	r17,r16,5af8 <__sfvwrite_r+0x308>
    5aa0:	81c03816 	blt	r16,r7,5b84 <__sfvwrite_r+0x394>
    5aa4:	90c00917 	ldw	r3,36(r18)
    5aa8:	91400717 	ldw	r5,28(r18)
    5aac:	e009883a 	mov	r4,fp
    5ab0:	b80d883a 	mov	r6,r23
    5ab4:	183ee83a 	callr	r3
    5ab8:	1023883a 	mov	r17,r2
    5abc:	00bfe10e 	bge	zero,r2,5a44 <__sfvwrite_r+0x254>
    5ac0:	a469c83a 	sub	r20,r20,r17
    5ac4:	a0001826 	beq	r20,zero,5b28 <__sfvwrite_r+0x338>
    5ac8:	b0800217 	ldw	r2,8(r22)
    5acc:	1445c83a 	sub	r2,r2,r17
    5ad0:	b0800215 	stw	r2,8(r22)
    5ad4:	103f7226 	beq	r2,zero,58a0 <__sfvwrite_r+0xb0>
    5ad8:	9c67c83a 	sub	r19,r19,r17
    5adc:	bc6f883a 	add	r23,r23,r17
    5ae0:	983fe21e 	bne	r19,zero,5a6c <__sfvwrite_r+0x27c>
    5ae4:	adc00017 	ldw	r23,0(r21)
    5ae8:	acc00117 	ldw	r19,4(r21)
    5aec:	ad400204 	addi	r21,r21,8
    5af0:	d8000015 	stw	zero,0(sp)
    5af4:	003fdc06 	br	5a68 <__sfvwrite_r+0x278>
    5af8:	b80b883a 	mov	r5,r23
    5afc:	880d883a 	mov	r6,r17
    5b00:	00061e80 	call	61e8 <memmove>
    5b04:	90c00017 	ldw	r3,0(r18)
    5b08:	e009883a 	mov	r4,fp
    5b0c:	900b883a 	mov	r5,r18
    5b10:	1c47883a 	add	r3,r3,r17
    5b14:	90c00015 	stw	r3,0(r18)
    5b18:	0004e8c0 	call	4e8c <_fflush_r>
    5b1c:	103fc91e 	bne	r2,zero,5a44 <__sfvwrite_r+0x254>
    5b20:	a469c83a 	sub	r20,r20,r17
    5b24:	a03fe81e 	bne	r20,zero,5ac8 <__sfvwrite_r+0x2d8>
    5b28:	e009883a 	mov	r4,fp
    5b2c:	900b883a 	mov	r5,r18
    5b30:	0004e8c0 	call	4e8c <_fflush_r>
    5b34:	103fc31e 	bne	r2,zero,5a44 <__sfvwrite_r+0x254>
    5b38:	d8000015 	stw	zero,0(sp)
    5b3c:	003fe206 	br	5ac8 <__sfvwrite_r+0x2d8>
    5b40:	91000017 	ldw	r4,0(r18)
    5b44:	90800417 	ldw	r2,16(r18)
    5b48:	1100022e 	bgeu	r2,r4,5b54 <__sfvwrite_r+0x364>
    5b4c:	8023883a 	mov	r17,r16
    5b50:	85003136 	bltu	r16,r20,5c18 <__sfvwrite_r+0x428>
    5b54:	91c00517 	ldw	r7,20(r18)
    5b58:	a1c01836 	bltu	r20,r7,5bbc <__sfvwrite_r+0x3cc>
    5b5c:	90c00917 	ldw	r3,36(r18)
    5b60:	91400717 	ldw	r5,28(r18)
    5b64:	e009883a 	mov	r4,fp
    5b68:	b80d883a 	mov	r6,r23
    5b6c:	183ee83a 	callr	r3
    5b70:	1021883a 	mov	r16,r2
    5b74:	00bfb30e 	bge	zero,r2,5a44 <__sfvwrite_r+0x254>
    5b78:	1023883a 	mov	r17,r2
    5b7c:	1027883a 	mov	r19,r2
    5b80:	003f9b06 	br	59f0 <__sfvwrite_r+0x200>
    5b84:	b80b883a 	mov	r5,r23
    5b88:	800d883a 	mov	r6,r16
    5b8c:	00061e80 	call	61e8 <memmove>
    5b90:	90c00217 	ldw	r3,8(r18)
    5b94:	90800017 	ldw	r2,0(r18)
    5b98:	8023883a 	mov	r17,r16
    5b9c:	1c07c83a 	sub	r3,r3,r16
    5ba0:	1405883a 	add	r2,r2,r16
    5ba4:	90c00215 	stw	r3,8(r18)
    5ba8:	90800015 	stw	r2,0(r18)
    5bac:	003fc406 	br	5ac0 <__sfvwrite_r+0x2d0>
    5bb0:	a00d883a 	mov	r6,r20
    5bb4:	a021883a 	mov	r16,r20
    5bb8:	003f8106 	br	59c0 <__sfvwrite_r+0x1d0>
    5bbc:	b80b883a 	mov	r5,r23
    5bc0:	a00d883a 	mov	r6,r20
    5bc4:	00061e80 	call	61e8 <memmove>
    5bc8:	90c00217 	ldw	r3,8(r18)
    5bcc:	90800017 	ldw	r2,0(r18)
    5bd0:	a021883a 	mov	r16,r20
    5bd4:	1d07c83a 	sub	r3,r3,r20
    5bd8:	1505883a 	add	r2,r2,r20
    5bdc:	a023883a 	mov	r17,r20
    5be0:	a027883a 	mov	r19,r20
    5be4:	90c00215 	stw	r3,8(r18)
    5be8:	90800015 	stw	r2,0(r18)
    5bec:	003f8006 	br	59f0 <__sfvwrite_r+0x200>
    5bf0:	b809883a 	mov	r4,r23
    5bf4:	01400284 	movi	r5,10
    5bf8:	980d883a 	mov	r6,r19
    5bfc:	00060640 	call	6064 <memchr>
    5c00:	10001726 	beq	r2,zero,5c60 <__sfvwrite_r+0x470>
    5c04:	15c5c83a 	sub	r2,r2,r23
    5c08:	15000044 	addi	r20,r2,1
    5c0c:	00800044 	movi	r2,1
    5c10:	d8800015 	stw	r2,0(sp)
    5c14:	003f9806 	br	5a78 <__sfvwrite_r+0x288>
    5c18:	b80b883a 	mov	r5,r23
    5c1c:	800d883a 	mov	r6,r16
    5c20:	00061e80 	call	61e8 <memmove>
    5c24:	90c00017 	ldw	r3,0(r18)
    5c28:	e009883a 	mov	r4,fp
    5c2c:	900b883a 	mov	r5,r18
    5c30:	1c07883a 	add	r3,r3,r16
    5c34:	90c00015 	stw	r3,0(r18)
    5c38:	8027883a 	mov	r19,r16
    5c3c:	0004e8c0 	call	4e8c <_fflush_r>
    5c40:	103f6b26 	beq	r2,zero,59f0 <__sfvwrite_r+0x200>
    5c44:	003f7f06 	br	5a44 <__sfvwrite_r+0x254>
    5c48:	400b883a 	mov	r5,r8
    5c4c:	e009883a 	mov	r4,fp
    5c50:	00073ec0 	call	73ec <_realloc_r>
    5c54:	103f7626 	beq	r2,zero,5a30 <__sfvwrite_r+0x240>
    5c58:	1023883a 	mov	r17,r2
    5c5c:	003f5006 	br	59a0 <__sfvwrite_r+0x1b0>
    5c60:	00c00044 	movi	r3,1
    5c64:	9d000044 	addi	r20,r19,1
    5c68:	d8c00015 	stw	r3,0(sp)
    5c6c:	003f8206 	br	5a78 <__sfvwrite_r+0x288>
    5c70:	9080030b 	ldhu	r2,12(r18)
    5c74:	00c00244 	movi	r3,9
    5c78:	013fffc4 	movi	r4,-1
    5c7c:	10801014 	ori	r2,r2,64
    5c80:	9080030d 	sth	r2,12(r18)
    5c84:	e0c00015 	stw	r3,0(fp)
    5c88:	003f0606 	br	58a4 <__sfvwrite_r+0xb4>

00005c8c <_fwalk_reent>:
    5c8c:	defff704 	addi	sp,sp,-36
    5c90:	dcc00315 	stw	r19,12(sp)
    5c94:	24c0b804 	addi	r19,r4,736
    5c98:	dd800615 	stw	r22,24(sp)
    5c9c:	dd400515 	stw	r21,20(sp)
    5ca0:	dfc00815 	stw	ra,32(sp)
    5ca4:	ddc00715 	stw	r23,28(sp)
    5ca8:	dd000415 	stw	r20,16(sp)
    5cac:	dc800215 	stw	r18,8(sp)
    5cb0:	dc400115 	stw	r17,4(sp)
    5cb4:	dc000015 	stw	r16,0(sp)
    5cb8:	202b883a 	mov	r21,r4
    5cbc:	282d883a 	mov	r22,r5
    5cc0:	00051140 	call	5114 <__sfp_lock_acquire>
    5cc4:	98002126 	beq	r19,zero,5d4c <_fwalk_reent+0xc0>
    5cc8:	002f883a 	mov	r23,zero
    5ccc:	9c800117 	ldw	r18,4(r19)
    5cd0:	9c000217 	ldw	r16,8(r19)
    5cd4:	90bfffc4 	addi	r2,r18,-1
    5cd8:	10000d16 	blt	r2,zero,5d10 <_fwalk_reent+0x84>
    5cdc:	0023883a 	mov	r17,zero
    5ce0:	053fffc4 	movi	r20,-1
    5ce4:	8080030f 	ldh	r2,12(r16)
    5ce8:	8c400044 	addi	r17,r17,1
    5cec:	10000626 	beq	r2,zero,5d08 <_fwalk_reent+0x7c>
    5cf0:	8080038f 	ldh	r2,14(r16)
    5cf4:	800b883a 	mov	r5,r16
    5cf8:	a809883a 	mov	r4,r21
    5cfc:	15000226 	beq	r2,r20,5d08 <_fwalk_reent+0x7c>
    5d00:	b03ee83a 	callr	r22
    5d04:	b8aeb03a 	or	r23,r23,r2
    5d08:	84001704 	addi	r16,r16,92
    5d0c:	947ff51e 	bne	r18,r17,5ce4 <_fwalk_reent+0x58>
    5d10:	9cc00017 	ldw	r19,0(r19)
    5d14:	983fed1e 	bne	r19,zero,5ccc <_fwalk_reent+0x40>
    5d18:	00051180 	call	5118 <__sfp_lock_release>
    5d1c:	b805883a 	mov	r2,r23
    5d20:	dfc00817 	ldw	ra,32(sp)
    5d24:	ddc00717 	ldw	r23,28(sp)
    5d28:	dd800617 	ldw	r22,24(sp)
    5d2c:	dd400517 	ldw	r21,20(sp)
    5d30:	dd000417 	ldw	r20,16(sp)
    5d34:	dcc00317 	ldw	r19,12(sp)
    5d38:	dc800217 	ldw	r18,8(sp)
    5d3c:	dc400117 	ldw	r17,4(sp)
    5d40:	dc000017 	ldw	r16,0(sp)
    5d44:	dec00904 	addi	sp,sp,36
    5d48:	f800283a 	ret
    5d4c:	002f883a 	mov	r23,zero
    5d50:	003ff106 	br	5d18 <_fwalk_reent+0x8c>

00005d54 <_fwalk>:
    5d54:	defff804 	addi	sp,sp,-32
    5d58:	dcc00315 	stw	r19,12(sp)
    5d5c:	24c0b804 	addi	r19,r4,736
    5d60:	dd400515 	stw	r21,20(sp)
    5d64:	dfc00715 	stw	ra,28(sp)
    5d68:	dd800615 	stw	r22,24(sp)
    5d6c:	dd000415 	stw	r20,16(sp)
    5d70:	dc800215 	stw	r18,8(sp)
    5d74:	dc400115 	stw	r17,4(sp)
    5d78:	dc000015 	stw	r16,0(sp)
    5d7c:	282b883a 	mov	r21,r5
    5d80:	00051140 	call	5114 <__sfp_lock_acquire>
    5d84:	98001f26 	beq	r19,zero,5e04 <_fwalk+0xb0>
    5d88:	002d883a 	mov	r22,zero
    5d8c:	9c800117 	ldw	r18,4(r19)
    5d90:	9c000217 	ldw	r16,8(r19)
    5d94:	90bfffc4 	addi	r2,r18,-1
    5d98:	10000c16 	blt	r2,zero,5dcc <_fwalk+0x78>
    5d9c:	0023883a 	mov	r17,zero
    5da0:	053fffc4 	movi	r20,-1
    5da4:	8080030f 	ldh	r2,12(r16)
    5da8:	8c400044 	addi	r17,r17,1
    5dac:	10000526 	beq	r2,zero,5dc4 <_fwalk+0x70>
    5db0:	8080038f 	ldh	r2,14(r16)
    5db4:	8009883a 	mov	r4,r16
    5db8:	15000226 	beq	r2,r20,5dc4 <_fwalk+0x70>
    5dbc:	a83ee83a 	callr	r21
    5dc0:	b0acb03a 	or	r22,r22,r2
    5dc4:	84001704 	addi	r16,r16,92
    5dc8:	947ff61e 	bne	r18,r17,5da4 <_fwalk+0x50>
    5dcc:	9cc00017 	ldw	r19,0(r19)
    5dd0:	983fee1e 	bne	r19,zero,5d8c <_fwalk+0x38>
    5dd4:	00051180 	call	5118 <__sfp_lock_release>
    5dd8:	b005883a 	mov	r2,r22
    5ddc:	dfc00717 	ldw	ra,28(sp)
    5de0:	dd800617 	ldw	r22,24(sp)
    5de4:	dd400517 	ldw	r21,20(sp)
    5de8:	dd000417 	ldw	r20,16(sp)
    5dec:	dcc00317 	ldw	r19,12(sp)
    5df0:	dc800217 	ldw	r18,8(sp)
    5df4:	dc400117 	ldw	r17,4(sp)
    5df8:	dc000017 	ldw	r16,0(sp)
    5dfc:	dec00804 	addi	sp,sp,32
    5e00:	f800283a 	ret
    5e04:	002d883a 	mov	r22,zero
    5e08:	003ff206 	br	5dd4 <_fwalk+0x80>

00005e0c <__locale_charset>:
    5e0c:	d0a00617 	ldw	r2,-32744(gp)
    5e10:	f800283a 	ret

00005e14 <_localeconv_r>:
    5e14:	00800074 	movhi	r2,1
    5e18:	10b5cf04 	addi	r2,r2,-10436
    5e1c:	f800283a 	ret

00005e20 <localeconv>:
    5e20:	00800074 	movhi	r2,1
    5e24:	10bcfe04 	addi	r2,r2,-3080
    5e28:	11000017 	ldw	r4,0(r2)
    5e2c:	0005e141 	jmpi	5e14 <_localeconv_r>

00005e30 <_setlocale_r>:
    5e30:	defffc04 	addi	sp,sp,-16
    5e34:	00c00074 	movhi	r3,1
    5e38:	18f5ca04 	addi	r3,r3,-10456
    5e3c:	dc800215 	stw	r18,8(sp)
    5e40:	dc400115 	stw	r17,4(sp)
    5e44:	dc000015 	stw	r16,0(sp)
    5e48:	2023883a 	mov	r17,r4
    5e4c:	2825883a 	mov	r18,r5
    5e50:	dfc00315 	stw	ra,12(sp)
    5e54:	3021883a 	mov	r16,r6
    5e58:	3009883a 	mov	r4,r6
    5e5c:	180b883a 	mov	r5,r3
    5e60:	30000926 	beq	r6,zero,5e88 <_setlocale_r+0x58>
    5e64:	0007b9c0 	call	7b9c <strcmp>
    5e68:	8009883a 	mov	r4,r16
    5e6c:	01400074 	movhi	r5,1
    5e70:	2975b504 	addi	r5,r5,-10540
    5e74:	10000b1e 	bne	r2,zero,5ea4 <_setlocale_r+0x74>
    5e78:	8c000d15 	stw	r16,52(r17)
    5e7c:	8c800c15 	stw	r18,48(r17)
    5e80:	00c00074 	movhi	r3,1
    5e84:	18f5ca04 	addi	r3,r3,-10456
    5e88:	1805883a 	mov	r2,r3
    5e8c:	dfc00317 	ldw	ra,12(sp)
    5e90:	dc800217 	ldw	r18,8(sp)
    5e94:	dc400117 	ldw	r17,4(sp)
    5e98:	dc000017 	ldw	r16,0(sp)
    5e9c:	dec00404 	addi	sp,sp,16
    5ea0:	f800283a 	ret
    5ea4:	0007b9c0 	call	7b9c <strcmp>
    5ea8:	0007883a 	mov	r3,zero
    5eac:	103ff226 	beq	r2,zero,5e78 <_setlocale_r+0x48>
    5eb0:	003ff506 	br	5e88 <_setlocale_r+0x58>

00005eb4 <setlocale>:
    5eb4:	01800074 	movhi	r6,1
    5eb8:	31bcfe04 	addi	r6,r6,-3080
    5ebc:	2007883a 	mov	r3,r4
    5ec0:	31000017 	ldw	r4,0(r6)
    5ec4:	280d883a 	mov	r6,r5
    5ec8:	180b883a 	mov	r5,r3
    5ecc:	0005e301 	jmpi	5e30 <_setlocale_r>

00005ed0 <__smakebuf_r>:
    5ed0:	2880030b 	ldhu	r2,12(r5)
    5ed4:	deffed04 	addi	sp,sp,-76
    5ed8:	dc401015 	stw	r17,64(sp)
    5edc:	1080008c 	andi	r2,r2,2
    5ee0:	dc000f15 	stw	r16,60(sp)
    5ee4:	dfc01215 	stw	ra,72(sp)
    5ee8:	dc801115 	stw	r18,68(sp)
    5eec:	2821883a 	mov	r16,r5
    5ef0:	2023883a 	mov	r17,r4
    5ef4:	10000b26 	beq	r2,zero,5f24 <__smakebuf_r+0x54>
    5ef8:	28c010c4 	addi	r3,r5,67
    5efc:	00800044 	movi	r2,1
    5f00:	28800515 	stw	r2,20(r5)
    5f04:	28c00415 	stw	r3,16(r5)
    5f08:	28c00015 	stw	r3,0(r5)
    5f0c:	dfc01217 	ldw	ra,72(sp)
    5f10:	dc801117 	ldw	r18,68(sp)
    5f14:	dc401017 	ldw	r17,64(sp)
    5f18:	dc000f17 	ldw	r16,60(sp)
    5f1c:	dec01304 	addi	sp,sp,76
    5f20:	f800283a 	ret
    5f24:	2940038f 	ldh	r5,14(r5)
    5f28:	28002116 	blt	r5,zero,5fb0 <__smakebuf_r+0xe0>
    5f2c:	d80d883a 	mov	r6,sp
    5f30:	0007f2c0 	call	7f2c <_fstat_r>
    5f34:	10001e16 	blt	r2,zero,5fb0 <__smakebuf_r+0xe0>
    5f38:	d8800117 	ldw	r2,4(sp)
    5f3c:	00e00014 	movui	r3,32768
    5f40:	113c000c 	andi	r4,r2,61440
    5f44:	20c03126 	beq	r4,r3,600c <__smakebuf_r+0x13c>
    5f48:	8080030b 	ldhu	r2,12(r16)
    5f4c:	00c80004 	movi	r3,8192
    5f50:	10820014 	ori	r2,r2,2048
    5f54:	8080030d 	sth	r2,12(r16)
    5f58:	20c01e26 	beq	r4,r3,5fd4 <__smakebuf_r+0x104>
    5f5c:	04810004 	movi	r18,1024
    5f60:	8809883a 	mov	r4,r17
    5f64:	900b883a 	mov	r5,r18
    5f68:	0000cc80 	call	cc8 <_malloc_r>
    5f6c:	1009883a 	mov	r4,r2
    5f70:	10003126 	beq	r2,zero,6038 <__smakebuf_r+0x168>
    5f74:	80c0030b 	ldhu	r3,12(r16)
    5f78:	00800034 	movhi	r2,0
    5f7c:	10948204 	addi	r2,r2,21000
    5f80:	88800f15 	stw	r2,60(r17)
    5f84:	18c02014 	ori	r3,r3,128
    5f88:	84800515 	stw	r18,20(r16)
    5f8c:	80c0030d 	sth	r3,12(r16)
    5f90:	81000415 	stw	r4,16(r16)
    5f94:	81000015 	stw	r4,0(r16)
    5f98:	dfc01217 	ldw	ra,72(sp)
    5f9c:	dc801117 	ldw	r18,68(sp)
    5fa0:	dc401017 	ldw	r17,64(sp)
    5fa4:	dc000f17 	ldw	r16,60(sp)
    5fa8:	dec01304 	addi	sp,sp,76
    5fac:	f800283a 	ret
    5fb0:	80c0030b 	ldhu	r3,12(r16)
    5fb4:	1880200c 	andi	r2,r3,128
    5fb8:	10000426 	beq	r2,zero,5fcc <__smakebuf_r+0xfc>
    5fbc:	04801004 	movi	r18,64
    5fc0:	18820014 	ori	r2,r3,2048
    5fc4:	8080030d 	sth	r2,12(r16)
    5fc8:	003fe506 	br	5f60 <__smakebuf_r+0x90>
    5fcc:	04810004 	movi	r18,1024
    5fd0:	003ffb06 	br	5fc0 <__smakebuf_r+0xf0>
    5fd4:	8140038f 	ldh	r5,14(r16)
    5fd8:	8809883a 	mov	r4,r17
    5fdc:	0007fa00 	call	7fa0 <_isatty_r>
    5fe0:	103fde26 	beq	r2,zero,5f5c <__smakebuf_r+0x8c>
    5fe4:	8080030b 	ldhu	r2,12(r16)
    5fe8:	80c010c4 	addi	r3,r16,67
    5fec:	04810004 	movi	r18,1024
    5ff0:	10800054 	ori	r2,r2,1
    5ff4:	8080030d 	sth	r2,12(r16)
    5ff8:	00800044 	movi	r2,1
    5ffc:	80c00415 	stw	r3,16(r16)
    6000:	80800515 	stw	r2,20(r16)
    6004:	80c00015 	stw	r3,0(r16)
    6008:	003fd506 	br	5f60 <__smakebuf_r+0x90>
    600c:	80c00a17 	ldw	r3,40(r16)
    6010:	00800034 	movhi	r2,0
    6014:	109e9604 	addi	r2,r2,31320
    6018:	18bfcb1e 	bne	r3,r2,5f48 <__smakebuf_r+0x78>
    601c:	8080030b 	ldhu	r2,12(r16)
    6020:	00c10004 	movi	r3,1024
    6024:	1825883a 	mov	r18,r3
    6028:	10c4b03a 	or	r2,r2,r3
    602c:	8080030d 	sth	r2,12(r16)
    6030:	80c01315 	stw	r3,76(r16)
    6034:	003fca06 	br	5f60 <__smakebuf_r+0x90>
    6038:	8100030b 	ldhu	r4,12(r16)
    603c:	2080800c 	andi	r2,r4,512
    6040:	103fb21e 	bne	r2,zero,5f0c <__smakebuf_r+0x3c>
    6044:	80c010c4 	addi	r3,r16,67
    6048:	21000094 	ori	r4,r4,2
    604c:	00800044 	movi	r2,1
    6050:	80800515 	stw	r2,20(r16)
    6054:	8100030d 	sth	r4,12(r16)
    6058:	80c00415 	stw	r3,16(r16)
    605c:	80c00015 	stw	r3,0(r16)
    6060:	003faa06 	br	5f0c <__smakebuf_r+0x3c>

00006064 <memchr>:
    6064:	008000c4 	movi	r2,3
    6068:	29403fcc 	andi	r5,r5,255
    606c:	2007883a 	mov	r3,r4
    6070:	1180022e 	bgeu	r2,r6,607c <memchr+0x18>
    6074:	2084703a 	and	r2,r4,r2
    6078:	10000b26 	beq	r2,zero,60a8 <memchr+0x44>
    607c:	313fffc4 	addi	r4,r6,-1
    6080:	3000051e 	bne	r6,zero,6098 <memchr+0x34>
    6084:	00002c06 	br	6138 <memchr+0xd4>
    6088:	213fffc4 	addi	r4,r4,-1
    608c:	00bfffc4 	movi	r2,-1
    6090:	18c00044 	addi	r3,r3,1
    6094:	20802826 	beq	r4,r2,6138 <memchr+0xd4>
    6098:	18800003 	ldbu	r2,0(r3)
    609c:	28bffa1e 	bne	r5,r2,6088 <memchr+0x24>
    60a0:	1805883a 	mov	r2,r3
    60a4:	f800283a 	ret
    60a8:	0011883a 	mov	r8,zero
    60ac:	0007883a 	mov	r3,zero
    60b0:	01c00104 	movi	r7,4
    60b4:	4004923a 	slli	r2,r8,8
    60b8:	18c00044 	addi	r3,r3,1
    60bc:	1151883a 	add	r8,r2,r5
    60c0:	19fffc1e 	bne	r3,r7,60b4 <memchr+0x50>
    60c4:	02bfbff4 	movhi	r10,65279
    60c8:	52bfbfc4 	addi	r10,r10,-257
    60cc:	02602074 	movhi	r9,32897
    60d0:	4a602004 	addi	r9,r9,-32640
    60d4:	02c000c4 	movi	r11,3
    60d8:	20800017 	ldw	r2,0(r4)
    60dc:	31bfff04 	addi	r6,r6,-4
    60e0:	200f883a 	mov	r7,r4
    60e4:	1204f03a 	xor	r2,r2,r8
    60e8:	1287883a 	add	r3,r2,r10
    60ec:	1a46703a 	and	r3,r3,r9
    60f0:	0084303a 	nor	r2,zero,r2
    60f4:	10c4703a 	and	r2,r2,r3
    60f8:	10000b26 	beq	r2,zero,6128 <memchr+0xc4>
    60fc:	20800003 	ldbu	r2,0(r4)
    6100:	28800f26 	beq	r5,r2,6140 <memchr+0xdc>
    6104:	20800043 	ldbu	r2,1(r4)
    6108:	21c00044 	addi	r7,r4,1
    610c:	28800c26 	beq	r5,r2,6140 <memchr+0xdc>
    6110:	20800083 	ldbu	r2,2(r4)
    6114:	21c00084 	addi	r7,r4,2
    6118:	28800926 	beq	r5,r2,6140 <memchr+0xdc>
    611c:	208000c3 	ldbu	r2,3(r4)
    6120:	21c000c4 	addi	r7,r4,3
    6124:	28800626 	beq	r5,r2,6140 <memchr+0xdc>
    6128:	21000104 	addi	r4,r4,4
    612c:	59bfea36 	bltu	r11,r6,60d8 <memchr+0x74>
    6130:	2007883a 	mov	r3,r4
    6134:	003fd106 	br	607c <memchr+0x18>
    6138:	0005883a 	mov	r2,zero
    613c:	f800283a 	ret
    6140:	3805883a 	mov	r2,r7
    6144:	f800283a 	ret

00006148 <memcpy>:
    6148:	01c003c4 	movi	r7,15
    614c:	2007883a 	mov	r3,r4
    6150:	3980032e 	bgeu	r7,r6,6160 <memcpy+0x18>
    6154:	2904b03a 	or	r2,r5,r4
    6158:	108000cc 	andi	r2,r2,3
    615c:	10000926 	beq	r2,zero,6184 <memcpy+0x3c>
    6160:	30000626 	beq	r6,zero,617c <memcpy+0x34>
    6164:	30cd883a 	add	r6,r6,r3
    6168:	28800003 	ldbu	r2,0(r5)
    616c:	29400044 	addi	r5,r5,1
    6170:	18800005 	stb	r2,0(r3)
    6174:	18c00044 	addi	r3,r3,1
    6178:	30fffb1e 	bne	r6,r3,6168 <memcpy+0x20>
    617c:	2005883a 	mov	r2,r4
    6180:	f800283a 	ret
    6184:	3811883a 	mov	r8,r7
    6188:	200f883a 	mov	r7,r4
    618c:	28c00017 	ldw	r3,0(r5)
    6190:	31bffc04 	addi	r6,r6,-16
    6194:	38c00015 	stw	r3,0(r7)
    6198:	28800117 	ldw	r2,4(r5)
    619c:	38800115 	stw	r2,4(r7)
    61a0:	28c00217 	ldw	r3,8(r5)
    61a4:	38c00215 	stw	r3,8(r7)
    61a8:	28800317 	ldw	r2,12(r5)
    61ac:	29400404 	addi	r5,r5,16
    61b0:	38800315 	stw	r2,12(r7)
    61b4:	39c00404 	addi	r7,r7,16
    61b8:	41bff436 	bltu	r8,r6,618c <memcpy+0x44>
    61bc:	008000c4 	movi	r2,3
    61c0:	1180072e 	bgeu	r2,r6,61e0 <memcpy+0x98>
    61c4:	1007883a 	mov	r3,r2
    61c8:	28800017 	ldw	r2,0(r5)
    61cc:	31bfff04 	addi	r6,r6,-4
    61d0:	29400104 	addi	r5,r5,4
    61d4:	38800015 	stw	r2,0(r7)
    61d8:	39c00104 	addi	r7,r7,4
    61dc:	19bffa36 	bltu	r3,r6,61c8 <memcpy+0x80>
    61e0:	3807883a 	mov	r3,r7
    61e4:	003fde06 	br	6160 <memcpy+0x18>

000061e8 <memmove>:
    61e8:	2807883a 	mov	r3,r5
    61ec:	2011883a 	mov	r8,r4
    61f0:	29000c2e 	bgeu	r5,r4,6224 <memmove+0x3c>
    61f4:	298f883a 	add	r7,r5,r6
    61f8:	21c00a2e 	bgeu	r4,r7,6224 <memmove+0x3c>
    61fc:	30000726 	beq	r6,zero,621c <memmove+0x34>
    6200:	2187883a 	add	r3,r4,r6
    6204:	198dc83a 	sub	r6,r3,r6
    6208:	39ffffc4 	addi	r7,r7,-1
    620c:	38800003 	ldbu	r2,0(r7)
    6210:	18ffffc4 	addi	r3,r3,-1
    6214:	18800005 	stb	r2,0(r3)
    6218:	19bffb1e 	bne	r3,r6,6208 <memmove+0x20>
    621c:	2005883a 	mov	r2,r4
    6220:	f800283a 	ret
    6224:	01c003c4 	movi	r7,15
    6228:	39800a36 	bltu	r7,r6,6254 <memmove+0x6c>
    622c:	303ffb26 	beq	r6,zero,621c <memmove+0x34>
    6230:	400f883a 	mov	r7,r8
    6234:	320d883a 	add	r6,r6,r8
    6238:	28800003 	ldbu	r2,0(r5)
    623c:	29400044 	addi	r5,r5,1
    6240:	38800005 	stb	r2,0(r7)
    6244:	39c00044 	addi	r7,r7,1
    6248:	39bffb1e 	bne	r7,r6,6238 <memmove+0x50>
    624c:	2005883a 	mov	r2,r4
    6250:	f800283a 	ret
    6254:	1904b03a 	or	r2,r3,r4
    6258:	108000cc 	andi	r2,r2,3
    625c:	103ff31e 	bne	r2,zero,622c <memmove+0x44>
    6260:	3811883a 	mov	r8,r7
    6264:	180b883a 	mov	r5,r3
    6268:	200f883a 	mov	r7,r4
    626c:	28c00017 	ldw	r3,0(r5)
    6270:	31bffc04 	addi	r6,r6,-16
    6274:	38c00015 	stw	r3,0(r7)
    6278:	28800117 	ldw	r2,4(r5)
    627c:	38800115 	stw	r2,4(r7)
    6280:	28c00217 	ldw	r3,8(r5)
    6284:	38c00215 	stw	r3,8(r7)
    6288:	28800317 	ldw	r2,12(r5)
    628c:	29400404 	addi	r5,r5,16
    6290:	38800315 	stw	r2,12(r7)
    6294:	39c00404 	addi	r7,r7,16
    6298:	41bff436 	bltu	r8,r6,626c <memmove+0x84>
    629c:	008000c4 	movi	r2,3
    62a0:	1180072e 	bgeu	r2,r6,62c0 <memmove+0xd8>
    62a4:	1007883a 	mov	r3,r2
    62a8:	28800017 	ldw	r2,0(r5)
    62ac:	31bfff04 	addi	r6,r6,-4
    62b0:	29400104 	addi	r5,r5,4
    62b4:	38800015 	stw	r2,0(r7)
    62b8:	39c00104 	addi	r7,r7,4
    62bc:	19bffa36 	bltu	r3,r6,62a8 <memmove+0xc0>
    62c0:	3811883a 	mov	r8,r7
    62c4:	003fd906 	br	622c <memmove+0x44>

000062c8 <memset>:
    62c8:	008000c4 	movi	r2,3
    62cc:	29403fcc 	andi	r5,r5,255
    62d0:	2007883a 	mov	r3,r4
    62d4:	1180022e 	bgeu	r2,r6,62e0 <memset+0x18>
    62d8:	2084703a 	and	r2,r4,r2
    62dc:	10000826 	beq	r2,zero,6300 <memset+0x38>
    62e0:	30000526 	beq	r6,zero,62f8 <memset+0x30>
    62e4:	2805883a 	mov	r2,r5
    62e8:	30cd883a 	add	r6,r6,r3
    62ec:	18800005 	stb	r2,0(r3)
    62f0:	18c00044 	addi	r3,r3,1
    62f4:	19bffd1e 	bne	r3,r6,62ec <memset+0x24>
    62f8:	2005883a 	mov	r2,r4
    62fc:	f800283a 	ret
    6300:	2804923a 	slli	r2,r5,8
    6304:	020003c4 	movi	r8,15
    6308:	200f883a 	mov	r7,r4
    630c:	2884b03a 	or	r2,r5,r2
    6310:	1006943a 	slli	r3,r2,16
    6314:	10c6b03a 	or	r3,r2,r3
    6318:	41800a2e 	bgeu	r8,r6,6344 <memset+0x7c>
    631c:	4005883a 	mov	r2,r8
    6320:	31bffc04 	addi	r6,r6,-16
    6324:	38c00015 	stw	r3,0(r7)
    6328:	38c00115 	stw	r3,4(r7)
    632c:	38c00215 	stw	r3,8(r7)
    6330:	38c00315 	stw	r3,12(r7)
    6334:	39c00404 	addi	r7,r7,16
    6338:	11bff936 	bltu	r2,r6,6320 <memset+0x58>
    633c:	008000c4 	movi	r2,3
    6340:	1180052e 	bgeu	r2,r6,6358 <memset+0x90>
    6344:	31bfff04 	addi	r6,r6,-4
    6348:	008000c4 	movi	r2,3
    634c:	38c00015 	stw	r3,0(r7)
    6350:	39c00104 	addi	r7,r7,4
    6354:	11bffb36 	bltu	r2,r6,6344 <memset+0x7c>
    6358:	3807883a 	mov	r3,r7
    635c:	003fe006 	br	62e0 <memset+0x18>

00006360 <_Bfree>:
    6360:	28000826 	beq	r5,zero,6384 <_Bfree+0x24>
    6364:	28800117 	ldw	r2,4(r5)
    6368:	21001317 	ldw	r4,76(r4)
    636c:	1085883a 	add	r2,r2,r2
    6370:	1085883a 	add	r2,r2,r2
    6374:	1105883a 	add	r2,r2,r4
    6378:	10c00017 	ldw	r3,0(r2)
    637c:	28c00015 	stw	r3,0(r5)
    6380:	11400015 	stw	r5,0(r2)
    6384:	f800283a 	ret

00006388 <__hi0bits>:
    6388:	20bfffec 	andhi	r2,r4,65535
    638c:	10001426 	beq	r2,zero,63e0 <__hi0bits+0x58>
    6390:	0007883a 	mov	r3,zero
    6394:	20bfc02c 	andhi	r2,r4,65280
    6398:	1000021e 	bne	r2,zero,63a4 <__hi0bits+0x1c>
    639c:	2008923a 	slli	r4,r4,8
    63a0:	18c00204 	addi	r3,r3,8
    63a4:	20bc002c 	andhi	r2,r4,61440
    63a8:	1000021e 	bne	r2,zero,63b4 <__hi0bits+0x2c>
    63ac:	2008913a 	slli	r4,r4,4
    63b0:	18c00104 	addi	r3,r3,4
    63b4:	20b0002c 	andhi	r2,r4,49152
    63b8:	1000031e 	bne	r2,zero,63c8 <__hi0bits+0x40>
    63bc:	2105883a 	add	r2,r4,r4
    63c0:	18c00084 	addi	r3,r3,2
    63c4:	1089883a 	add	r4,r2,r2
    63c8:	20000316 	blt	r4,zero,63d8 <__hi0bits+0x50>
    63cc:	2090002c 	andhi	r2,r4,16384
    63d0:	10000626 	beq	r2,zero,63ec <__hi0bits+0x64>
    63d4:	18c00044 	addi	r3,r3,1
    63d8:	1805883a 	mov	r2,r3
    63dc:	f800283a 	ret
    63e0:	2008943a 	slli	r4,r4,16
    63e4:	00c00404 	movi	r3,16
    63e8:	003fea06 	br	6394 <__hi0bits+0xc>
    63ec:	00c00804 	movi	r3,32
    63f0:	1805883a 	mov	r2,r3
    63f4:	f800283a 	ret

000063f8 <__lo0bits>:
    63f8:	20c00017 	ldw	r3,0(r4)
    63fc:	188001cc 	andi	r2,r3,7
    6400:	10000a26 	beq	r2,zero,642c <__lo0bits+0x34>
    6404:	1880004c 	andi	r2,r3,1
    6408:	1005003a 	cmpeq	r2,r2,zero
    640c:	10002126 	beq	r2,zero,6494 <__lo0bits+0x9c>
    6410:	1880008c 	andi	r2,r3,2
    6414:	1000251e 	bne	r2,zero,64ac <__lo0bits+0xb4>
    6418:	1804d0ba 	srli	r2,r3,2
    641c:	01400084 	movi	r5,2
    6420:	20800015 	stw	r2,0(r4)
    6424:	2805883a 	mov	r2,r5
    6428:	f800283a 	ret
    642c:	18bfffcc 	andi	r2,r3,65535
    6430:	10001526 	beq	r2,zero,6488 <__lo0bits+0x90>
    6434:	000b883a 	mov	r5,zero
    6438:	18803fcc 	andi	r2,r3,255
    643c:	1000021e 	bne	r2,zero,6448 <__lo0bits+0x50>
    6440:	1806d23a 	srli	r3,r3,8
    6444:	29400204 	addi	r5,r5,8
    6448:	188003cc 	andi	r2,r3,15
    644c:	1000021e 	bne	r2,zero,6458 <__lo0bits+0x60>
    6450:	1806d13a 	srli	r3,r3,4
    6454:	29400104 	addi	r5,r5,4
    6458:	188000cc 	andi	r2,r3,3
    645c:	1000021e 	bne	r2,zero,6468 <__lo0bits+0x70>
    6460:	1806d0ba 	srli	r3,r3,2
    6464:	29400084 	addi	r5,r5,2
    6468:	1880004c 	andi	r2,r3,1
    646c:	1000031e 	bne	r2,zero,647c <__lo0bits+0x84>
    6470:	1806d07a 	srli	r3,r3,1
    6474:	18000a26 	beq	r3,zero,64a0 <__lo0bits+0xa8>
    6478:	29400044 	addi	r5,r5,1
    647c:	2805883a 	mov	r2,r5
    6480:	20c00015 	stw	r3,0(r4)
    6484:	f800283a 	ret
    6488:	1806d43a 	srli	r3,r3,16
    648c:	01400404 	movi	r5,16
    6490:	003fe906 	br	6438 <__lo0bits+0x40>
    6494:	000b883a 	mov	r5,zero
    6498:	2805883a 	mov	r2,r5
    649c:	f800283a 	ret
    64a0:	01400804 	movi	r5,32
    64a4:	2805883a 	mov	r2,r5
    64a8:	f800283a 	ret
    64ac:	1804d07a 	srli	r2,r3,1
    64b0:	01400044 	movi	r5,1
    64b4:	20800015 	stw	r2,0(r4)
    64b8:	003fda06 	br	6424 <__lo0bits+0x2c>

000064bc <__mcmp>:
    64bc:	20800417 	ldw	r2,16(r4)
    64c0:	28c00417 	ldw	r3,16(r5)
    64c4:	10cfc83a 	sub	r7,r2,r3
    64c8:	38000c1e 	bne	r7,zero,64fc <__mcmp+0x40>
    64cc:	18c5883a 	add	r2,r3,r3
    64d0:	1085883a 	add	r2,r2,r2
    64d4:	10c00504 	addi	r3,r2,20
    64d8:	21000504 	addi	r4,r4,20
    64dc:	28cb883a 	add	r5,r5,r3
    64e0:	2085883a 	add	r2,r4,r2
    64e4:	10bfff04 	addi	r2,r2,-4
    64e8:	297fff04 	addi	r5,r5,-4
    64ec:	11800017 	ldw	r6,0(r2)
    64f0:	28c00017 	ldw	r3,0(r5)
    64f4:	30c0031e 	bne	r6,r3,6504 <__mcmp+0x48>
    64f8:	20bffa36 	bltu	r4,r2,64e4 <__mcmp+0x28>
    64fc:	3805883a 	mov	r2,r7
    6500:	f800283a 	ret
    6504:	30c00336 	bltu	r6,r3,6514 <__mcmp+0x58>
    6508:	01c00044 	movi	r7,1
    650c:	3805883a 	mov	r2,r7
    6510:	f800283a 	ret
    6514:	01ffffc4 	movi	r7,-1
    6518:	003ff806 	br	64fc <__mcmp+0x40>

0000651c <__ulp>:
    651c:	295ffc2c 	andhi	r5,r5,32752
    6520:	013f3034 	movhi	r4,64704
    6524:	290b883a 	add	r5,r5,r4
    6528:	0145c83a 	sub	r2,zero,r5
    652c:	1007d53a 	srai	r3,r2,20
    6530:	000d883a 	mov	r6,zero
    6534:	0140040e 	bge	zero,r5,6548 <__ulp+0x2c>
    6538:	280f883a 	mov	r7,r5
    653c:	3807883a 	mov	r3,r7
    6540:	3005883a 	mov	r2,r6
    6544:	f800283a 	ret
    6548:	008004c4 	movi	r2,19
    654c:	193ffb04 	addi	r4,r3,-20
    6550:	10c00c0e 	bge	r2,r3,6584 <__ulp+0x68>
    6554:	008007c4 	movi	r2,31
    6558:	1107c83a 	sub	r3,r2,r4
    655c:	00800784 	movi	r2,30
    6560:	01400044 	movi	r5,1
    6564:	11000216 	blt	r2,r4,6570 <__ulp+0x54>
    6568:	00800044 	movi	r2,1
    656c:	10ca983a 	sll	r5,r2,r3
    6570:	000f883a 	mov	r7,zero
    6574:	280d883a 	mov	r6,r5
    6578:	3807883a 	mov	r3,r7
    657c:	3005883a 	mov	r2,r6
    6580:	f800283a 	ret
    6584:	00800234 	movhi	r2,8
    6588:	10cfd83a 	sra	r7,r2,r3
    658c:	000d883a 	mov	r6,zero
    6590:	3005883a 	mov	r2,r6
    6594:	3807883a 	mov	r3,r7
    6598:	f800283a 	ret

0000659c <__b2d>:
    659c:	20800417 	ldw	r2,16(r4)
    65a0:	defff904 	addi	sp,sp,-28
    65a4:	dd000415 	stw	r20,16(sp)
    65a8:	1085883a 	add	r2,r2,r2
    65ac:	25000504 	addi	r20,r4,20
    65b0:	1085883a 	add	r2,r2,r2
    65b4:	dc000015 	stw	r16,0(sp)
    65b8:	a0a1883a 	add	r16,r20,r2
    65bc:	dd400515 	stw	r21,20(sp)
    65c0:	857fff17 	ldw	r21,-4(r16)
    65c4:	dc400115 	stw	r17,4(sp)
    65c8:	dfc00615 	stw	ra,24(sp)
    65cc:	a809883a 	mov	r4,r21
    65d0:	2823883a 	mov	r17,r5
    65d4:	dcc00315 	stw	r19,12(sp)
    65d8:	dc800215 	stw	r18,8(sp)
    65dc:	00063880 	call	6388 <__hi0bits>
    65e0:	100b883a 	mov	r5,r2
    65e4:	00800804 	movi	r2,32
    65e8:	1145c83a 	sub	r2,r2,r5
    65ec:	88800015 	stw	r2,0(r17)
    65f0:	00800284 	movi	r2,10
    65f4:	80ffff04 	addi	r3,r16,-4
    65f8:	11401416 	blt	r2,r5,664c <__b2d+0xb0>
    65fc:	008002c4 	movi	r2,11
    6600:	1149c83a 	sub	r4,r2,r5
    6604:	a0c02736 	bltu	r20,r3,66a4 <__b2d+0x108>
    6608:	000d883a 	mov	r6,zero
    660c:	28800544 	addi	r2,r5,21
    6610:	a906d83a 	srl	r3,r21,r4
    6614:	a884983a 	sll	r2,r21,r2
    6618:	1ccffc34 	orhi	r19,r3,16368
    661c:	11a4b03a 	or	r18,r2,r6
    6620:	9005883a 	mov	r2,r18
    6624:	9807883a 	mov	r3,r19
    6628:	dfc00617 	ldw	ra,24(sp)
    662c:	dd400517 	ldw	r21,20(sp)
    6630:	dd000417 	ldw	r20,16(sp)
    6634:	dcc00317 	ldw	r19,12(sp)
    6638:	dc800217 	ldw	r18,8(sp)
    663c:	dc400117 	ldw	r17,4(sp)
    6640:	dc000017 	ldw	r16,0(sp)
    6644:	dec00704 	addi	sp,sp,28
    6648:	f800283a 	ret
    664c:	a0c00e36 	bltu	r20,r3,6688 <__b2d+0xec>
    6650:	293ffd44 	addi	r4,r5,-11
    6654:	000d883a 	mov	r6,zero
    6658:	20000f26 	beq	r4,zero,6698 <__b2d+0xfc>
    665c:	00800804 	movi	r2,32
    6660:	110bc83a 	sub	r5,r2,r4
    6664:	a0c01236 	bltu	r20,r3,66b0 <__b2d+0x114>
    6668:	000f883a 	mov	r7,zero
    666c:	a904983a 	sll	r2,r21,r4
    6670:	3146d83a 	srl	r3,r6,r5
    6674:	3108983a 	sll	r4,r6,r4
    6678:	108ffc34 	orhi	r2,r2,16368
    667c:	18a6b03a 	or	r19,r3,r2
    6680:	3924b03a 	or	r18,r7,r4
    6684:	003fe606 	br	6620 <__b2d+0x84>
    6688:	293ffd44 	addi	r4,r5,-11
    668c:	81bffe17 	ldw	r6,-8(r16)
    6690:	80fffe04 	addi	r3,r16,-8
    6694:	203ff11e 	bne	r4,zero,665c <__b2d+0xc0>
    6698:	accffc34 	orhi	r19,r21,16368
    669c:	3025883a 	mov	r18,r6
    66a0:	003fdf06 	br	6620 <__b2d+0x84>
    66a4:	18bfff17 	ldw	r2,-4(r3)
    66a8:	110cd83a 	srl	r6,r2,r4
    66ac:	003fd706 	br	660c <__b2d+0x70>
    66b0:	18bfff17 	ldw	r2,-4(r3)
    66b4:	114ed83a 	srl	r7,r2,r5
    66b8:	003fec06 	br	666c <__b2d+0xd0>

000066bc <__ratio>:
    66bc:	defff904 	addi	sp,sp,-28
    66c0:	dc400215 	stw	r17,8(sp)
    66c4:	2823883a 	mov	r17,r5
    66c8:	d80b883a 	mov	r5,sp
    66cc:	dfc00615 	stw	ra,24(sp)
    66d0:	dd000515 	stw	r20,20(sp)
    66d4:	dcc00415 	stw	r19,16(sp)
    66d8:	dc800315 	stw	r18,12(sp)
    66dc:	2025883a 	mov	r18,r4
    66e0:	000659c0 	call	659c <__b2d>
    66e4:	8809883a 	mov	r4,r17
    66e8:	d9400104 	addi	r5,sp,4
    66ec:	1027883a 	mov	r19,r2
    66f0:	1829883a 	mov	r20,r3
    66f4:	000659c0 	call	659c <__b2d>
    66f8:	89000417 	ldw	r4,16(r17)
    66fc:	91c00417 	ldw	r7,16(r18)
    6700:	d9800117 	ldw	r6,4(sp)
    6704:	180b883a 	mov	r5,r3
    6708:	390fc83a 	sub	r7,r7,r4
    670c:	1009883a 	mov	r4,r2
    6710:	d8800017 	ldw	r2,0(sp)
    6714:	380e917a 	slli	r7,r7,5
    6718:	2011883a 	mov	r8,r4
    671c:	1185c83a 	sub	r2,r2,r6
    6720:	11c5883a 	add	r2,r2,r7
    6724:	1006953a 	slli	r3,r2,20
    6728:	2813883a 	mov	r9,r5
    672c:	00800d0e 	bge	zero,r2,6764 <__ratio+0xa8>
    6730:	1d29883a 	add	r20,r3,r20
    6734:	a00b883a 	mov	r5,r20
    6738:	480f883a 	mov	r7,r9
    673c:	9809883a 	mov	r4,r19
    6740:	400d883a 	mov	r6,r8
    6744:	00096940 	call	9694 <__divdf3>
    6748:	dfc00617 	ldw	ra,24(sp)
    674c:	dd000517 	ldw	r20,20(sp)
    6750:	dcc00417 	ldw	r19,16(sp)
    6754:	dc800317 	ldw	r18,12(sp)
    6758:	dc400217 	ldw	r17,8(sp)
    675c:	dec00704 	addi	sp,sp,28
    6760:	f800283a 	ret
    6764:	28d3c83a 	sub	r9,r5,r3
    6768:	003ff206 	br	6734 <__ratio+0x78>

0000676c <_mprec_log10>:
    676c:	defffe04 	addi	sp,sp,-8
    6770:	008005c4 	movi	r2,23
    6774:	dc000015 	stw	r16,0(sp)
    6778:	dfc00115 	stw	ra,4(sp)
    677c:	2021883a 	mov	r16,r4
    6780:	11000c16 	blt	r2,r4,67b4 <_mprec_log10+0x48>
    6784:	200490fa 	slli	r2,r4,3
    6788:	00c00074 	movhi	r3,1
    678c:	18f5db04 	addi	r3,r3,-10388
    6790:	10c5883a 	add	r2,r2,r3
    6794:	12400117 	ldw	r9,4(r2)
    6798:	12000017 	ldw	r8,0(r2)
    679c:	4807883a 	mov	r3,r9
    67a0:	4005883a 	mov	r2,r8
    67a4:	dfc00117 	ldw	ra,4(sp)
    67a8:	dc000017 	ldw	r16,0(sp)
    67ac:	dec00204 	addi	sp,sp,8
    67b0:	f800283a 	ret
    67b4:	0011883a 	mov	r8,zero
    67b8:	024ffc34 	movhi	r9,16368
    67bc:	0005883a 	mov	r2,zero
    67c0:	00d00934 	movhi	r3,16420
    67c4:	480b883a 	mov	r5,r9
    67c8:	4009883a 	mov	r4,r8
    67cc:	180f883a 	mov	r7,r3
    67d0:	100d883a 	mov	r6,r2
    67d4:	00092d00 	call	92d0 <__muldf3>
    67d8:	843fffc4 	addi	r16,r16,-1
    67dc:	1011883a 	mov	r8,r2
    67e0:	1813883a 	mov	r9,r3
    67e4:	803ff51e 	bne	r16,zero,67bc <_mprec_log10+0x50>
    67e8:	4005883a 	mov	r2,r8
    67ec:	4807883a 	mov	r3,r9
    67f0:	dfc00117 	ldw	ra,4(sp)
    67f4:	dc000017 	ldw	r16,0(sp)
    67f8:	dec00204 	addi	sp,sp,8
    67fc:	f800283a 	ret

00006800 <__copybits>:
    6800:	297fffc4 	addi	r5,r5,-1
    6804:	30800417 	ldw	r2,16(r6)
    6808:	280bd17a 	srai	r5,r5,5
    680c:	31800504 	addi	r6,r6,20
    6810:	1085883a 	add	r2,r2,r2
    6814:	294b883a 	add	r5,r5,r5
    6818:	294b883a 	add	r5,r5,r5
    681c:	1085883a 	add	r2,r2,r2
    6820:	290b883a 	add	r5,r5,r4
    6824:	3087883a 	add	r3,r6,r2
    6828:	29400104 	addi	r5,r5,4
    682c:	30c0052e 	bgeu	r6,r3,6844 <__copybits+0x44>
    6830:	30800017 	ldw	r2,0(r6)
    6834:	31800104 	addi	r6,r6,4
    6838:	20800015 	stw	r2,0(r4)
    683c:	21000104 	addi	r4,r4,4
    6840:	30fffb36 	bltu	r6,r3,6830 <__copybits+0x30>
    6844:	2140032e 	bgeu	r4,r5,6854 <__copybits+0x54>
    6848:	20000015 	stw	zero,0(r4)
    684c:	21000104 	addi	r4,r4,4
    6850:	217ffd36 	bltu	r4,r5,6848 <__copybits+0x48>
    6854:	f800283a 	ret

00006858 <__any_on>:
    6858:	20800417 	ldw	r2,16(r4)
    685c:	2807d17a 	srai	r3,r5,5
    6860:	21000504 	addi	r4,r4,20
    6864:	10c00d0e 	bge	r2,r3,689c <__any_on+0x44>
    6868:	1085883a 	add	r2,r2,r2
    686c:	1085883a 	add	r2,r2,r2
    6870:	208d883a 	add	r6,r4,r2
    6874:	2180182e 	bgeu	r4,r6,68d8 <__any_on+0x80>
    6878:	30bfff17 	ldw	r2,-4(r6)
    687c:	30ffff04 	addi	r3,r6,-4
    6880:	1000041e 	bne	r2,zero,6894 <__any_on+0x3c>
    6884:	20c0142e 	bgeu	r4,r3,68d8 <__any_on+0x80>
    6888:	18ffff04 	addi	r3,r3,-4
    688c:	18800017 	ldw	r2,0(r3)
    6890:	103ffc26 	beq	r2,zero,6884 <__any_on+0x2c>
    6894:	00800044 	movi	r2,1
    6898:	f800283a 	ret
    689c:	18800a0e 	bge	r3,r2,68c8 <__any_on+0x70>
    68a0:	294007cc 	andi	r5,r5,31
    68a4:	28000826 	beq	r5,zero,68c8 <__any_on+0x70>
    68a8:	18c5883a 	add	r2,r3,r3
    68ac:	1085883a 	add	r2,r2,r2
    68b0:	208d883a 	add	r6,r4,r2
    68b4:	30c00017 	ldw	r3,0(r6)
    68b8:	1944d83a 	srl	r2,r3,r5
    68bc:	1144983a 	sll	r2,r2,r5
    68c0:	18bff41e 	bne	r3,r2,6894 <__any_on+0x3c>
    68c4:	003feb06 	br	6874 <__any_on+0x1c>
    68c8:	18c5883a 	add	r2,r3,r3
    68cc:	1085883a 	add	r2,r2,r2
    68d0:	208d883a 	add	r6,r4,r2
    68d4:	003fe706 	br	6874 <__any_on+0x1c>
    68d8:	0005883a 	mov	r2,zero
    68dc:	f800283a 	ret

000068e0 <_Balloc>:
    68e0:	20c01317 	ldw	r3,76(r4)
    68e4:	defffb04 	addi	sp,sp,-20
    68e8:	dcc00315 	stw	r19,12(sp)
    68ec:	dc800215 	stw	r18,8(sp)
    68f0:	dfc00415 	stw	ra,16(sp)
    68f4:	2825883a 	mov	r18,r5
    68f8:	dc400115 	stw	r17,4(sp)
    68fc:	dc000015 	stw	r16,0(sp)
    6900:	2027883a 	mov	r19,r4
    6904:	01800404 	movi	r6,16
    6908:	01400104 	movi	r5,4
    690c:	18001726 	beq	r3,zero,696c <_Balloc+0x8c>
    6910:	01400044 	movi	r5,1
    6914:	9485883a 	add	r2,r18,r18
    6918:	2ca2983a 	sll	r17,r5,r18
    691c:	1085883a 	add	r2,r2,r2
    6920:	10c7883a 	add	r3,r2,r3
    6924:	1c000017 	ldw	r16,0(r3)
    6928:	8c4d883a 	add	r6,r17,r17
    692c:	318d883a 	add	r6,r6,r6
    6930:	9809883a 	mov	r4,r19
    6934:	31800504 	addi	r6,r6,20
    6938:	80001226 	beq	r16,zero,6984 <_Balloc+0xa4>
    693c:	80800017 	ldw	r2,0(r16)
    6940:	18800015 	stw	r2,0(r3)
    6944:	80000415 	stw	zero,16(r16)
    6948:	80000315 	stw	zero,12(r16)
    694c:	8005883a 	mov	r2,r16
    6950:	dfc00417 	ldw	ra,16(sp)
    6954:	dcc00317 	ldw	r19,12(sp)
    6958:	dc800217 	ldw	r18,8(sp)
    695c:	dc400117 	ldw	r17,4(sp)
    6960:	dc000017 	ldw	r16,0(sp)
    6964:	dec00504 	addi	sp,sp,20
    6968:	f800283a 	ret
    696c:	0007cd00 	call	7cd0 <_calloc_r>
    6970:	1007883a 	mov	r3,r2
    6974:	0021883a 	mov	r16,zero
    6978:	98801315 	stw	r2,76(r19)
    697c:	103fe41e 	bne	r2,zero,6910 <_Balloc+0x30>
    6980:	003ff206 	br	694c <_Balloc+0x6c>
    6984:	0007cd00 	call	7cd0 <_calloc_r>
    6988:	103ff026 	beq	r2,zero,694c <_Balloc+0x6c>
    698c:	1021883a 	mov	r16,r2
    6990:	14800115 	stw	r18,4(r2)
    6994:	14400215 	stw	r17,8(r2)
    6998:	003fea06 	br	6944 <_Balloc+0x64>

0000699c <__d2b>:
    699c:	defff504 	addi	sp,sp,-44
    69a0:	dcc00515 	stw	r19,20(sp)
    69a4:	04c00044 	movi	r19,1
    69a8:	dc000215 	stw	r16,8(sp)
    69ac:	2821883a 	mov	r16,r5
    69b0:	980b883a 	mov	r5,r19
    69b4:	ddc00915 	stw	r23,36(sp)
    69b8:	dd800815 	stw	r22,32(sp)
    69bc:	dd400715 	stw	r21,28(sp)
    69c0:	dd000615 	stw	r20,24(sp)
    69c4:	dc800415 	stw	r18,16(sp)
    69c8:	dc400315 	stw	r17,12(sp)
    69cc:	dfc00a15 	stw	ra,40(sp)
    69d0:	3023883a 	mov	r17,r6
    69d4:	382d883a 	mov	r22,r7
    69d8:	ddc00b17 	ldw	r23,44(sp)
    69dc:	00068e00 	call	68e0 <_Balloc>
    69e0:	1025883a 	mov	r18,r2
    69e4:	00a00034 	movhi	r2,32768
    69e8:	10bfffc4 	addi	r2,r2,-1
    69ec:	8888703a 	and	r4,r17,r2
    69f0:	202ad53a 	srli	r21,r4,20
    69f4:	00800434 	movhi	r2,16
    69f8:	10bfffc4 	addi	r2,r2,-1
    69fc:	8886703a 	and	r3,r17,r2
    6a00:	a829003a 	cmpeq	r20,r21,zero
    6a04:	800b883a 	mov	r5,r16
    6a08:	d8c00115 	stw	r3,4(sp)
    6a0c:	94000504 	addi	r16,r18,20
    6a10:	a000021e 	bne	r20,zero,6a1c <__d2b+0x80>
    6a14:	18c00434 	orhi	r3,r3,16
    6a18:	d8c00115 	stw	r3,4(sp)
    6a1c:	28002726 	beq	r5,zero,6abc <__d2b+0x120>
    6a20:	d809883a 	mov	r4,sp
    6a24:	d9400015 	stw	r5,0(sp)
    6a28:	00063f80 	call	63f8 <__lo0bits>
    6a2c:	100d883a 	mov	r6,r2
    6a30:	10003526 	beq	r2,zero,6b08 <__d2b+0x16c>
    6a34:	d8c00117 	ldw	r3,4(sp)
    6a38:	00800804 	movi	r2,32
    6a3c:	1185c83a 	sub	r2,r2,r6
    6a40:	d9000017 	ldw	r4,0(sp)
    6a44:	1886983a 	sll	r3,r3,r2
    6a48:	1906b03a 	or	r3,r3,r4
    6a4c:	90c00515 	stw	r3,20(r18)
    6a50:	d8c00117 	ldw	r3,4(sp)
    6a54:	1986d83a 	srl	r3,r3,r6
    6a58:	d8c00115 	stw	r3,4(sp)
    6a5c:	180b003a 	cmpeq	r5,r3,zero
    6a60:	00800084 	movi	r2,2
    6a64:	114bc83a 	sub	r5,r2,r5
    6a68:	80c00115 	stw	r3,4(r16)
    6a6c:	91400415 	stw	r5,16(r18)
    6a70:	a0001a1e 	bne	r20,zero,6adc <__d2b+0x140>
    6a74:	3545883a 	add	r2,r6,r21
    6a78:	10bef344 	addi	r2,r2,-1075
    6a7c:	00c00d44 	movi	r3,53
    6a80:	b0800015 	stw	r2,0(r22)
    6a84:	1987c83a 	sub	r3,r3,r6
    6a88:	b8c00015 	stw	r3,0(r23)
    6a8c:	9005883a 	mov	r2,r18
    6a90:	dfc00a17 	ldw	ra,40(sp)
    6a94:	ddc00917 	ldw	r23,36(sp)
    6a98:	dd800817 	ldw	r22,32(sp)
    6a9c:	dd400717 	ldw	r21,28(sp)
    6aa0:	dd000617 	ldw	r20,24(sp)
    6aa4:	dcc00517 	ldw	r19,20(sp)
    6aa8:	dc800417 	ldw	r18,16(sp)
    6aac:	dc400317 	ldw	r17,12(sp)
    6ab0:	dc000217 	ldw	r16,8(sp)
    6ab4:	dec00b04 	addi	sp,sp,44
    6ab8:	f800283a 	ret
    6abc:	d9000104 	addi	r4,sp,4
    6ac0:	00063f80 	call	63f8 <__lo0bits>
    6ac4:	11800804 	addi	r6,r2,32
    6ac8:	d8800117 	ldw	r2,4(sp)
    6acc:	94c00415 	stw	r19,16(r18)
    6ad0:	980b883a 	mov	r5,r19
    6ad4:	90800515 	stw	r2,20(r18)
    6ad8:	a03fe626 	beq	r20,zero,6a74 <__d2b+0xd8>
    6adc:	2945883a 	add	r2,r5,r5
    6ae0:	1085883a 	add	r2,r2,r2
    6ae4:	1405883a 	add	r2,r2,r16
    6ae8:	113fff17 	ldw	r4,-4(r2)
    6aec:	30fef384 	addi	r3,r6,-1074
    6af0:	2820917a 	slli	r16,r5,5
    6af4:	b0c00015 	stw	r3,0(r22)
    6af8:	00063880 	call	6388 <__hi0bits>
    6afc:	80a1c83a 	sub	r16,r16,r2
    6b00:	bc000015 	stw	r16,0(r23)
    6b04:	003fe106 	br	6a8c <__d2b+0xf0>
    6b08:	d8800017 	ldw	r2,0(sp)
    6b0c:	90800515 	stw	r2,20(r18)
    6b10:	d8c00117 	ldw	r3,4(sp)
    6b14:	003fd106 	br	6a5c <__d2b+0xc0>

00006b18 <__mdiff>:
    6b18:	defffb04 	addi	sp,sp,-20
    6b1c:	dc000015 	stw	r16,0(sp)
    6b20:	2821883a 	mov	r16,r5
    6b24:	dc800215 	stw	r18,8(sp)
    6b28:	300b883a 	mov	r5,r6
    6b2c:	2025883a 	mov	r18,r4
    6b30:	8009883a 	mov	r4,r16
    6b34:	dc400115 	stw	r17,4(sp)
    6b38:	dfc00415 	stw	ra,16(sp)
    6b3c:	dcc00315 	stw	r19,12(sp)
    6b40:	3023883a 	mov	r17,r6
    6b44:	00064bc0 	call	64bc <__mcmp>
    6b48:	10004226 	beq	r2,zero,6c54 <__mdiff+0x13c>
    6b4c:	10005016 	blt	r2,zero,6c90 <__mdiff+0x178>
    6b50:	0027883a 	mov	r19,zero
    6b54:	81400117 	ldw	r5,4(r16)
    6b58:	9009883a 	mov	r4,r18
    6b5c:	00068e00 	call	68e0 <_Balloc>
    6b60:	1019883a 	mov	r12,r2
    6b64:	82800417 	ldw	r10,16(r16)
    6b68:	88800417 	ldw	r2,16(r17)
    6b6c:	81800504 	addi	r6,r16,20
    6b70:	5287883a 	add	r3,r10,r10
    6b74:	1085883a 	add	r2,r2,r2
    6b78:	18c7883a 	add	r3,r3,r3
    6b7c:	1085883a 	add	r2,r2,r2
    6b80:	8a000504 	addi	r8,r17,20
    6b84:	64c00315 	stw	r19,12(r12)
    6b88:	30db883a 	add	r13,r6,r3
    6b8c:	4097883a 	add	r11,r8,r2
    6b90:	61c00504 	addi	r7,r12,20
    6b94:	0013883a 	mov	r9,zero
    6b98:	31000017 	ldw	r4,0(r6)
    6b9c:	41400017 	ldw	r5,0(r8)
    6ba0:	42000104 	addi	r8,r8,4
    6ba4:	20bfffcc 	andi	r2,r4,65535
    6ba8:	28ffffcc 	andi	r3,r5,65535
    6bac:	10c5c83a 	sub	r2,r2,r3
    6bb0:	1245883a 	add	r2,r2,r9
    6bb4:	2008d43a 	srli	r4,r4,16
    6bb8:	280ad43a 	srli	r5,r5,16
    6bbc:	1007d43a 	srai	r3,r2,16
    6bc0:	3880000d 	sth	r2,0(r7)
    6bc4:	2149c83a 	sub	r4,r4,r5
    6bc8:	20c9883a 	add	r4,r4,r3
    6bcc:	3900008d 	sth	r4,2(r7)
    6bd0:	31800104 	addi	r6,r6,4
    6bd4:	39c00104 	addi	r7,r7,4
    6bd8:	2013d43a 	srai	r9,r4,16
    6bdc:	42ffee36 	bltu	r8,r11,6b98 <__mdiff+0x80>
    6be0:	33400c2e 	bgeu	r6,r13,6c14 <__mdiff+0xfc>
    6be4:	30800017 	ldw	r2,0(r6)
    6be8:	31800104 	addi	r6,r6,4
    6bec:	10ffffcc 	andi	r3,r2,65535
    6bf0:	1a47883a 	add	r3,r3,r9
    6bf4:	1004d43a 	srli	r2,r2,16
    6bf8:	1809d43a 	srai	r4,r3,16
    6bfc:	38c0000d 	sth	r3,0(r7)
    6c00:	1105883a 	add	r2,r2,r4
    6c04:	3880008d 	sth	r2,2(r7)
    6c08:	1013d43a 	srai	r9,r2,16
    6c0c:	39c00104 	addi	r7,r7,4
    6c10:	337ff436 	bltu	r6,r13,6be4 <__mdiff+0xcc>
    6c14:	38bfff17 	ldw	r2,-4(r7)
    6c18:	38ffff04 	addi	r3,r7,-4
    6c1c:	1000041e 	bne	r2,zero,6c30 <__mdiff+0x118>
    6c20:	18ffff04 	addi	r3,r3,-4
    6c24:	18800017 	ldw	r2,0(r3)
    6c28:	52bfffc4 	addi	r10,r10,-1
    6c2c:	103ffc26 	beq	r2,zero,6c20 <__mdiff+0x108>
    6c30:	6005883a 	mov	r2,r12
    6c34:	62800415 	stw	r10,16(r12)
    6c38:	dfc00417 	ldw	ra,16(sp)
    6c3c:	dcc00317 	ldw	r19,12(sp)
    6c40:	dc800217 	ldw	r18,8(sp)
    6c44:	dc400117 	ldw	r17,4(sp)
    6c48:	dc000017 	ldw	r16,0(sp)
    6c4c:	dec00504 	addi	sp,sp,20
    6c50:	f800283a 	ret
    6c54:	9009883a 	mov	r4,r18
    6c58:	000b883a 	mov	r5,zero
    6c5c:	00068e00 	call	68e0 <_Balloc>
    6c60:	1019883a 	mov	r12,r2
    6c64:	00800044 	movi	r2,1
    6c68:	60800415 	stw	r2,16(r12)
    6c6c:	6005883a 	mov	r2,r12
    6c70:	60000515 	stw	zero,20(r12)
    6c74:	dfc00417 	ldw	ra,16(sp)
    6c78:	dcc00317 	ldw	r19,12(sp)
    6c7c:	dc800217 	ldw	r18,8(sp)
    6c80:	dc400117 	ldw	r17,4(sp)
    6c84:	dc000017 	ldw	r16,0(sp)
    6c88:	dec00504 	addi	sp,sp,20
    6c8c:	f800283a 	ret
    6c90:	880d883a 	mov	r6,r17
    6c94:	04c00044 	movi	r19,1
    6c98:	8023883a 	mov	r17,r16
    6c9c:	3021883a 	mov	r16,r6
    6ca0:	003fac06 	br	6b54 <__mdiff+0x3c>

00006ca4 <__lshift>:
    6ca4:	defff904 	addi	sp,sp,-28
    6ca8:	28800417 	ldw	r2,16(r5)
    6cac:	dc000015 	stw	r16,0(sp)
    6cb0:	3021d17a 	srai	r16,r6,5
    6cb4:	28c00217 	ldw	r3,8(r5)
    6cb8:	10800044 	addi	r2,r2,1
    6cbc:	dc400115 	stw	r17,4(sp)
    6cc0:	80a3883a 	add	r17,r16,r2
    6cc4:	dd400515 	stw	r21,20(sp)
    6cc8:	dd000415 	stw	r20,16(sp)
    6ccc:	dc800215 	stw	r18,8(sp)
    6cd0:	dfc00615 	stw	ra,24(sp)
    6cd4:	2825883a 	mov	r18,r5
    6cd8:	dcc00315 	stw	r19,12(sp)
    6cdc:	3029883a 	mov	r20,r6
    6ce0:	202b883a 	mov	r21,r4
    6ce4:	29400117 	ldw	r5,4(r5)
    6ce8:	1c40030e 	bge	r3,r17,6cf8 <__lshift+0x54>
    6cec:	18c7883a 	add	r3,r3,r3
    6cf0:	29400044 	addi	r5,r5,1
    6cf4:	1c7ffd16 	blt	r3,r17,6cec <__lshift+0x48>
    6cf8:	a809883a 	mov	r4,r21
    6cfc:	00068e00 	call	68e0 <_Balloc>
    6d00:	1027883a 	mov	r19,r2
    6d04:	11400504 	addi	r5,r2,20
    6d08:	0400090e 	bge	zero,r16,6d30 <__lshift+0x8c>
    6d0c:	2805883a 	mov	r2,r5
    6d10:	0007883a 	mov	r3,zero
    6d14:	18c00044 	addi	r3,r3,1
    6d18:	10000015 	stw	zero,0(r2)
    6d1c:	10800104 	addi	r2,r2,4
    6d20:	80fffc1e 	bne	r16,r3,6d14 <__lshift+0x70>
    6d24:	8405883a 	add	r2,r16,r16
    6d28:	1085883a 	add	r2,r2,r2
    6d2c:	288b883a 	add	r5,r5,r2
    6d30:	90800417 	ldw	r2,16(r18)
    6d34:	91000504 	addi	r4,r18,20
    6d38:	a18007cc 	andi	r6,r20,31
    6d3c:	1085883a 	add	r2,r2,r2
    6d40:	1085883a 	add	r2,r2,r2
    6d44:	208f883a 	add	r7,r4,r2
    6d48:	30001e26 	beq	r6,zero,6dc4 <__lshift+0x120>
    6d4c:	00800804 	movi	r2,32
    6d50:	1191c83a 	sub	r8,r2,r6
    6d54:	0007883a 	mov	r3,zero
    6d58:	20800017 	ldw	r2,0(r4)
    6d5c:	1184983a 	sll	r2,r2,r6
    6d60:	1884b03a 	or	r2,r3,r2
    6d64:	28800015 	stw	r2,0(r5)
    6d68:	20c00017 	ldw	r3,0(r4)
    6d6c:	21000104 	addi	r4,r4,4
    6d70:	29400104 	addi	r5,r5,4
    6d74:	1a06d83a 	srl	r3,r3,r8
    6d78:	21fff736 	bltu	r4,r7,6d58 <__lshift+0xb4>
    6d7c:	28c00015 	stw	r3,0(r5)
    6d80:	18000126 	beq	r3,zero,6d88 <__lshift+0xe4>
    6d84:	8c400044 	addi	r17,r17,1
    6d88:	88bfffc4 	addi	r2,r17,-1
    6d8c:	98800415 	stw	r2,16(r19)
    6d90:	a809883a 	mov	r4,r21
    6d94:	900b883a 	mov	r5,r18
    6d98:	00063600 	call	6360 <_Bfree>
    6d9c:	9805883a 	mov	r2,r19
    6da0:	dfc00617 	ldw	ra,24(sp)
    6da4:	dd400517 	ldw	r21,20(sp)
    6da8:	dd000417 	ldw	r20,16(sp)
    6dac:	dcc00317 	ldw	r19,12(sp)
    6db0:	dc800217 	ldw	r18,8(sp)
    6db4:	dc400117 	ldw	r17,4(sp)
    6db8:	dc000017 	ldw	r16,0(sp)
    6dbc:	dec00704 	addi	sp,sp,28
    6dc0:	f800283a 	ret
    6dc4:	20800017 	ldw	r2,0(r4)
    6dc8:	21000104 	addi	r4,r4,4
    6dcc:	28800015 	stw	r2,0(r5)
    6dd0:	29400104 	addi	r5,r5,4
    6dd4:	21ffec2e 	bgeu	r4,r7,6d88 <__lshift+0xe4>
    6dd8:	20800017 	ldw	r2,0(r4)
    6ddc:	21000104 	addi	r4,r4,4
    6de0:	28800015 	stw	r2,0(r5)
    6de4:	29400104 	addi	r5,r5,4
    6de8:	21fff636 	bltu	r4,r7,6dc4 <__lshift+0x120>
    6dec:	003fe606 	br	6d88 <__lshift+0xe4>

00006df0 <__multiply>:
    6df0:	defff004 	addi	sp,sp,-64
    6df4:	dc800815 	stw	r18,32(sp)
    6df8:	dc400715 	stw	r17,28(sp)
    6dfc:	2c800417 	ldw	r18,16(r5)
    6e00:	34400417 	ldw	r17,16(r6)
    6e04:	dcc00915 	stw	r19,36(sp)
    6e08:	dc000615 	stw	r16,24(sp)
    6e0c:	dfc00f15 	stw	ra,60(sp)
    6e10:	df000e15 	stw	fp,56(sp)
    6e14:	ddc00d15 	stw	r23,52(sp)
    6e18:	dd800c15 	stw	r22,48(sp)
    6e1c:	dd400b15 	stw	r21,44(sp)
    6e20:	dd000a15 	stw	r20,40(sp)
    6e24:	2821883a 	mov	r16,r5
    6e28:	3027883a 	mov	r19,r6
    6e2c:	9440040e 	bge	r18,r17,6e40 <__multiply+0x50>
    6e30:	8825883a 	mov	r18,r17
    6e34:	2c400417 	ldw	r17,16(r5)
    6e38:	2827883a 	mov	r19,r5
    6e3c:	3021883a 	mov	r16,r6
    6e40:	80800217 	ldw	r2,8(r16)
    6e44:	9447883a 	add	r3,r18,r17
    6e48:	d8c00415 	stw	r3,16(sp)
    6e4c:	81400117 	ldw	r5,4(r16)
    6e50:	10c0010e 	bge	r2,r3,6e58 <__multiply+0x68>
    6e54:	29400044 	addi	r5,r5,1
    6e58:	00068e00 	call	68e0 <_Balloc>
    6e5c:	d8800515 	stw	r2,20(sp)
    6e60:	d9000417 	ldw	r4,16(sp)
    6e64:	d8c00517 	ldw	r3,20(sp)
    6e68:	2105883a 	add	r2,r4,r4
    6e6c:	1085883a 	add	r2,r2,r2
    6e70:	19000504 	addi	r4,r3,20
    6e74:	2085883a 	add	r2,r4,r2
    6e78:	d8800315 	stw	r2,12(sp)
    6e7c:	2080052e 	bgeu	r4,r2,6e94 <__multiply+0xa4>
    6e80:	2005883a 	mov	r2,r4
    6e84:	d8c00317 	ldw	r3,12(sp)
    6e88:	10000015 	stw	zero,0(r2)
    6e8c:	10800104 	addi	r2,r2,4
    6e90:	10fffc36 	bltu	r2,r3,6e84 <__multiply+0x94>
    6e94:	8c45883a 	add	r2,r17,r17
    6e98:	9487883a 	add	r3,r18,r18
    6e9c:	9dc00504 	addi	r23,r19,20
    6ea0:	1085883a 	add	r2,r2,r2
    6ea4:	84000504 	addi	r16,r16,20
    6ea8:	18c7883a 	add	r3,r3,r3
    6eac:	b885883a 	add	r2,r23,r2
    6eb0:	dc000015 	stw	r16,0(sp)
    6eb4:	d8800215 	stw	r2,8(sp)
    6eb8:	80f9883a 	add	fp,r16,r3
    6ebc:	b880432e 	bgeu	r23,r2,6fcc <__multiply+0x1dc>
    6ec0:	d9000115 	stw	r4,4(sp)
    6ec4:	b9000017 	ldw	r4,0(r23)
    6ec8:	253fffcc 	andi	r20,r4,65535
    6ecc:	a0001a26 	beq	r20,zero,6f38 <__multiply+0x148>
    6ed0:	dcc00017 	ldw	r19,0(sp)
    6ed4:	dc800117 	ldw	r18,4(sp)
    6ed8:	002b883a 	mov	r21,zero
    6edc:	9c400017 	ldw	r17,0(r19)
    6ee0:	94000017 	ldw	r16,0(r18)
    6ee4:	a009883a 	mov	r4,r20
    6ee8:	897fffcc 	andi	r5,r17,65535
    6eec:	0000c680 	call	c68 <__mulsi3>
    6ef0:	880ad43a 	srli	r5,r17,16
    6ef4:	80ffffcc 	andi	r3,r16,65535
    6ef8:	a8c7883a 	add	r3,r21,r3
    6efc:	a009883a 	mov	r4,r20
    6f00:	10e3883a 	add	r17,r2,r3
    6f04:	8020d43a 	srli	r16,r16,16
    6f08:	0000c680 	call	c68 <__mulsi3>
    6f0c:	8806d43a 	srli	r3,r17,16
    6f10:	1405883a 	add	r2,r2,r16
    6f14:	9cc00104 	addi	r19,r19,4
    6f18:	1887883a 	add	r3,r3,r2
    6f1c:	90c0008d 	sth	r3,2(r18)
    6f20:	9440000d 	sth	r17,0(r18)
    6f24:	182ad43a 	srli	r21,r3,16
    6f28:	94800104 	addi	r18,r18,4
    6f2c:	9f3feb36 	bltu	r19,fp,6edc <__multiply+0xec>
    6f30:	95400015 	stw	r21,0(r18)
    6f34:	b9000017 	ldw	r4,0(r23)
    6f38:	202ad43a 	srli	r21,r4,16
    6f3c:	a8001c26 	beq	r21,zero,6fb0 <__multiply+0x1c0>
    6f40:	d9000117 	ldw	r4,4(sp)
    6f44:	dd000017 	ldw	r20,0(sp)
    6f48:	002d883a 	mov	r22,zero
    6f4c:	24c00017 	ldw	r19,0(r4)
    6f50:	2025883a 	mov	r18,r4
    6f54:	9823883a 	mov	r17,r19
    6f58:	a4000017 	ldw	r16,0(r20)
    6f5c:	a809883a 	mov	r4,r21
    6f60:	a5000104 	addi	r20,r20,4
    6f64:	817fffcc 	andi	r5,r16,65535
    6f68:	0000c680 	call	c68 <__mulsi3>
    6f6c:	8806d43a 	srli	r3,r17,16
    6f70:	800ad43a 	srli	r5,r16,16
    6f74:	94c0000d 	sth	r19,0(r18)
    6f78:	b0c7883a 	add	r3,r22,r3
    6f7c:	10e1883a 	add	r16,r2,r3
    6f80:	9400008d 	sth	r16,2(r18)
    6f84:	a809883a 	mov	r4,r21
    6f88:	94800104 	addi	r18,r18,4
    6f8c:	0000c680 	call	c68 <__mulsi3>
    6f90:	94400017 	ldw	r17,0(r18)
    6f94:	8020d43a 	srli	r16,r16,16
    6f98:	88ffffcc 	andi	r3,r17,65535
    6f9c:	10c5883a 	add	r2,r2,r3
    6fa0:	80a7883a 	add	r19,r16,r2
    6fa4:	982cd43a 	srli	r22,r19,16
    6fa8:	a73feb36 	bltu	r20,fp,6f58 <__multiply+0x168>
    6fac:	94c00015 	stw	r19,0(r18)
    6fb0:	d8800217 	ldw	r2,8(sp)
    6fb4:	bdc00104 	addi	r23,r23,4
    6fb8:	b880042e 	bgeu	r23,r2,6fcc <__multiply+0x1dc>
    6fbc:	d8c00117 	ldw	r3,4(sp)
    6fc0:	18c00104 	addi	r3,r3,4
    6fc4:	d8c00115 	stw	r3,4(sp)
    6fc8:	003fbe06 	br	6ec4 <__multiply+0xd4>
    6fcc:	d9000417 	ldw	r4,16(sp)
    6fd0:	01000c0e 	bge	zero,r4,7004 <__multiply+0x214>
    6fd4:	d8c00317 	ldw	r3,12(sp)
    6fd8:	18bfff17 	ldw	r2,-4(r3)
    6fdc:	18ffff04 	addi	r3,r3,-4
    6fe0:	10000326 	beq	r2,zero,6ff0 <__multiply+0x200>
    6fe4:	00000706 	br	7004 <__multiply+0x214>
    6fe8:	18800017 	ldw	r2,0(r3)
    6fec:	1000051e 	bne	r2,zero,7004 <__multiply+0x214>
    6ff0:	d9000417 	ldw	r4,16(sp)
    6ff4:	18ffff04 	addi	r3,r3,-4
    6ff8:	213fffc4 	addi	r4,r4,-1
    6ffc:	d9000415 	stw	r4,16(sp)
    7000:	203ff91e 	bne	r4,zero,6fe8 <__multiply+0x1f8>
    7004:	d8800417 	ldw	r2,16(sp)
    7008:	d8c00517 	ldw	r3,20(sp)
    700c:	18800415 	stw	r2,16(r3)
    7010:	1805883a 	mov	r2,r3
    7014:	dfc00f17 	ldw	ra,60(sp)
    7018:	df000e17 	ldw	fp,56(sp)
    701c:	ddc00d17 	ldw	r23,52(sp)
    7020:	dd800c17 	ldw	r22,48(sp)
    7024:	dd400b17 	ldw	r21,44(sp)
    7028:	dd000a17 	ldw	r20,40(sp)
    702c:	dcc00917 	ldw	r19,36(sp)
    7030:	dc800817 	ldw	r18,32(sp)
    7034:	dc400717 	ldw	r17,28(sp)
    7038:	dc000617 	ldw	r16,24(sp)
    703c:	dec01004 	addi	sp,sp,64
    7040:	f800283a 	ret

00007044 <__i2b>:
    7044:	defffd04 	addi	sp,sp,-12
    7048:	dc000015 	stw	r16,0(sp)
    704c:	04000044 	movi	r16,1
    7050:	dc800115 	stw	r18,4(sp)
    7054:	2825883a 	mov	r18,r5
    7058:	800b883a 	mov	r5,r16
    705c:	dfc00215 	stw	ra,8(sp)
    7060:	00068e00 	call	68e0 <_Balloc>
    7064:	14000415 	stw	r16,16(r2)
    7068:	14800515 	stw	r18,20(r2)
    706c:	dfc00217 	ldw	ra,8(sp)
    7070:	dc800117 	ldw	r18,4(sp)
    7074:	dc000017 	ldw	r16,0(sp)
    7078:	dec00304 	addi	sp,sp,12
    707c:	f800283a 	ret

00007080 <__multadd>:
    7080:	defff604 	addi	sp,sp,-40
    7084:	dd800615 	stw	r22,24(sp)
    7088:	2d800417 	ldw	r22,16(r5)
    708c:	df000815 	stw	fp,32(sp)
    7090:	ddc00715 	stw	r23,28(sp)
    7094:	dd400515 	stw	r21,20(sp)
    7098:	dd000415 	stw	r20,16(sp)
    709c:	dcc00315 	stw	r19,12(sp)
    70a0:	dc800215 	stw	r18,8(sp)
    70a4:	dfc00915 	stw	ra,36(sp)
    70a8:	dc400115 	stw	r17,4(sp)
    70ac:	dc000015 	stw	r16,0(sp)
    70b0:	282f883a 	mov	r23,r5
    70b4:	2039883a 	mov	fp,r4
    70b8:	302b883a 	mov	r21,r6
    70bc:	3829883a 	mov	r20,r7
    70c0:	2c800504 	addi	r18,r5,20
    70c4:	0027883a 	mov	r19,zero
    70c8:	94400017 	ldw	r17,0(r18)
    70cc:	a80b883a 	mov	r5,r21
    70d0:	9cc00044 	addi	r19,r19,1
    70d4:	893fffcc 	andi	r4,r17,65535
    70d8:	0000c680 	call	c68 <__mulsi3>
    70dc:	8808d43a 	srli	r4,r17,16
    70e0:	1521883a 	add	r16,r2,r20
    70e4:	a80b883a 	mov	r5,r21
    70e8:	0000c680 	call	c68 <__mulsi3>
    70ec:	8008d43a 	srli	r4,r16,16
    70f0:	843fffcc 	andi	r16,r16,65535
    70f4:	1105883a 	add	r2,r2,r4
    70f8:	1006943a 	slli	r3,r2,16
    70fc:	1028d43a 	srli	r20,r2,16
    7100:	1c07883a 	add	r3,r3,r16
    7104:	90c00015 	stw	r3,0(r18)
    7108:	94800104 	addi	r18,r18,4
    710c:	9dbfee16 	blt	r19,r22,70c8 <__multadd+0x48>
    7110:	a0000826 	beq	r20,zero,7134 <__multadd+0xb4>
    7114:	b8800217 	ldw	r2,8(r23)
    7118:	b080130e 	bge	r22,r2,7168 <__multadd+0xe8>
    711c:	b585883a 	add	r2,r22,r22
    7120:	1085883a 	add	r2,r2,r2
    7124:	15c5883a 	add	r2,r2,r23
    7128:	b0c00044 	addi	r3,r22,1
    712c:	15000515 	stw	r20,20(r2)
    7130:	b8c00415 	stw	r3,16(r23)
    7134:	b805883a 	mov	r2,r23
    7138:	dfc00917 	ldw	ra,36(sp)
    713c:	df000817 	ldw	fp,32(sp)
    7140:	ddc00717 	ldw	r23,28(sp)
    7144:	dd800617 	ldw	r22,24(sp)
    7148:	dd400517 	ldw	r21,20(sp)
    714c:	dd000417 	ldw	r20,16(sp)
    7150:	dcc00317 	ldw	r19,12(sp)
    7154:	dc800217 	ldw	r18,8(sp)
    7158:	dc400117 	ldw	r17,4(sp)
    715c:	dc000017 	ldw	r16,0(sp)
    7160:	dec00a04 	addi	sp,sp,40
    7164:	f800283a 	ret
    7168:	b9400117 	ldw	r5,4(r23)
    716c:	e009883a 	mov	r4,fp
    7170:	29400044 	addi	r5,r5,1
    7174:	00068e00 	call	68e0 <_Balloc>
    7178:	b9800417 	ldw	r6,16(r23)
    717c:	b9400304 	addi	r5,r23,12
    7180:	11000304 	addi	r4,r2,12
    7184:	318d883a 	add	r6,r6,r6
    7188:	318d883a 	add	r6,r6,r6
    718c:	31800204 	addi	r6,r6,8
    7190:	1023883a 	mov	r17,r2
    7194:	00061480 	call	6148 <memcpy>
    7198:	b80b883a 	mov	r5,r23
    719c:	e009883a 	mov	r4,fp
    71a0:	00063600 	call	6360 <_Bfree>
    71a4:	882f883a 	mov	r23,r17
    71a8:	003fdc06 	br	711c <__multadd+0x9c>

000071ac <__pow5mult>:
    71ac:	defffa04 	addi	sp,sp,-24
    71b0:	308000cc 	andi	r2,r6,3
    71b4:	dd000415 	stw	r20,16(sp)
    71b8:	dcc00315 	stw	r19,12(sp)
    71bc:	dc000015 	stw	r16,0(sp)
    71c0:	dfc00515 	stw	ra,20(sp)
    71c4:	dc800215 	stw	r18,8(sp)
    71c8:	dc400115 	stw	r17,4(sp)
    71cc:	3021883a 	mov	r16,r6
    71d0:	2027883a 	mov	r19,r4
    71d4:	2829883a 	mov	r20,r5
    71d8:	10002b1e 	bne	r2,zero,7288 <__pow5mult+0xdc>
    71dc:	8025d0ba 	srai	r18,r16,2
    71e0:	90001b26 	beq	r18,zero,7250 <__pow5mult+0xa4>
    71e4:	9c001217 	ldw	r16,72(r19)
    71e8:	8000081e 	bne	r16,zero,720c <__pow5mult+0x60>
    71ec:	00003006 	br	72b0 <__pow5mult+0x104>
    71f0:	800b883a 	mov	r5,r16
    71f4:	800d883a 	mov	r6,r16
    71f8:	9809883a 	mov	r4,r19
    71fc:	90001426 	beq	r18,zero,7250 <__pow5mult+0xa4>
    7200:	80800017 	ldw	r2,0(r16)
    7204:	10001b26 	beq	r2,zero,7274 <__pow5mult+0xc8>
    7208:	1021883a 	mov	r16,r2
    720c:	9080004c 	andi	r2,r18,1
    7210:	1005003a 	cmpeq	r2,r2,zero
    7214:	9025d07a 	srai	r18,r18,1
    7218:	800d883a 	mov	r6,r16
    721c:	9809883a 	mov	r4,r19
    7220:	a00b883a 	mov	r5,r20
    7224:	103ff21e 	bne	r2,zero,71f0 <__pow5mult+0x44>
    7228:	0006df00 	call	6df0 <__multiply>
    722c:	a00b883a 	mov	r5,r20
    7230:	9809883a 	mov	r4,r19
    7234:	1023883a 	mov	r17,r2
    7238:	00063600 	call	6360 <_Bfree>
    723c:	8829883a 	mov	r20,r17
    7240:	800b883a 	mov	r5,r16
    7244:	800d883a 	mov	r6,r16
    7248:	9809883a 	mov	r4,r19
    724c:	903fec1e 	bne	r18,zero,7200 <__pow5mult+0x54>
    7250:	a005883a 	mov	r2,r20
    7254:	dfc00517 	ldw	ra,20(sp)
    7258:	dd000417 	ldw	r20,16(sp)
    725c:	dcc00317 	ldw	r19,12(sp)
    7260:	dc800217 	ldw	r18,8(sp)
    7264:	dc400117 	ldw	r17,4(sp)
    7268:	dc000017 	ldw	r16,0(sp)
    726c:	dec00604 	addi	sp,sp,24
    7270:	f800283a 	ret
    7274:	0006df00 	call	6df0 <__multiply>
    7278:	80800015 	stw	r2,0(r16)
    727c:	1021883a 	mov	r16,r2
    7280:	10000015 	stw	zero,0(r2)
    7284:	003fe106 	br	720c <__pow5mult+0x60>
    7288:	1085883a 	add	r2,r2,r2
    728c:	00c00074 	movhi	r3,1
    7290:	18f62104 	addi	r3,r3,-10108
    7294:	1085883a 	add	r2,r2,r2
    7298:	10c5883a 	add	r2,r2,r3
    729c:	11bfff17 	ldw	r6,-4(r2)
    72a0:	000f883a 	mov	r7,zero
    72a4:	00070800 	call	7080 <__multadd>
    72a8:	1029883a 	mov	r20,r2
    72ac:	003fcb06 	br	71dc <__pow5mult+0x30>
    72b0:	9809883a 	mov	r4,r19
    72b4:	01409c44 	movi	r5,625
    72b8:	00070440 	call	7044 <__i2b>
    72bc:	98801215 	stw	r2,72(r19)
    72c0:	1021883a 	mov	r16,r2
    72c4:	10000015 	stw	zero,0(r2)
    72c8:	003fd006 	br	720c <__pow5mult+0x60>

000072cc <__s2b>:
    72cc:	defff904 	addi	sp,sp,-28
    72d0:	dcc00315 	stw	r19,12(sp)
    72d4:	dc800215 	stw	r18,8(sp)
    72d8:	2827883a 	mov	r19,r5
    72dc:	2025883a 	mov	r18,r4
    72e0:	01400244 	movi	r5,9
    72e4:	39000204 	addi	r4,r7,8
    72e8:	dd000415 	stw	r20,16(sp)
    72ec:	dc400115 	stw	r17,4(sp)
    72f0:	dfc00615 	stw	ra,24(sp)
    72f4:	dd400515 	stw	r21,20(sp)
    72f8:	dc000015 	stw	r16,0(sp)
    72fc:	3829883a 	mov	r20,r7
    7300:	3023883a 	mov	r17,r6
    7304:	0000b980 	call	b98 <__divsi3>
    7308:	00c00044 	movi	r3,1
    730c:	1880350e 	bge	r3,r2,73e4 <__s2b+0x118>
    7310:	000b883a 	mov	r5,zero
    7314:	18c7883a 	add	r3,r3,r3
    7318:	29400044 	addi	r5,r5,1
    731c:	18bffd16 	blt	r3,r2,7314 <__s2b+0x48>
    7320:	9009883a 	mov	r4,r18
    7324:	00068e00 	call	68e0 <_Balloc>
    7328:	1011883a 	mov	r8,r2
    732c:	d8800717 	ldw	r2,28(sp)
    7330:	00c00044 	movi	r3,1
    7334:	01800244 	movi	r6,9
    7338:	40800515 	stw	r2,20(r8)
    733c:	40c00415 	stw	r3,16(r8)
    7340:	3440260e 	bge	r6,r17,73dc <__s2b+0x110>
    7344:	3021883a 	mov	r16,r6
    7348:	99ab883a 	add	r21,r19,r6
    734c:	9c05883a 	add	r2,r19,r16
    7350:	11c00007 	ldb	r7,0(r2)
    7354:	400b883a 	mov	r5,r8
    7358:	9009883a 	mov	r4,r18
    735c:	39fff404 	addi	r7,r7,-48
    7360:	01800284 	movi	r6,10
    7364:	00070800 	call	7080 <__multadd>
    7368:	84000044 	addi	r16,r16,1
    736c:	1011883a 	mov	r8,r2
    7370:	8c3ff61e 	bne	r17,r16,734c <__s2b+0x80>
    7374:	ac45883a 	add	r2,r21,r17
    7378:	117ffe04 	addi	r5,r2,-8
    737c:	880d883a 	mov	r6,r17
    7380:	35000c0e 	bge	r6,r20,73b4 <__s2b+0xe8>
    7384:	a185c83a 	sub	r2,r20,r6
    7388:	2821883a 	mov	r16,r5
    738c:	28a3883a 	add	r17,r5,r2
    7390:	81c00007 	ldb	r7,0(r16)
    7394:	400b883a 	mov	r5,r8
    7398:	9009883a 	mov	r4,r18
    739c:	39fff404 	addi	r7,r7,-48
    73a0:	01800284 	movi	r6,10
    73a4:	00070800 	call	7080 <__multadd>
    73a8:	84000044 	addi	r16,r16,1
    73ac:	1011883a 	mov	r8,r2
    73b0:	847ff71e 	bne	r16,r17,7390 <__s2b+0xc4>
    73b4:	4005883a 	mov	r2,r8
    73b8:	dfc00617 	ldw	ra,24(sp)
    73bc:	dd400517 	ldw	r21,20(sp)
    73c0:	dd000417 	ldw	r20,16(sp)
    73c4:	dcc00317 	ldw	r19,12(sp)
    73c8:	dc800217 	ldw	r18,8(sp)
    73cc:	dc400117 	ldw	r17,4(sp)
    73d0:	dc000017 	ldw	r16,0(sp)
    73d4:	dec00704 	addi	sp,sp,28
    73d8:	f800283a 	ret
    73dc:	99400284 	addi	r5,r19,10
    73e0:	003fe706 	br	7380 <__s2b+0xb4>
    73e4:	000b883a 	mov	r5,zero
    73e8:	003fcd06 	br	7320 <__s2b+0x54>

000073ec <_realloc_r>:
    73ec:	defff404 	addi	sp,sp,-48
    73f0:	dd800815 	stw	r22,32(sp)
    73f4:	dc800415 	stw	r18,16(sp)
    73f8:	dc400315 	stw	r17,12(sp)
    73fc:	dfc00b15 	stw	ra,44(sp)
    7400:	df000a15 	stw	fp,40(sp)
    7404:	ddc00915 	stw	r23,36(sp)
    7408:	dd400715 	stw	r21,28(sp)
    740c:	dd000615 	stw	r20,24(sp)
    7410:	dcc00515 	stw	r19,20(sp)
    7414:	dc000215 	stw	r16,8(sp)
    7418:	2825883a 	mov	r18,r5
    741c:	3023883a 	mov	r17,r6
    7420:	202d883a 	mov	r22,r4
    7424:	2800c926 	beq	r5,zero,774c <_realloc_r+0x360>
    7428:	000ad980 	call	ad98 <__malloc_lock>
    742c:	943ffe04 	addi	r16,r18,-8
    7430:	88c002c4 	addi	r3,r17,11
    7434:	00800584 	movi	r2,22
    7438:	82000117 	ldw	r8,4(r16)
    743c:	10c01b2e 	bgeu	r2,r3,74ac <_realloc_r+0xc0>
    7440:	00bffe04 	movi	r2,-8
    7444:	188e703a 	and	r7,r3,r2
    7448:	3839883a 	mov	fp,r7
    744c:	38001a16 	blt	r7,zero,74b8 <_realloc_r+0xcc>
    7450:	e4401936 	bltu	fp,r17,74b8 <_realloc_r+0xcc>
    7454:	013fff04 	movi	r4,-4
    7458:	4126703a 	and	r19,r8,r4
    745c:	99c02616 	blt	r19,r7,74f8 <_realloc_r+0x10c>
    7460:	802b883a 	mov	r21,r16
    7464:	9829883a 	mov	r20,r19
    7468:	84000204 	addi	r16,r16,8
    746c:	a80f883a 	mov	r7,r21
    7470:	a70dc83a 	sub	r6,r20,fp
    7474:	008003c4 	movi	r2,15
    7478:	1180c136 	bltu	r2,r6,7780 <_realloc_r+0x394>
    747c:	38800117 	ldw	r2,4(r7)
    7480:	a549883a 	add	r4,r20,r21
    7484:	1080004c 	andi	r2,r2,1
    7488:	a084b03a 	or	r2,r20,r2
    748c:	38800115 	stw	r2,4(r7)
    7490:	20c00117 	ldw	r3,4(r4)
    7494:	18c00054 	ori	r3,r3,1
    7498:	20c00115 	stw	r3,4(r4)
    749c:	b009883a 	mov	r4,r22
    74a0:	000adb80 	call	adb8 <__malloc_unlock>
    74a4:	8023883a 	mov	r17,r16
    74a8:	00000606 	br	74c4 <_realloc_r+0xd8>
    74ac:	01c00404 	movi	r7,16
    74b0:	3839883a 	mov	fp,r7
    74b4:	e47fe72e 	bgeu	fp,r17,7454 <_realloc_r+0x68>
    74b8:	00800304 	movi	r2,12
    74bc:	0023883a 	mov	r17,zero
    74c0:	b0800015 	stw	r2,0(r22)
    74c4:	8805883a 	mov	r2,r17
    74c8:	dfc00b17 	ldw	ra,44(sp)
    74cc:	df000a17 	ldw	fp,40(sp)
    74d0:	ddc00917 	ldw	r23,36(sp)
    74d4:	dd800817 	ldw	r22,32(sp)
    74d8:	dd400717 	ldw	r21,28(sp)
    74dc:	dd000617 	ldw	r20,24(sp)
    74e0:	dcc00517 	ldw	r19,20(sp)
    74e4:	dc800417 	ldw	r18,16(sp)
    74e8:	dc400317 	ldw	r17,12(sp)
    74ec:	dc000217 	ldw	r16,8(sp)
    74f0:	dec00c04 	addi	sp,sp,48
    74f4:	f800283a 	ret
    74f8:	00800074 	movhi	r2,1
    74fc:	10b67404 	addi	r2,r2,-9776
    7500:	12400217 	ldw	r9,8(r2)
    7504:	84cd883a 	add	r6,r16,r19
    7508:	802b883a 	mov	r21,r16
    750c:	3240b926 	beq	r6,r9,77f4 <_realloc_r+0x408>
    7510:	31400117 	ldw	r5,4(r6)
    7514:	00bfff84 	movi	r2,-2
    7518:	2884703a 	and	r2,r5,r2
    751c:	1185883a 	add	r2,r2,r6
    7520:	10c00117 	ldw	r3,4(r2)
    7524:	18c0004c 	andi	r3,r3,1
    7528:	1807003a 	cmpeq	r3,r3,zero
    752c:	1800a326 	beq	r3,zero,77bc <_realloc_r+0x3d0>
    7530:	2908703a 	and	r4,r5,r4
    7534:	9929883a 	add	r20,r19,r4
    7538:	a1c0a30e 	bge	r20,r7,77c8 <_realloc_r+0x3dc>
    753c:	4080004c 	andi	r2,r8,1
    7540:	1000551e 	bne	r2,zero,7698 <_realloc_r+0x2ac>
    7544:	80800017 	ldw	r2,0(r16)
    7548:	80afc83a 	sub	r23,r16,r2
    754c:	b8c00117 	ldw	r3,4(r23)
    7550:	00bfff04 	movi	r2,-4
    7554:	1884703a 	and	r2,r3,r2
    7558:	30002e26 	beq	r6,zero,7614 <_realloc_r+0x228>
    755c:	3240b926 	beq	r6,r9,7844 <_realloc_r+0x458>
    7560:	98a9883a 	add	r20,r19,r2
    7564:	2509883a 	add	r4,r4,r20
    7568:	d9000015 	stw	r4,0(sp)
    756c:	21c02a16 	blt	r4,r7,7618 <_realloc_r+0x22c>
    7570:	30800317 	ldw	r2,12(r6)
    7574:	30c00217 	ldw	r3,8(r6)
    7578:	01400904 	movi	r5,36
    757c:	99bfff04 	addi	r6,r19,-4
    7580:	18800315 	stw	r2,12(r3)
    7584:	10c00215 	stw	r3,8(r2)
    7588:	b9000317 	ldw	r4,12(r23)
    758c:	b8800217 	ldw	r2,8(r23)
    7590:	b82b883a 	mov	r21,r23
    7594:	bc000204 	addi	r16,r23,8
    7598:	20800215 	stw	r2,8(r4)
    759c:	11000315 	stw	r4,12(r2)
    75a0:	2980e436 	bltu	r5,r6,7934 <_realloc_r+0x548>
    75a4:	008004c4 	movi	r2,19
    75a8:	9009883a 	mov	r4,r18
    75ac:	8011883a 	mov	r8,r16
    75b0:	11800f2e 	bgeu	r2,r6,75f0 <_realloc_r+0x204>
    75b4:	90800017 	ldw	r2,0(r18)
    75b8:	ba000404 	addi	r8,r23,16
    75bc:	91000204 	addi	r4,r18,8
    75c0:	b8800215 	stw	r2,8(r23)
    75c4:	90c00117 	ldw	r3,4(r18)
    75c8:	008006c4 	movi	r2,27
    75cc:	b8c00315 	stw	r3,12(r23)
    75d0:	1180072e 	bgeu	r2,r6,75f0 <_realloc_r+0x204>
    75d4:	90c00217 	ldw	r3,8(r18)
    75d8:	ba000604 	addi	r8,r23,24
    75dc:	91000404 	addi	r4,r18,16
    75e0:	b8c00415 	stw	r3,16(r23)
    75e4:	90800317 	ldw	r2,12(r18)
    75e8:	b8800515 	stw	r2,20(r23)
    75ec:	3140e726 	beq	r6,r5,798c <_realloc_r+0x5a0>
    75f0:	20800017 	ldw	r2,0(r4)
    75f4:	dd000017 	ldw	r20,0(sp)
    75f8:	b80f883a 	mov	r7,r23
    75fc:	40800015 	stw	r2,0(r8)
    7600:	20c00117 	ldw	r3,4(r4)
    7604:	40c00115 	stw	r3,4(r8)
    7608:	20800217 	ldw	r2,8(r4)
    760c:	40800215 	stw	r2,8(r8)
    7610:	003f9706 	br	7470 <_realloc_r+0x84>
    7614:	98a9883a 	add	r20,r19,r2
    7618:	a1c01f16 	blt	r20,r7,7698 <_realloc_r+0x2ac>
    761c:	b8c00317 	ldw	r3,12(r23)
    7620:	b8800217 	ldw	r2,8(r23)
    7624:	99bfff04 	addi	r6,r19,-4
    7628:	01400904 	movi	r5,36
    762c:	b82b883a 	mov	r21,r23
    7630:	18800215 	stw	r2,8(r3)
    7634:	10c00315 	stw	r3,12(r2)
    7638:	bc000204 	addi	r16,r23,8
    763c:	2980c336 	bltu	r5,r6,794c <_realloc_r+0x560>
    7640:	008004c4 	movi	r2,19
    7644:	9009883a 	mov	r4,r18
    7648:	8011883a 	mov	r8,r16
    764c:	11800f2e 	bgeu	r2,r6,768c <_realloc_r+0x2a0>
    7650:	90800017 	ldw	r2,0(r18)
    7654:	ba000404 	addi	r8,r23,16
    7658:	91000204 	addi	r4,r18,8
    765c:	b8800215 	stw	r2,8(r23)
    7660:	90c00117 	ldw	r3,4(r18)
    7664:	008006c4 	movi	r2,27
    7668:	b8c00315 	stw	r3,12(r23)
    766c:	1180072e 	bgeu	r2,r6,768c <_realloc_r+0x2a0>
    7670:	90c00217 	ldw	r3,8(r18)
    7674:	ba000604 	addi	r8,r23,24
    7678:	91000404 	addi	r4,r18,16
    767c:	b8c00415 	stw	r3,16(r23)
    7680:	90800317 	ldw	r2,12(r18)
    7684:	b8800515 	stw	r2,20(r23)
    7688:	3140c726 	beq	r6,r5,79a8 <_realloc_r+0x5bc>
    768c:	20800017 	ldw	r2,0(r4)
    7690:	b80f883a 	mov	r7,r23
    7694:	003fd906 	br	75fc <_realloc_r+0x210>
    7698:	880b883a 	mov	r5,r17
    769c:	b009883a 	mov	r4,r22
    76a0:	0000cc80 	call	cc8 <_malloc_r>
    76a4:	1023883a 	mov	r17,r2
    76a8:	10002526 	beq	r2,zero,7740 <_realloc_r+0x354>
    76ac:	80800117 	ldw	r2,4(r16)
    76b0:	00ffff84 	movi	r3,-2
    76b4:	893ffe04 	addi	r4,r17,-8
    76b8:	10c4703a 	and	r2,r2,r3
    76bc:	8085883a 	add	r2,r16,r2
    76c0:	20809526 	beq	r4,r2,7918 <_realloc_r+0x52c>
    76c4:	99bfff04 	addi	r6,r19,-4
    76c8:	01c00904 	movi	r7,36
    76cc:	39804536 	bltu	r7,r6,77e4 <_realloc_r+0x3f8>
    76d0:	008004c4 	movi	r2,19
    76d4:	9009883a 	mov	r4,r18
    76d8:	880b883a 	mov	r5,r17
    76dc:	11800f2e 	bgeu	r2,r6,771c <_realloc_r+0x330>
    76e0:	90800017 	ldw	r2,0(r18)
    76e4:	89400204 	addi	r5,r17,8
    76e8:	91000204 	addi	r4,r18,8
    76ec:	88800015 	stw	r2,0(r17)
    76f0:	90c00117 	ldw	r3,4(r18)
    76f4:	008006c4 	movi	r2,27
    76f8:	88c00115 	stw	r3,4(r17)
    76fc:	1180072e 	bgeu	r2,r6,771c <_realloc_r+0x330>
    7700:	90c00217 	ldw	r3,8(r18)
    7704:	89400404 	addi	r5,r17,16
    7708:	91000404 	addi	r4,r18,16
    770c:	88c00215 	stw	r3,8(r17)
    7710:	90800317 	ldw	r2,12(r18)
    7714:	88800315 	stw	r2,12(r17)
    7718:	31c09126 	beq	r6,r7,7960 <_realloc_r+0x574>
    771c:	20800017 	ldw	r2,0(r4)
    7720:	28800015 	stw	r2,0(r5)
    7724:	20c00117 	ldw	r3,4(r4)
    7728:	28c00115 	stw	r3,4(r5)
    772c:	20800217 	ldw	r2,8(r4)
    7730:	28800215 	stw	r2,8(r5)
    7734:	900b883a 	mov	r5,r18
    7738:	b009883a 	mov	r4,r22
    773c:	00054dc0 	call	54dc <_free_r>
    7740:	b009883a 	mov	r4,r22
    7744:	000adb80 	call	adb8 <__malloc_unlock>
    7748:	003f5e06 	br	74c4 <_realloc_r+0xd8>
    774c:	300b883a 	mov	r5,r6
    7750:	dfc00b17 	ldw	ra,44(sp)
    7754:	df000a17 	ldw	fp,40(sp)
    7758:	ddc00917 	ldw	r23,36(sp)
    775c:	dd800817 	ldw	r22,32(sp)
    7760:	dd400717 	ldw	r21,28(sp)
    7764:	dd000617 	ldw	r20,24(sp)
    7768:	dcc00517 	ldw	r19,20(sp)
    776c:	dc800417 	ldw	r18,16(sp)
    7770:	dc400317 	ldw	r17,12(sp)
    7774:	dc000217 	ldw	r16,8(sp)
    7778:	dec00c04 	addi	sp,sp,48
    777c:	0000cc81 	jmpi	cc8 <_malloc_r>
    7780:	38800117 	ldw	r2,4(r7)
    7784:	e54b883a 	add	r5,fp,r21
    7788:	31000054 	ori	r4,r6,1
    778c:	1080004c 	andi	r2,r2,1
    7790:	1704b03a 	or	r2,r2,fp
    7794:	38800115 	stw	r2,4(r7)
    7798:	29000115 	stw	r4,4(r5)
    779c:	2987883a 	add	r3,r5,r6
    77a0:	18800117 	ldw	r2,4(r3)
    77a4:	29400204 	addi	r5,r5,8
    77a8:	b009883a 	mov	r4,r22
    77ac:	10800054 	ori	r2,r2,1
    77b0:	18800115 	stw	r2,4(r3)
    77b4:	00054dc0 	call	54dc <_free_r>
    77b8:	003f3806 	br	749c <_realloc_r+0xb0>
    77bc:	000d883a 	mov	r6,zero
    77c0:	0009883a 	mov	r4,zero
    77c4:	003f5d06 	br	753c <_realloc_r+0x150>
    77c8:	30c00217 	ldw	r3,8(r6)
    77cc:	30800317 	ldw	r2,12(r6)
    77d0:	800f883a 	mov	r7,r16
    77d4:	84000204 	addi	r16,r16,8
    77d8:	10c00215 	stw	r3,8(r2)
    77dc:	18800315 	stw	r2,12(r3)
    77e0:	003f2306 	br	7470 <_realloc_r+0x84>
    77e4:	8809883a 	mov	r4,r17
    77e8:	900b883a 	mov	r5,r18
    77ec:	00061e80 	call	61e8 <memmove>
    77f0:	003fd006 	br	7734 <_realloc_r+0x348>
    77f4:	30800117 	ldw	r2,4(r6)
    77f8:	e0c00404 	addi	r3,fp,16
    77fc:	1108703a 	and	r4,r2,r4
    7800:	9905883a 	add	r2,r19,r4
    7804:	10ff4d16 	blt	r2,r3,753c <_realloc_r+0x150>
    7808:	1705c83a 	sub	r2,r2,fp
    780c:	870b883a 	add	r5,r16,fp
    7810:	10800054 	ori	r2,r2,1
    7814:	28800115 	stw	r2,4(r5)
    7818:	80c00117 	ldw	r3,4(r16)
    781c:	00800074 	movhi	r2,1
    7820:	10b67404 	addi	r2,r2,-9776
    7824:	b009883a 	mov	r4,r22
    7828:	18c0004c 	andi	r3,r3,1
    782c:	e0c6b03a 	or	r3,fp,r3
    7830:	11400215 	stw	r5,8(r2)
    7834:	80c00115 	stw	r3,4(r16)
    7838:	000adb80 	call	adb8 <__malloc_unlock>
    783c:	84400204 	addi	r17,r16,8
    7840:	003f2006 	br	74c4 <_realloc_r+0xd8>
    7844:	98a9883a 	add	r20,r19,r2
    7848:	2509883a 	add	r4,r4,r20
    784c:	e0800404 	addi	r2,fp,16
    7850:	d9000115 	stw	r4,4(sp)
    7854:	20bf7016 	blt	r4,r2,7618 <_realloc_r+0x22c>
    7858:	b8c00317 	ldw	r3,12(r23)
    785c:	b8800217 	ldw	r2,8(r23)
    7860:	99bfff04 	addi	r6,r19,-4
    7864:	01400904 	movi	r5,36
    7868:	18800215 	stw	r2,8(r3)
    786c:	10c00315 	stw	r3,12(r2)
    7870:	bc400204 	addi	r17,r23,8
    7874:	29804136 	bltu	r5,r6,797c <_realloc_r+0x590>
    7878:	008004c4 	movi	r2,19
    787c:	9009883a 	mov	r4,r18
    7880:	880f883a 	mov	r7,r17
    7884:	11800f2e 	bgeu	r2,r6,78c4 <_realloc_r+0x4d8>
    7888:	90800017 	ldw	r2,0(r18)
    788c:	b9c00404 	addi	r7,r23,16
    7890:	91000204 	addi	r4,r18,8
    7894:	b8800215 	stw	r2,8(r23)
    7898:	90c00117 	ldw	r3,4(r18)
    789c:	008006c4 	movi	r2,27
    78a0:	b8c00315 	stw	r3,12(r23)
    78a4:	1180072e 	bgeu	r2,r6,78c4 <_realloc_r+0x4d8>
    78a8:	90c00217 	ldw	r3,8(r18)
    78ac:	b9c00604 	addi	r7,r23,24
    78b0:	91000404 	addi	r4,r18,16
    78b4:	b8c00415 	stw	r3,16(r23)
    78b8:	90800317 	ldw	r2,12(r18)
    78bc:	b8800515 	stw	r2,20(r23)
    78c0:	31404026 	beq	r6,r5,79c4 <_realloc_r+0x5d8>
    78c4:	20800017 	ldw	r2,0(r4)
    78c8:	38800015 	stw	r2,0(r7)
    78cc:	20c00117 	ldw	r3,4(r4)
    78d0:	38c00115 	stw	r3,4(r7)
    78d4:	20800217 	ldw	r2,8(r4)
    78d8:	38800215 	stw	r2,8(r7)
    78dc:	d8c00117 	ldw	r3,4(sp)
    78e0:	bf0b883a 	add	r5,r23,fp
    78e4:	b009883a 	mov	r4,r22
    78e8:	1f05c83a 	sub	r2,r3,fp
    78ec:	10800054 	ori	r2,r2,1
    78f0:	28800115 	stw	r2,4(r5)
    78f4:	b8c00117 	ldw	r3,4(r23)
    78f8:	00800074 	movhi	r2,1
    78fc:	10b67404 	addi	r2,r2,-9776
    7900:	11400215 	stw	r5,8(r2)
    7904:	18c0004c 	andi	r3,r3,1
    7908:	e0c6b03a 	or	r3,fp,r3
    790c:	b8c00115 	stw	r3,4(r23)
    7910:	000adb80 	call	adb8 <__malloc_unlock>
    7914:	003eeb06 	br	74c4 <_realloc_r+0xd8>
    7918:	20800117 	ldw	r2,4(r4)
    791c:	00ffff04 	movi	r3,-4
    7920:	800f883a 	mov	r7,r16
    7924:	10c4703a 	and	r2,r2,r3
    7928:	98a9883a 	add	r20,r19,r2
    792c:	84000204 	addi	r16,r16,8
    7930:	003ecf06 	br	7470 <_realloc_r+0x84>
    7934:	900b883a 	mov	r5,r18
    7938:	8009883a 	mov	r4,r16
    793c:	00061e80 	call	61e8 <memmove>
    7940:	dd000017 	ldw	r20,0(sp)
    7944:	b80f883a 	mov	r7,r23
    7948:	003ec906 	br	7470 <_realloc_r+0x84>
    794c:	900b883a 	mov	r5,r18
    7950:	8009883a 	mov	r4,r16
    7954:	00061e80 	call	61e8 <memmove>
    7958:	b80f883a 	mov	r7,r23
    795c:	003ec406 	br	7470 <_realloc_r+0x84>
    7960:	90c00417 	ldw	r3,16(r18)
    7964:	89400604 	addi	r5,r17,24
    7968:	91000604 	addi	r4,r18,24
    796c:	88c00415 	stw	r3,16(r17)
    7970:	90800517 	ldw	r2,20(r18)
    7974:	88800515 	stw	r2,20(r17)
    7978:	003f6806 	br	771c <_realloc_r+0x330>
    797c:	900b883a 	mov	r5,r18
    7980:	8809883a 	mov	r4,r17
    7984:	00061e80 	call	61e8 <memmove>
    7988:	003fd406 	br	78dc <_realloc_r+0x4f0>
    798c:	90c00417 	ldw	r3,16(r18)
    7990:	91000604 	addi	r4,r18,24
    7994:	ba000804 	addi	r8,r23,32
    7998:	b8c00615 	stw	r3,24(r23)
    799c:	90800517 	ldw	r2,20(r18)
    79a0:	b8800715 	stw	r2,28(r23)
    79a4:	003f1206 	br	75f0 <_realloc_r+0x204>
    79a8:	90c00417 	ldw	r3,16(r18)
    79ac:	91000604 	addi	r4,r18,24
    79b0:	ba000804 	addi	r8,r23,32
    79b4:	b8c00615 	stw	r3,24(r23)
    79b8:	90800517 	ldw	r2,20(r18)
    79bc:	b8800715 	stw	r2,28(r23)
    79c0:	003f3206 	br	768c <_realloc_r+0x2a0>
    79c4:	90c00417 	ldw	r3,16(r18)
    79c8:	91000604 	addi	r4,r18,24
    79cc:	b9c00804 	addi	r7,r23,32
    79d0:	b8c00615 	stw	r3,24(r23)
    79d4:	90800517 	ldw	r2,20(r18)
    79d8:	b8800715 	stw	r2,28(r23)
    79dc:	003fb906 	br	78c4 <_realloc_r+0x4d8>

000079e0 <__isinfd>:
    79e0:	200d883a 	mov	r6,r4
    79e4:	0109c83a 	sub	r4,zero,r4
    79e8:	2188b03a 	or	r4,r4,r6
    79ec:	2008d7fa 	srli	r4,r4,31
    79f0:	00a00034 	movhi	r2,32768
    79f4:	10bfffc4 	addi	r2,r2,-1
    79f8:	1144703a 	and	r2,r2,r5
    79fc:	2088b03a 	or	r4,r4,r2
    7a00:	009ffc34 	movhi	r2,32752
    7a04:	1105c83a 	sub	r2,r2,r4
    7a08:	0087c83a 	sub	r3,zero,r2
    7a0c:	10c4b03a 	or	r2,r2,r3
    7a10:	1004d7fa 	srli	r2,r2,31
    7a14:	00c00044 	movi	r3,1
    7a18:	1885c83a 	sub	r2,r3,r2
    7a1c:	f800283a 	ret

00007a20 <__isnand>:
    7a20:	200d883a 	mov	r6,r4
    7a24:	0109c83a 	sub	r4,zero,r4
    7a28:	2188b03a 	or	r4,r4,r6
    7a2c:	2008d7fa 	srli	r4,r4,31
    7a30:	00a00034 	movhi	r2,32768
    7a34:	10bfffc4 	addi	r2,r2,-1
    7a38:	1144703a 	and	r2,r2,r5
    7a3c:	2088b03a 	or	r4,r4,r2
    7a40:	009ffc34 	movhi	r2,32752
    7a44:	1105c83a 	sub	r2,r2,r4
    7a48:	1004d7fa 	srli	r2,r2,31
    7a4c:	f800283a 	ret

00007a50 <__sclose>:
    7a50:	2940038f 	ldh	r5,14(r5)
    7a54:	0007d981 	jmpi	7d98 <_close_r>

00007a58 <__sseek>:
    7a58:	defffe04 	addi	sp,sp,-8
    7a5c:	dc000015 	stw	r16,0(sp)
    7a60:	2821883a 	mov	r16,r5
    7a64:	2940038f 	ldh	r5,14(r5)
    7a68:	dfc00115 	stw	ra,4(sp)
    7a6c:	00080100 	call	8010 <_lseek_r>
    7a70:	1007883a 	mov	r3,r2
    7a74:	00bfffc4 	movi	r2,-1
    7a78:	18800926 	beq	r3,r2,7aa0 <__sseek+0x48>
    7a7c:	8080030b 	ldhu	r2,12(r16)
    7a80:	80c01415 	stw	r3,80(r16)
    7a84:	10840014 	ori	r2,r2,4096
    7a88:	8080030d 	sth	r2,12(r16)
    7a8c:	1805883a 	mov	r2,r3
    7a90:	dfc00117 	ldw	ra,4(sp)
    7a94:	dc000017 	ldw	r16,0(sp)
    7a98:	dec00204 	addi	sp,sp,8
    7a9c:	f800283a 	ret
    7aa0:	8080030b 	ldhu	r2,12(r16)
    7aa4:	10bbffcc 	andi	r2,r2,61439
    7aa8:	8080030d 	sth	r2,12(r16)
    7aac:	1805883a 	mov	r2,r3
    7ab0:	dfc00117 	ldw	ra,4(sp)
    7ab4:	dc000017 	ldw	r16,0(sp)
    7ab8:	dec00204 	addi	sp,sp,8
    7abc:	f800283a 	ret

00007ac0 <__swrite>:
    7ac0:	2880030b 	ldhu	r2,12(r5)
    7ac4:	defffb04 	addi	sp,sp,-20
    7ac8:	dcc00315 	stw	r19,12(sp)
    7acc:	1080400c 	andi	r2,r2,256
    7ad0:	dc800215 	stw	r18,8(sp)
    7ad4:	dc400115 	stw	r17,4(sp)
    7ad8:	dc000015 	stw	r16,0(sp)
    7adc:	3027883a 	mov	r19,r6
    7ae0:	3825883a 	mov	r18,r7
    7ae4:	dfc00415 	stw	ra,16(sp)
    7ae8:	2821883a 	mov	r16,r5
    7aec:	000d883a 	mov	r6,zero
    7af0:	01c00084 	movi	r7,2
    7af4:	2023883a 	mov	r17,r4
    7af8:	10000226 	beq	r2,zero,7b04 <__swrite+0x44>
    7afc:	2940038f 	ldh	r5,14(r5)
    7b00:	00080100 	call	8010 <_lseek_r>
    7b04:	8080030b 	ldhu	r2,12(r16)
    7b08:	8140038f 	ldh	r5,14(r16)
    7b0c:	8809883a 	mov	r4,r17
    7b10:	10bbffcc 	andi	r2,r2,61439
    7b14:	980d883a 	mov	r6,r19
    7b18:	900f883a 	mov	r7,r18
    7b1c:	8080030d 	sth	r2,12(r16)
    7b20:	dfc00417 	ldw	ra,16(sp)
    7b24:	dcc00317 	ldw	r19,12(sp)
    7b28:	dc800217 	ldw	r18,8(sp)
    7b2c:	dc400117 	ldw	r17,4(sp)
    7b30:	dc000017 	ldw	r16,0(sp)
    7b34:	dec00504 	addi	sp,sp,20
    7b38:	0007c581 	jmpi	7c58 <_write_r>

00007b3c <__sread>:
    7b3c:	defffe04 	addi	sp,sp,-8
    7b40:	dc000015 	stw	r16,0(sp)
    7b44:	2821883a 	mov	r16,r5
    7b48:	2940038f 	ldh	r5,14(r5)
    7b4c:	dfc00115 	stw	ra,4(sp)
    7b50:	00080880 	call	8088 <_read_r>
    7b54:	1007883a 	mov	r3,r2
    7b58:	10000816 	blt	r2,zero,7b7c <__sread+0x40>
    7b5c:	80801417 	ldw	r2,80(r16)
    7b60:	10c5883a 	add	r2,r2,r3
    7b64:	80801415 	stw	r2,80(r16)
    7b68:	1805883a 	mov	r2,r3
    7b6c:	dfc00117 	ldw	ra,4(sp)
    7b70:	dc000017 	ldw	r16,0(sp)
    7b74:	dec00204 	addi	sp,sp,8
    7b78:	f800283a 	ret
    7b7c:	8080030b 	ldhu	r2,12(r16)
    7b80:	10bbffcc 	andi	r2,r2,61439
    7b84:	8080030d 	sth	r2,12(r16)
    7b88:	1805883a 	mov	r2,r3
    7b8c:	dfc00117 	ldw	ra,4(sp)
    7b90:	dc000017 	ldw	r16,0(sp)
    7b94:	dec00204 	addi	sp,sp,8
    7b98:	f800283a 	ret

00007b9c <strcmp>:
    7b9c:	2144b03a 	or	r2,r4,r5
    7ba0:	108000cc 	andi	r2,r2,3
    7ba4:	10001d1e 	bne	r2,zero,7c1c <strcmp+0x80>
    7ba8:	200f883a 	mov	r7,r4
    7bac:	28800017 	ldw	r2,0(r5)
    7bb0:	21000017 	ldw	r4,0(r4)
    7bb4:	280d883a 	mov	r6,r5
    7bb8:	2080161e 	bne	r4,r2,7c14 <strcmp+0x78>
    7bbc:	023fbff4 	movhi	r8,65279
    7bc0:	423fbfc4 	addi	r8,r8,-257
    7bc4:	2207883a 	add	r3,r4,r8
    7bc8:	01602074 	movhi	r5,32897
    7bcc:	29602004 	addi	r5,r5,-32640
    7bd0:	1946703a 	and	r3,r3,r5
    7bd4:	0104303a 	nor	r2,zero,r4
    7bd8:	10c4703a 	and	r2,r2,r3
    7bdc:	10001c1e 	bne	r2,zero,7c50 <strcmp+0xb4>
    7be0:	4013883a 	mov	r9,r8
    7be4:	2811883a 	mov	r8,r5
    7be8:	00000106 	br	7bf0 <strcmp+0x54>
    7bec:	1800181e 	bne	r3,zero,7c50 <strcmp+0xb4>
    7bf0:	39c00104 	addi	r7,r7,4
    7bf4:	39000017 	ldw	r4,0(r7)
    7bf8:	31800104 	addi	r6,r6,4
    7bfc:	31400017 	ldw	r5,0(r6)
    7c00:	2245883a 	add	r2,r4,r9
    7c04:	1204703a 	and	r2,r2,r8
    7c08:	0106303a 	nor	r3,zero,r4
    7c0c:	1886703a 	and	r3,r3,r2
    7c10:	217ff626 	beq	r4,r5,7bec <strcmp+0x50>
    7c14:	3809883a 	mov	r4,r7
    7c18:	300b883a 	mov	r5,r6
    7c1c:	20c00007 	ldb	r3,0(r4)
    7c20:	1800051e 	bne	r3,zero,7c38 <strcmp+0x9c>
    7c24:	00000606 	br	7c40 <strcmp+0xa4>
    7c28:	21000044 	addi	r4,r4,1
    7c2c:	20c00007 	ldb	r3,0(r4)
    7c30:	29400044 	addi	r5,r5,1
    7c34:	18000226 	beq	r3,zero,7c40 <strcmp+0xa4>
    7c38:	28800007 	ldb	r2,0(r5)
    7c3c:	18bffa26 	beq	r3,r2,7c28 <strcmp+0x8c>
    7c40:	20c00003 	ldbu	r3,0(r4)
    7c44:	28800003 	ldbu	r2,0(r5)
    7c48:	1885c83a 	sub	r2,r3,r2
    7c4c:	f800283a 	ret
    7c50:	0005883a 	mov	r2,zero
    7c54:	f800283a 	ret

00007c58 <_write_r>:
    7c58:	defffd04 	addi	sp,sp,-12
    7c5c:	dc000015 	stw	r16,0(sp)
    7c60:	04000074 	movhi	r16,1
    7c64:	8403aa04 	addi	r16,r16,3752
    7c68:	dc400115 	stw	r17,4(sp)
    7c6c:	80000015 	stw	zero,0(r16)
    7c70:	2023883a 	mov	r17,r4
    7c74:	2809883a 	mov	r4,r5
    7c78:	300b883a 	mov	r5,r6
    7c7c:	380d883a 	mov	r6,r7
    7c80:	dfc00215 	stw	ra,8(sp)
    7c84:	000b4cc0 	call	b4cc <write>
    7c88:	1007883a 	mov	r3,r2
    7c8c:	00bfffc4 	movi	r2,-1
    7c90:	18800626 	beq	r3,r2,7cac <_write_r+0x54>
    7c94:	1805883a 	mov	r2,r3
    7c98:	dfc00217 	ldw	ra,8(sp)
    7c9c:	dc400117 	ldw	r17,4(sp)
    7ca0:	dc000017 	ldw	r16,0(sp)
    7ca4:	dec00304 	addi	sp,sp,12
    7ca8:	f800283a 	ret
    7cac:	80800017 	ldw	r2,0(r16)
    7cb0:	103ff826 	beq	r2,zero,7c94 <_write_r+0x3c>
    7cb4:	88800015 	stw	r2,0(r17)
    7cb8:	1805883a 	mov	r2,r3
    7cbc:	dfc00217 	ldw	ra,8(sp)
    7cc0:	dc400117 	ldw	r17,4(sp)
    7cc4:	dc000017 	ldw	r16,0(sp)
    7cc8:	dec00304 	addi	sp,sp,12
    7ccc:	f800283a 	ret

00007cd0 <_calloc_r>:
    7cd0:	defffe04 	addi	sp,sp,-8
    7cd4:	dc400015 	stw	r17,0(sp)
    7cd8:	2023883a 	mov	r17,r4
    7cdc:	2809883a 	mov	r4,r5
    7ce0:	300b883a 	mov	r5,r6
    7ce4:	dfc00115 	stw	ra,4(sp)
    7ce8:	0000c680 	call	c68 <__mulsi3>
    7cec:	100b883a 	mov	r5,r2
    7cf0:	8809883a 	mov	r4,r17
    7cf4:	0000cc80 	call	cc8 <_malloc_r>
    7cf8:	1023883a 	mov	r17,r2
    7cfc:	01c00904 	movi	r7,36
    7d00:	10000d26 	beq	r2,zero,7d38 <_calloc_r+0x68>
    7d04:	10ffff17 	ldw	r3,-4(r2)
    7d08:	1009883a 	mov	r4,r2
    7d0c:	00bfff04 	movi	r2,-4
    7d10:	1886703a 	and	r3,r3,r2
    7d14:	1887883a 	add	r3,r3,r2
    7d18:	180d883a 	mov	r6,r3
    7d1c:	000b883a 	mov	r5,zero
    7d20:	38c01736 	bltu	r7,r3,7d80 <_calloc_r+0xb0>
    7d24:	008004c4 	movi	r2,19
    7d28:	10c00836 	bltu	r2,r3,7d4c <_calloc_r+0x7c>
    7d2c:	20000215 	stw	zero,8(r4)
    7d30:	20000015 	stw	zero,0(r4)
    7d34:	20000115 	stw	zero,4(r4)
    7d38:	8805883a 	mov	r2,r17
    7d3c:	dfc00117 	ldw	ra,4(sp)
    7d40:	dc400017 	ldw	r17,0(sp)
    7d44:	dec00204 	addi	sp,sp,8
    7d48:	f800283a 	ret
    7d4c:	008006c4 	movi	r2,27
    7d50:	88000015 	stw	zero,0(r17)
    7d54:	88000115 	stw	zero,4(r17)
    7d58:	89000204 	addi	r4,r17,8
    7d5c:	10fff32e 	bgeu	r2,r3,7d2c <_calloc_r+0x5c>
    7d60:	88000215 	stw	zero,8(r17)
    7d64:	88000315 	stw	zero,12(r17)
    7d68:	89000404 	addi	r4,r17,16
    7d6c:	19ffef1e 	bne	r3,r7,7d2c <_calloc_r+0x5c>
    7d70:	89000604 	addi	r4,r17,24
    7d74:	88000415 	stw	zero,16(r17)
    7d78:	88000515 	stw	zero,20(r17)
    7d7c:	003feb06 	br	7d2c <_calloc_r+0x5c>
    7d80:	00062c80 	call	62c8 <memset>
    7d84:	8805883a 	mov	r2,r17
    7d88:	dfc00117 	ldw	ra,4(sp)
    7d8c:	dc400017 	ldw	r17,0(sp)
    7d90:	dec00204 	addi	sp,sp,8
    7d94:	f800283a 	ret

00007d98 <_close_r>:
    7d98:	defffd04 	addi	sp,sp,-12
    7d9c:	dc000015 	stw	r16,0(sp)
    7da0:	04000074 	movhi	r16,1
    7da4:	8403aa04 	addi	r16,r16,3752
    7da8:	dc400115 	stw	r17,4(sp)
    7dac:	80000015 	stw	zero,0(r16)
    7db0:	2023883a 	mov	r17,r4
    7db4:	2809883a 	mov	r4,r5
    7db8:	dfc00215 	stw	ra,8(sp)
    7dbc:	000a7040 	call	a704 <close>
    7dc0:	1007883a 	mov	r3,r2
    7dc4:	00bfffc4 	movi	r2,-1
    7dc8:	18800626 	beq	r3,r2,7de4 <_close_r+0x4c>
    7dcc:	1805883a 	mov	r2,r3
    7dd0:	dfc00217 	ldw	ra,8(sp)
    7dd4:	dc400117 	ldw	r17,4(sp)
    7dd8:	dc000017 	ldw	r16,0(sp)
    7ddc:	dec00304 	addi	sp,sp,12
    7de0:	f800283a 	ret
    7de4:	80800017 	ldw	r2,0(r16)
    7de8:	103ff826 	beq	r2,zero,7dcc <_close_r+0x34>
    7dec:	88800015 	stw	r2,0(r17)
    7df0:	1805883a 	mov	r2,r3
    7df4:	dfc00217 	ldw	ra,8(sp)
    7df8:	dc400117 	ldw	r17,4(sp)
    7dfc:	dc000017 	ldw	r16,0(sp)
    7e00:	dec00304 	addi	sp,sp,12
    7e04:	f800283a 	ret

00007e08 <_fclose_r>:
    7e08:	defffc04 	addi	sp,sp,-16
    7e0c:	dc400115 	stw	r17,4(sp)
    7e10:	dc000015 	stw	r16,0(sp)
    7e14:	dfc00315 	stw	ra,12(sp)
    7e18:	dc800215 	stw	r18,8(sp)
    7e1c:	2821883a 	mov	r16,r5
    7e20:	2023883a 	mov	r17,r4
    7e24:	28002926 	beq	r5,zero,7ecc <_fclose_r+0xc4>
    7e28:	00051140 	call	5114 <__sfp_lock_acquire>
    7e2c:	88000226 	beq	r17,zero,7e38 <_fclose_r+0x30>
    7e30:	88800e17 	ldw	r2,56(r17)
    7e34:	10002d26 	beq	r2,zero,7eec <_fclose_r+0xe4>
    7e38:	8080030f 	ldh	r2,12(r16)
    7e3c:	10002226 	beq	r2,zero,7ec8 <_fclose_r+0xc0>
    7e40:	8809883a 	mov	r4,r17
    7e44:	800b883a 	mov	r5,r16
    7e48:	0004e8c0 	call	4e8c <_fflush_r>
    7e4c:	1025883a 	mov	r18,r2
    7e50:	80800b17 	ldw	r2,44(r16)
    7e54:	10000426 	beq	r2,zero,7e68 <_fclose_r+0x60>
    7e58:	81400717 	ldw	r5,28(r16)
    7e5c:	8809883a 	mov	r4,r17
    7e60:	103ee83a 	callr	r2
    7e64:	10002a16 	blt	r2,zero,7f10 <_fclose_r+0x108>
    7e68:	8080030b 	ldhu	r2,12(r16)
    7e6c:	1080200c 	andi	r2,r2,128
    7e70:	1000231e 	bne	r2,zero,7f00 <_fclose_r+0xf8>
    7e74:	81400c17 	ldw	r5,48(r16)
    7e78:	28000526 	beq	r5,zero,7e90 <_fclose_r+0x88>
    7e7c:	80801004 	addi	r2,r16,64
    7e80:	28800226 	beq	r5,r2,7e8c <_fclose_r+0x84>
    7e84:	8809883a 	mov	r4,r17
    7e88:	00054dc0 	call	54dc <_free_r>
    7e8c:	80000c15 	stw	zero,48(r16)
    7e90:	81401117 	ldw	r5,68(r16)
    7e94:	28000326 	beq	r5,zero,7ea4 <_fclose_r+0x9c>
    7e98:	8809883a 	mov	r4,r17
    7e9c:	00054dc0 	call	54dc <_free_r>
    7ea0:	80001115 	stw	zero,68(r16)
    7ea4:	8000030d 	sth	zero,12(r16)
    7ea8:	00051180 	call	5118 <__sfp_lock_release>
    7eac:	9005883a 	mov	r2,r18
    7eb0:	dfc00317 	ldw	ra,12(sp)
    7eb4:	dc800217 	ldw	r18,8(sp)
    7eb8:	dc400117 	ldw	r17,4(sp)
    7ebc:	dc000017 	ldw	r16,0(sp)
    7ec0:	dec00404 	addi	sp,sp,16
    7ec4:	f800283a 	ret
    7ec8:	00051180 	call	5118 <__sfp_lock_release>
    7ecc:	0025883a 	mov	r18,zero
    7ed0:	9005883a 	mov	r2,r18
    7ed4:	dfc00317 	ldw	ra,12(sp)
    7ed8:	dc800217 	ldw	r18,8(sp)
    7edc:	dc400117 	ldw	r17,4(sp)
    7ee0:	dc000017 	ldw	r16,0(sp)
    7ee4:	dec00404 	addi	sp,sp,16
    7ee8:	f800283a 	ret
    7eec:	8809883a 	mov	r4,r17
    7ef0:	00051240 	call	5124 <__sinit>
    7ef4:	8080030f 	ldh	r2,12(r16)
    7ef8:	103fd11e 	bne	r2,zero,7e40 <_fclose_r+0x38>
    7efc:	003ff206 	br	7ec8 <_fclose_r+0xc0>
    7f00:	81400417 	ldw	r5,16(r16)
    7f04:	8809883a 	mov	r4,r17
    7f08:	00054dc0 	call	54dc <_free_r>
    7f0c:	003fd906 	br	7e74 <_fclose_r+0x6c>
    7f10:	04bfffc4 	movi	r18,-1
    7f14:	003fd406 	br	7e68 <_fclose_r+0x60>

00007f18 <fclose>:
    7f18:	00800074 	movhi	r2,1
    7f1c:	10bcfe04 	addi	r2,r2,-3080
    7f20:	200b883a 	mov	r5,r4
    7f24:	11000017 	ldw	r4,0(r2)
    7f28:	0007e081 	jmpi	7e08 <_fclose_r>

00007f2c <_fstat_r>:
    7f2c:	defffd04 	addi	sp,sp,-12
    7f30:	dc000015 	stw	r16,0(sp)
    7f34:	04000074 	movhi	r16,1
    7f38:	8403aa04 	addi	r16,r16,3752
    7f3c:	dc400115 	stw	r17,4(sp)
    7f40:	80000015 	stw	zero,0(r16)
    7f44:	2023883a 	mov	r17,r4
    7f48:	2809883a 	mov	r4,r5
    7f4c:	300b883a 	mov	r5,r6
    7f50:	dfc00215 	stw	ra,8(sp)
    7f54:	000a8900 	call	a890 <fstat>
    7f58:	1007883a 	mov	r3,r2
    7f5c:	00bfffc4 	movi	r2,-1
    7f60:	18800626 	beq	r3,r2,7f7c <_fstat_r+0x50>
    7f64:	1805883a 	mov	r2,r3
    7f68:	dfc00217 	ldw	ra,8(sp)
    7f6c:	dc400117 	ldw	r17,4(sp)
    7f70:	dc000017 	ldw	r16,0(sp)
    7f74:	dec00304 	addi	sp,sp,12
    7f78:	f800283a 	ret
    7f7c:	80800017 	ldw	r2,0(r16)
    7f80:	103ff826 	beq	r2,zero,7f64 <_fstat_r+0x38>
    7f84:	88800015 	stw	r2,0(r17)
    7f88:	1805883a 	mov	r2,r3
    7f8c:	dfc00217 	ldw	ra,8(sp)
    7f90:	dc400117 	ldw	r17,4(sp)
    7f94:	dc000017 	ldw	r16,0(sp)
    7f98:	dec00304 	addi	sp,sp,12
    7f9c:	f800283a 	ret

00007fa0 <_isatty_r>:
    7fa0:	defffd04 	addi	sp,sp,-12
    7fa4:	dc000015 	stw	r16,0(sp)
    7fa8:	04000074 	movhi	r16,1
    7fac:	8403aa04 	addi	r16,r16,3752
    7fb0:	dc400115 	stw	r17,4(sp)
    7fb4:	80000015 	stw	zero,0(r16)
    7fb8:	2023883a 	mov	r17,r4
    7fbc:	2809883a 	mov	r4,r5
    7fc0:	dfc00215 	stw	ra,8(sp)
    7fc4:	000a9c80 	call	a9c8 <isatty>
    7fc8:	1007883a 	mov	r3,r2
    7fcc:	00bfffc4 	movi	r2,-1
    7fd0:	18800626 	beq	r3,r2,7fec <_isatty_r+0x4c>
    7fd4:	1805883a 	mov	r2,r3
    7fd8:	dfc00217 	ldw	ra,8(sp)
    7fdc:	dc400117 	ldw	r17,4(sp)
    7fe0:	dc000017 	ldw	r16,0(sp)
    7fe4:	dec00304 	addi	sp,sp,12
    7fe8:	f800283a 	ret
    7fec:	80800017 	ldw	r2,0(r16)
    7ff0:	103ff826 	beq	r2,zero,7fd4 <_isatty_r+0x34>
    7ff4:	88800015 	stw	r2,0(r17)
    7ff8:	1805883a 	mov	r2,r3
    7ffc:	dfc00217 	ldw	ra,8(sp)
    8000:	dc400117 	ldw	r17,4(sp)
    8004:	dc000017 	ldw	r16,0(sp)
    8008:	dec00304 	addi	sp,sp,12
    800c:	f800283a 	ret

00008010 <_lseek_r>:
    8010:	defffd04 	addi	sp,sp,-12
    8014:	dc000015 	stw	r16,0(sp)
    8018:	04000074 	movhi	r16,1
    801c:	8403aa04 	addi	r16,r16,3752
    8020:	dc400115 	stw	r17,4(sp)
    8024:	80000015 	stw	zero,0(r16)
    8028:	2023883a 	mov	r17,r4
    802c:	2809883a 	mov	r4,r5
    8030:	300b883a 	mov	r5,r6
    8034:	380d883a 	mov	r6,r7
    8038:	dfc00215 	stw	ra,8(sp)
    803c:	000abd80 	call	abd8 <lseek>
    8040:	1007883a 	mov	r3,r2
    8044:	00bfffc4 	movi	r2,-1
    8048:	18800626 	beq	r3,r2,8064 <_lseek_r+0x54>
    804c:	1805883a 	mov	r2,r3
    8050:	dfc00217 	ldw	ra,8(sp)
    8054:	dc400117 	ldw	r17,4(sp)
    8058:	dc000017 	ldw	r16,0(sp)
    805c:	dec00304 	addi	sp,sp,12
    8060:	f800283a 	ret
    8064:	80800017 	ldw	r2,0(r16)
    8068:	103ff826 	beq	r2,zero,804c <_lseek_r+0x3c>
    806c:	88800015 	stw	r2,0(r17)
    8070:	1805883a 	mov	r2,r3
    8074:	dfc00217 	ldw	ra,8(sp)
    8078:	dc400117 	ldw	r17,4(sp)
    807c:	dc000017 	ldw	r16,0(sp)
    8080:	dec00304 	addi	sp,sp,12
    8084:	f800283a 	ret

00008088 <_read_r>:
    8088:	defffd04 	addi	sp,sp,-12
    808c:	dc000015 	stw	r16,0(sp)
    8090:	04000074 	movhi	r16,1
    8094:	8403aa04 	addi	r16,r16,3752
    8098:	dc400115 	stw	r17,4(sp)
    809c:	80000015 	stw	zero,0(r16)
    80a0:	2023883a 	mov	r17,r4
    80a4:	2809883a 	mov	r4,r5
    80a8:	300b883a 	mov	r5,r6
    80ac:	380d883a 	mov	r6,r7
    80b0:	dfc00215 	stw	ra,8(sp)
    80b4:	000b0700 	call	b070 <read>
    80b8:	1007883a 	mov	r3,r2
    80bc:	00bfffc4 	movi	r2,-1
    80c0:	18800626 	beq	r3,r2,80dc <_read_r+0x54>
    80c4:	1805883a 	mov	r2,r3
    80c8:	dfc00217 	ldw	ra,8(sp)
    80cc:	dc400117 	ldw	r17,4(sp)
    80d0:	dc000017 	ldw	r16,0(sp)
    80d4:	dec00304 	addi	sp,sp,12
    80d8:	f800283a 	ret
    80dc:	80800017 	ldw	r2,0(r16)
    80e0:	103ff826 	beq	r2,zero,80c4 <_read_r+0x3c>
    80e4:	88800015 	stw	r2,0(r17)
    80e8:	1805883a 	mov	r2,r3
    80ec:	dfc00217 	ldw	ra,8(sp)
    80f0:	dc400117 	ldw	r17,4(sp)
    80f4:	dc000017 	ldw	r16,0(sp)
    80f8:	dec00304 	addi	sp,sp,12
    80fc:	f800283a 	ret

00008100 <__udivdi3>:
    8100:	defff104 	addi	sp,sp,-60
    8104:	0015883a 	mov	r10,zero
    8108:	2005883a 	mov	r2,r4
    810c:	3011883a 	mov	r8,r6
    8110:	df000d15 	stw	fp,52(sp)
    8114:	dd400a15 	stw	r21,40(sp)
    8118:	dcc00815 	stw	r19,32(sp)
    811c:	dfc00e15 	stw	ra,56(sp)
    8120:	ddc00c15 	stw	r23,48(sp)
    8124:	dd800b15 	stw	r22,44(sp)
    8128:	dd000915 	stw	r20,36(sp)
    812c:	dc800715 	stw	r18,28(sp)
    8130:	dc400615 	stw	r17,24(sp)
    8134:	dc000515 	stw	r16,20(sp)
    8138:	da800315 	stw	r10,12(sp)
    813c:	4027883a 	mov	r19,r8
    8140:	1039883a 	mov	fp,r2
    8144:	282b883a 	mov	r21,r5
    8148:	da800415 	stw	r10,16(sp)
    814c:	3800401e 	bne	r7,zero,8250 <__udivdi3+0x150>
    8150:	2a006536 	bltu	r5,r8,82e8 <__udivdi3+0x1e8>
    8154:	4000b526 	beq	r8,zero,842c <__udivdi3+0x32c>
    8158:	00bfffd4 	movui	r2,65535
    815c:	14c0ad36 	bltu	r2,r19,8414 <__udivdi3+0x314>
    8160:	00803fc4 	movi	r2,255
    8164:	14c15e36 	bltu	r2,r19,86e0 <__udivdi3+0x5e0>
    8168:	000b883a 	mov	r5,zero
    816c:	0005883a 	mov	r2,zero
    8170:	9884d83a 	srl	r2,r19,r2
    8174:	01000074 	movhi	r4,1
    8178:	21362904 	addi	r4,r4,-10076
    817c:	01800804 	movi	r6,32
    8180:	1105883a 	add	r2,r2,r4
    8184:	10c00003 	ldbu	r3,0(r2)
    8188:	28c7883a 	add	r3,r5,r3
    818c:	30e9c83a 	sub	r20,r6,r3
    8190:	a0010a1e 	bne	r20,zero,85bc <__udivdi3+0x4bc>
    8194:	982ed43a 	srli	r23,r19,16
    8198:	acebc83a 	sub	r21,r21,r19
    819c:	9dbfffcc 	andi	r22,r19,65535
    81a0:	05000044 	movi	r20,1
    81a4:	a809883a 	mov	r4,r21
    81a8:	b80b883a 	mov	r5,r23
    81ac:	0000c580 	call	c58 <__udivsi3>
    81b0:	100b883a 	mov	r5,r2
    81b4:	b009883a 	mov	r4,r22
    81b8:	1021883a 	mov	r16,r2
    81bc:	0000c680 	call	c68 <__mulsi3>
    81c0:	a809883a 	mov	r4,r21
    81c4:	b80b883a 	mov	r5,r23
    81c8:	1023883a 	mov	r17,r2
    81cc:	0000c600 	call	c60 <__umodsi3>
    81d0:	1004943a 	slli	r2,r2,16
    81d4:	e006d43a 	srli	r3,fp,16
    81d8:	10c4b03a 	or	r2,r2,r3
    81dc:	1440042e 	bgeu	r2,r17,81f0 <__udivdi3+0xf0>
    81e0:	14c5883a 	add	r2,r2,r19
    81e4:	843fffc4 	addi	r16,r16,-1
    81e8:	14c00136 	bltu	r2,r19,81f0 <__udivdi3+0xf0>
    81ec:	14415c36 	bltu	r2,r17,8760 <__udivdi3+0x660>
    81f0:	1463c83a 	sub	r17,r2,r17
    81f4:	8809883a 	mov	r4,r17
    81f8:	b80b883a 	mov	r5,r23
    81fc:	0000c580 	call	c58 <__udivsi3>
    8200:	100b883a 	mov	r5,r2
    8204:	b009883a 	mov	r4,r22
    8208:	102b883a 	mov	r21,r2
    820c:	0000c680 	call	c68 <__mulsi3>
    8210:	8809883a 	mov	r4,r17
    8214:	b80b883a 	mov	r5,r23
    8218:	1025883a 	mov	r18,r2
    821c:	0000c600 	call	c60 <__umodsi3>
    8220:	1004943a 	slli	r2,r2,16
    8224:	e0ffffcc 	andi	r3,fp,65535
    8228:	10c4b03a 	or	r2,r2,r3
    822c:	1480042e 	bgeu	r2,r18,8240 <__udivdi3+0x140>
    8230:	9885883a 	add	r2,r19,r2
    8234:	ad7fffc4 	addi	r21,r21,-1
    8238:	14c00136 	bltu	r2,r19,8240 <__udivdi3+0x140>
    823c:	14813c36 	bltu	r2,r18,8730 <__udivdi3+0x630>
    8240:	8004943a 	slli	r2,r16,16
    8244:	a009883a 	mov	r4,r20
    8248:	a884b03a 	or	r2,r21,r2
    824c:	00001506 	br	82a4 <__udivdi3+0x1a4>
    8250:	380d883a 	mov	r6,r7
    8254:	29c06c36 	bltu	r5,r7,8408 <__udivdi3+0x308>
    8258:	00bfffd4 	movui	r2,65535
    825c:	11c06436 	bltu	r2,r7,83f0 <__udivdi3+0x2f0>
    8260:	00803fc4 	movi	r2,255
    8264:	11c11836 	bltu	r2,r7,86c8 <__udivdi3+0x5c8>
    8268:	000b883a 	mov	r5,zero
    826c:	0005883a 	mov	r2,zero
    8270:	3084d83a 	srl	r2,r6,r2
    8274:	01000074 	movhi	r4,1
    8278:	21362904 	addi	r4,r4,-10076
    827c:	01c00804 	movi	r7,32
    8280:	1105883a 	add	r2,r2,r4
    8284:	10c00003 	ldbu	r3,0(r2)
    8288:	28c7883a 	add	r3,r5,r3
    828c:	38edc83a 	sub	r22,r7,r3
    8290:	b000731e 	bne	r22,zero,8460 <__udivdi3+0x360>
    8294:	35400136 	bltu	r6,r21,829c <__udivdi3+0x19c>
    8298:	e4c05b36 	bltu	fp,r19,8408 <__udivdi3+0x308>
    829c:	00800044 	movi	r2,1
    82a0:	0009883a 	mov	r4,zero
    82a4:	d8800315 	stw	r2,12(sp)
    82a8:	d9400317 	ldw	r5,12(sp)
    82ac:	2007883a 	mov	r3,r4
    82b0:	d9000415 	stw	r4,16(sp)
    82b4:	2805883a 	mov	r2,r5
    82b8:	dfc00e17 	ldw	ra,56(sp)
    82bc:	df000d17 	ldw	fp,52(sp)
    82c0:	ddc00c17 	ldw	r23,48(sp)
    82c4:	dd800b17 	ldw	r22,44(sp)
    82c8:	dd400a17 	ldw	r21,40(sp)
    82cc:	dd000917 	ldw	r20,36(sp)
    82d0:	dcc00817 	ldw	r19,32(sp)
    82d4:	dc800717 	ldw	r18,28(sp)
    82d8:	dc400617 	ldw	r17,24(sp)
    82dc:	dc000517 	ldw	r16,20(sp)
    82e0:	dec00f04 	addi	sp,sp,60
    82e4:	f800283a 	ret
    82e8:	00bfffd4 	movui	r2,65535
    82ec:	12005636 	bltu	r2,r8,8448 <__udivdi3+0x348>
    82f0:	00803fc4 	movi	r2,255
    82f4:	12010036 	bltu	r2,r8,86f8 <__udivdi3+0x5f8>
    82f8:	000b883a 	mov	r5,zero
    82fc:	0005883a 	mov	r2,zero
    8300:	9884d83a 	srl	r2,r19,r2
    8304:	01000074 	movhi	r4,1
    8308:	21362904 	addi	r4,r4,-10076
    830c:	01800804 	movi	r6,32
    8310:	1105883a 	add	r2,r2,r4
    8314:	10c00003 	ldbu	r3,0(r2)
    8318:	28c7883a 	add	r3,r5,r3
    831c:	30cbc83a 	sub	r5,r6,r3
    8320:	28000626 	beq	r5,zero,833c <__udivdi3+0x23c>
    8324:	3145c83a 	sub	r2,r6,r5
    8328:	e084d83a 	srl	r2,fp,r2
    832c:	a946983a 	sll	r3,r21,r5
    8330:	e178983a 	sll	fp,fp,r5
    8334:	9966983a 	sll	r19,r19,r5
    8338:	18aab03a 	or	r21,r3,r2
    833c:	982ed43a 	srli	r23,r19,16
    8340:	a809883a 	mov	r4,r21
    8344:	9cbfffcc 	andi	r18,r19,65535
    8348:	b80b883a 	mov	r5,r23
    834c:	0000c580 	call	c58 <__udivsi3>
    8350:	100b883a 	mov	r5,r2
    8354:	9009883a 	mov	r4,r18
    8358:	1021883a 	mov	r16,r2
    835c:	0000c680 	call	c68 <__mulsi3>
    8360:	a809883a 	mov	r4,r21
    8364:	b80b883a 	mov	r5,r23
    8368:	1023883a 	mov	r17,r2
    836c:	0000c600 	call	c60 <__umodsi3>
    8370:	1004943a 	slli	r2,r2,16
    8374:	e006d43a 	srli	r3,fp,16
    8378:	10c4b03a 	or	r2,r2,r3
    837c:	1440042e 	bgeu	r2,r17,8390 <__udivdi3+0x290>
    8380:	14c5883a 	add	r2,r2,r19
    8384:	843fffc4 	addi	r16,r16,-1
    8388:	14c00136 	bltu	r2,r19,8390 <__udivdi3+0x290>
    838c:	1440ea36 	bltu	r2,r17,8738 <__udivdi3+0x638>
    8390:	1463c83a 	sub	r17,r2,r17
    8394:	8809883a 	mov	r4,r17
    8398:	b80b883a 	mov	r5,r23
    839c:	0000c580 	call	c58 <__udivsi3>
    83a0:	100b883a 	mov	r5,r2
    83a4:	9009883a 	mov	r4,r18
    83a8:	102b883a 	mov	r21,r2
    83ac:	0000c680 	call	c68 <__mulsi3>
    83b0:	8809883a 	mov	r4,r17
    83b4:	b80b883a 	mov	r5,r23
    83b8:	1025883a 	mov	r18,r2
    83bc:	0000c600 	call	c60 <__umodsi3>
    83c0:	1004943a 	slli	r2,r2,16
    83c4:	e0ffffcc 	andi	r3,fp,65535
    83c8:	10c4b03a 	or	r2,r2,r3
    83cc:	1480042e 	bgeu	r2,r18,83e0 <__udivdi3+0x2e0>
    83d0:	9885883a 	add	r2,r19,r2
    83d4:	ad7fffc4 	addi	r21,r21,-1
    83d8:	14c00136 	bltu	r2,r19,83e0 <__udivdi3+0x2e0>
    83dc:	1480d936 	bltu	r2,r18,8744 <__udivdi3+0x644>
    83e0:	8004943a 	slli	r2,r16,16
    83e4:	0009883a 	mov	r4,zero
    83e8:	a884b03a 	or	r2,r21,r2
    83ec:	003fad06 	br	82a4 <__udivdi3+0x1a4>
    83f0:	00804034 	movhi	r2,256
    83f4:	10bfffc4 	addi	r2,r2,-1
    83f8:	11c0b636 	bltu	r2,r7,86d4 <__udivdi3+0x5d4>
    83fc:	01400404 	movi	r5,16
    8400:	2805883a 	mov	r2,r5
    8404:	003f9a06 	br	8270 <__udivdi3+0x170>
    8408:	0005883a 	mov	r2,zero
    840c:	0009883a 	mov	r4,zero
    8410:	003fa406 	br	82a4 <__udivdi3+0x1a4>
    8414:	00804034 	movhi	r2,256
    8418:	10bfffc4 	addi	r2,r2,-1
    841c:	14c0b336 	bltu	r2,r19,86ec <__udivdi3+0x5ec>
    8420:	01400404 	movi	r5,16
    8424:	2805883a 	mov	r2,r5
    8428:	003f5106 	br	8170 <__udivdi3+0x70>
    842c:	01000044 	movi	r4,1
    8430:	000b883a 	mov	r5,zero
    8434:	0000c580 	call	c58 <__udivsi3>
    8438:	1027883a 	mov	r19,r2
    843c:	00bfffd4 	movui	r2,65535
    8440:	14fff436 	bltu	r2,r19,8414 <__udivdi3+0x314>
    8444:	003f4606 	br	8160 <__udivdi3+0x60>
    8448:	00804034 	movhi	r2,256
    844c:	10bfffc4 	addi	r2,r2,-1
    8450:	1200ac36 	bltu	r2,r8,8704 <__udivdi3+0x604>
    8454:	01400404 	movi	r5,16
    8458:	2805883a 	mov	r2,r5
    845c:	003fa806 	br	8300 <__udivdi3+0x200>
    8460:	3d85c83a 	sub	r2,r7,r22
    8464:	3588983a 	sll	r4,r6,r22
    8468:	9886d83a 	srl	r3,r19,r2
    846c:	a8a2d83a 	srl	r17,r21,r2
    8470:	e084d83a 	srl	r2,fp,r2
    8474:	20eeb03a 	or	r23,r4,r3
    8478:	b824d43a 	srli	r18,r23,16
    847c:	ad86983a 	sll	r3,r21,r22
    8480:	8809883a 	mov	r4,r17
    8484:	900b883a 	mov	r5,r18
    8488:	1886b03a 	or	r3,r3,r2
    848c:	d8c00115 	stw	r3,4(sp)
    8490:	bc3fffcc 	andi	r16,r23,65535
    8494:	0000c580 	call	c58 <__udivsi3>
    8498:	100b883a 	mov	r5,r2
    849c:	8009883a 	mov	r4,r16
    84a0:	1029883a 	mov	r20,r2
    84a4:	0000c680 	call	c68 <__mulsi3>
    84a8:	900b883a 	mov	r5,r18
    84ac:	8809883a 	mov	r4,r17
    84b0:	102b883a 	mov	r21,r2
    84b4:	0000c600 	call	c60 <__umodsi3>
    84b8:	d9400117 	ldw	r5,4(sp)
    84bc:	1004943a 	slli	r2,r2,16
    84c0:	9da6983a 	sll	r19,r19,r22
    84c4:	2806d43a 	srli	r3,r5,16
    84c8:	10c4b03a 	or	r2,r2,r3
    84cc:	1540032e 	bgeu	r2,r21,84dc <__udivdi3+0x3dc>
    84d0:	15c5883a 	add	r2,r2,r23
    84d4:	a53fffc4 	addi	r20,r20,-1
    84d8:	15c0912e 	bgeu	r2,r23,8720 <__udivdi3+0x620>
    84dc:	1563c83a 	sub	r17,r2,r21
    84e0:	8809883a 	mov	r4,r17
    84e4:	900b883a 	mov	r5,r18
    84e8:	0000c580 	call	c58 <__udivsi3>
    84ec:	100b883a 	mov	r5,r2
    84f0:	8009883a 	mov	r4,r16
    84f4:	102b883a 	mov	r21,r2
    84f8:	0000c680 	call	c68 <__mulsi3>
    84fc:	8809883a 	mov	r4,r17
    8500:	900b883a 	mov	r5,r18
    8504:	1021883a 	mov	r16,r2
    8508:	0000c600 	call	c60 <__umodsi3>
    850c:	da800117 	ldw	r10,4(sp)
    8510:	1004943a 	slli	r2,r2,16
    8514:	50ffffcc 	andi	r3,r10,65535
    8518:	10c6b03a 	or	r3,r2,r3
    851c:	1c00032e 	bgeu	r3,r16,852c <__udivdi3+0x42c>
    8520:	1dc7883a 	add	r3,r3,r23
    8524:	ad7fffc4 	addi	r21,r21,-1
    8528:	1dc0792e 	bgeu	r3,r23,8710 <__udivdi3+0x610>
    852c:	a004943a 	slli	r2,r20,16
    8530:	982ed43a 	srli	r23,r19,16
    8534:	9cffffcc 	andi	r19,r19,65535
    8538:	a8a4b03a 	or	r18,r21,r2
    853c:	947fffcc 	andi	r17,r18,65535
    8540:	902ad43a 	srli	r21,r18,16
    8544:	8809883a 	mov	r4,r17
    8548:	980b883a 	mov	r5,r19
    854c:	1c21c83a 	sub	r16,r3,r16
    8550:	0000c680 	call	c68 <__mulsi3>
    8554:	8809883a 	mov	r4,r17
    8558:	b80b883a 	mov	r5,r23
    855c:	1029883a 	mov	r20,r2
    8560:	0000c680 	call	c68 <__mulsi3>
    8564:	980b883a 	mov	r5,r19
    8568:	a809883a 	mov	r4,r21
    856c:	1023883a 	mov	r17,r2
    8570:	0000c680 	call	c68 <__mulsi3>
    8574:	a809883a 	mov	r4,r21
    8578:	b80b883a 	mov	r5,r23
    857c:	1027883a 	mov	r19,r2
    8580:	0000c680 	call	c68 <__mulsi3>
    8584:	1009883a 	mov	r4,r2
    8588:	a004d43a 	srli	r2,r20,16
    858c:	8ce3883a 	add	r17,r17,r19
    8590:	1447883a 	add	r3,r2,r17
    8594:	1cc0022e 	bgeu	r3,r19,85a0 <__udivdi3+0x4a0>
    8598:	00800074 	movhi	r2,1
    859c:	2089883a 	add	r4,r4,r2
    85a0:	1804d43a 	srli	r2,r3,16
    85a4:	2085883a 	add	r2,r4,r2
    85a8:	80804436 	bltu	r16,r2,86bc <__udivdi3+0x5bc>
    85ac:	80803e26 	beq	r16,r2,86a8 <__udivdi3+0x5a8>
    85b0:	9005883a 	mov	r2,r18
    85b4:	0009883a 	mov	r4,zero
    85b8:	003f3a06 	br	82a4 <__udivdi3+0x1a4>
    85bc:	9d26983a 	sll	r19,r19,r20
    85c0:	3505c83a 	sub	r2,r6,r20
    85c4:	a8a2d83a 	srl	r17,r21,r2
    85c8:	982ed43a 	srli	r23,r19,16
    85cc:	e084d83a 	srl	r2,fp,r2
    85d0:	ad06983a 	sll	r3,r21,r20
    85d4:	8809883a 	mov	r4,r17
    85d8:	b80b883a 	mov	r5,r23
    85dc:	1886b03a 	or	r3,r3,r2
    85e0:	d8c00015 	stw	r3,0(sp)
    85e4:	9dbfffcc 	andi	r22,r19,65535
    85e8:	0000c580 	call	c58 <__udivsi3>
    85ec:	100b883a 	mov	r5,r2
    85f0:	b009883a 	mov	r4,r22
    85f4:	d8800215 	stw	r2,8(sp)
    85f8:	0000c680 	call	c68 <__mulsi3>
    85fc:	8809883a 	mov	r4,r17
    8600:	b80b883a 	mov	r5,r23
    8604:	102b883a 	mov	r21,r2
    8608:	0000c600 	call	c60 <__umodsi3>
    860c:	d9000017 	ldw	r4,0(sp)
    8610:	1004943a 	slli	r2,r2,16
    8614:	2006d43a 	srli	r3,r4,16
    8618:	10c4b03a 	or	r2,r2,r3
    861c:	1540052e 	bgeu	r2,r21,8634 <__udivdi3+0x534>
    8620:	d9400217 	ldw	r5,8(sp)
    8624:	14c5883a 	add	r2,r2,r19
    8628:	297fffc4 	addi	r5,r5,-1
    862c:	d9400215 	stw	r5,8(sp)
    8630:	14c0462e 	bgeu	r2,r19,874c <__udivdi3+0x64c>
    8634:	1563c83a 	sub	r17,r2,r21
    8638:	8809883a 	mov	r4,r17
    863c:	b80b883a 	mov	r5,r23
    8640:	0000c580 	call	c58 <__udivsi3>
    8644:	100b883a 	mov	r5,r2
    8648:	b009883a 	mov	r4,r22
    864c:	1025883a 	mov	r18,r2
    8650:	0000c680 	call	c68 <__mulsi3>
    8654:	8809883a 	mov	r4,r17
    8658:	b80b883a 	mov	r5,r23
    865c:	1021883a 	mov	r16,r2
    8660:	0000c600 	call	c60 <__umodsi3>
    8664:	da800017 	ldw	r10,0(sp)
    8668:	1004943a 	slli	r2,r2,16
    866c:	50ffffcc 	andi	r3,r10,65535
    8670:	10c6b03a 	or	r3,r2,r3
    8674:	1c00062e 	bgeu	r3,r16,8690 <__udivdi3+0x590>
    8678:	1cc7883a 	add	r3,r3,r19
    867c:	94bfffc4 	addi	r18,r18,-1
    8680:	1cc00336 	bltu	r3,r19,8690 <__udivdi3+0x590>
    8684:	1c00022e 	bgeu	r3,r16,8690 <__udivdi3+0x590>
    8688:	94bfffc4 	addi	r18,r18,-1
    868c:	1cc7883a 	add	r3,r3,r19
    8690:	d9000217 	ldw	r4,8(sp)
    8694:	e538983a 	sll	fp,fp,r20
    8698:	1c2bc83a 	sub	r21,r3,r16
    869c:	2004943a 	slli	r2,r4,16
    86a0:	90a8b03a 	or	r20,r18,r2
    86a4:	003ebf06 	br	81a4 <__udivdi3+0xa4>
    86a8:	1804943a 	slli	r2,r3,16
    86ac:	e588983a 	sll	r4,fp,r22
    86b0:	a0ffffcc 	andi	r3,r20,65535
    86b4:	10c5883a 	add	r2,r2,r3
    86b8:	20bfbd2e 	bgeu	r4,r2,85b0 <__udivdi3+0x4b0>
    86bc:	90bfffc4 	addi	r2,r18,-1
    86c0:	0009883a 	mov	r4,zero
    86c4:	003ef706 	br	82a4 <__udivdi3+0x1a4>
    86c8:	01400204 	movi	r5,8
    86cc:	2805883a 	mov	r2,r5
    86d0:	003ee706 	br	8270 <__udivdi3+0x170>
    86d4:	01400604 	movi	r5,24
    86d8:	2805883a 	mov	r2,r5
    86dc:	003ee406 	br	8270 <__udivdi3+0x170>
    86e0:	01400204 	movi	r5,8
    86e4:	2805883a 	mov	r2,r5
    86e8:	003ea106 	br	8170 <__udivdi3+0x70>
    86ec:	01400604 	movi	r5,24
    86f0:	2805883a 	mov	r2,r5
    86f4:	003e9e06 	br	8170 <__udivdi3+0x70>
    86f8:	01400204 	movi	r5,8
    86fc:	2805883a 	mov	r2,r5
    8700:	003eff06 	br	8300 <__udivdi3+0x200>
    8704:	01400604 	movi	r5,24
    8708:	2805883a 	mov	r2,r5
    870c:	003efc06 	br	8300 <__udivdi3+0x200>
    8710:	1c3f862e 	bgeu	r3,r16,852c <__udivdi3+0x42c>
    8714:	1dc7883a 	add	r3,r3,r23
    8718:	ad7fffc4 	addi	r21,r21,-1
    871c:	003f8306 	br	852c <__udivdi3+0x42c>
    8720:	157f6e2e 	bgeu	r2,r21,84dc <__udivdi3+0x3dc>
    8724:	a53fffc4 	addi	r20,r20,-1
    8728:	15c5883a 	add	r2,r2,r23
    872c:	003f6b06 	br	84dc <__udivdi3+0x3dc>
    8730:	ad7fffc4 	addi	r21,r21,-1
    8734:	003ec206 	br	8240 <__udivdi3+0x140>
    8738:	843fffc4 	addi	r16,r16,-1
    873c:	14c5883a 	add	r2,r2,r19
    8740:	003f1306 	br	8390 <__udivdi3+0x290>
    8744:	ad7fffc4 	addi	r21,r21,-1
    8748:	003f2506 	br	83e0 <__udivdi3+0x2e0>
    874c:	157fb92e 	bgeu	r2,r21,8634 <__udivdi3+0x534>
    8750:	297fffc4 	addi	r5,r5,-1
    8754:	14c5883a 	add	r2,r2,r19
    8758:	d9400215 	stw	r5,8(sp)
    875c:	003fb506 	br	8634 <__udivdi3+0x534>
    8760:	843fffc4 	addi	r16,r16,-1
    8764:	14c5883a 	add	r2,r2,r19
    8768:	003ea106 	br	81f0 <__udivdi3+0xf0>

0000876c <__umoddi3>:
    876c:	defff004 	addi	sp,sp,-64
    8770:	3011883a 	mov	r8,r6
    8774:	000d883a 	mov	r6,zero
    8778:	dd400b15 	stw	r21,44(sp)
    877c:	dcc00915 	stw	r19,36(sp)
    8780:	dc000615 	stw	r16,24(sp)
    8784:	dfc00f15 	stw	ra,60(sp)
    8788:	df000e15 	stw	fp,56(sp)
    878c:	ddc00d15 	stw	r23,52(sp)
    8790:	dd800c15 	stw	r22,48(sp)
    8794:	dd000a15 	stw	r20,40(sp)
    8798:	dc800815 	stw	r18,32(sp)
    879c:	dc400715 	stw	r17,28(sp)
    87a0:	2817883a 	mov	r11,r5
    87a4:	d9800415 	stw	r6,16(sp)
    87a8:	4027883a 	mov	r19,r8
    87ac:	d9800515 	stw	r6,20(sp)
    87b0:	2021883a 	mov	r16,r4
    87b4:	282b883a 	mov	r21,r5
    87b8:	38002c1e 	bne	r7,zero,886c <__umoddi3+0x100>
    87bc:	2a005636 	bltu	r5,r8,8918 <__umoddi3+0x1ac>
    87c0:	40009a26 	beq	r8,zero,8a2c <__umoddi3+0x2c0>
    87c4:	00bfffd4 	movui	r2,65535
    87c8:	14c09236 	bltu	r2,r19,8a14 <__umoddi3+0x2a8>
    87cc:	00803fc4 	movi	r2,255
    87d0:	14c15c36 	bltu	r2,r19,8d44 <__umoddi3+0x5d8>
    87d4:	000b883a 	mov	r5,zero
    87d8:	0005883a 	mov	r2,zero
    87dc:	9884d83a 	srl	r2,r19,r2
    87e0:	01000074 	movhi	r4,1
    87e4:	21362904 	addi	r4,r4,-10076
    87e8:	01800804 	movi	r6,32
    87ec:	1105883a 	add	r2,r2,r4
    87f0:	10c00003 	ldbu	r3,0(r2)
    87f4:	28c7883a 	add	r3,r5,r3
    87f8:	30e5c83a 	sub	r18,r6,r3
    87fc:	9000a41e 	bne	r18,zero,8a90 <__umoddi3+0x324>
    8800:	982ed43a 	srli	r23,r19,16
    8804:	acebc83a 	sub	r21,r21,r19
    8808:	9d3fffcc 	andi	r20,r19,65535
    880c:	002d883a 	mov	r22,zero
    8810:	a809883a 	mov	r4,r21
    8814:	b80b883a 	mov	r5,r23
    8818:	0000c580 	call	c58 <__udivsi3>
    881c:	100b883a 	mov	r5,r2
    8820:	a009883a 	mov	r4,r20
    8824:	0000c680 	call	c68 <__mulsi3>
    8828:	a809883a 	mov	r4,r21
    882c:	b80b883a 	mov	r5,r23
    8830:	1023883a 	mov	r17,r2
    8834:	0000c600 	call	c60 <__umodsi3>
    8838:	1004943a 	slli	r2,r2,16
    883c:	8006d43a 	srli	r3,r16,16
    8840:	10c4b03a 	or	r2,r2,r3
    8844:	1440032e 	bgeu	r2,r17,8854 <__umoddi3+0xe8>
    8848:	14c5883a 	add	r2,r2,r19
    884c:	14c00136 	bltu	r2,r19,8854 <__umoddi3+0xe8>
    8850:	14415836 	bltu	r2,r17,8db4 <__umoddi3+0x648>
    8854:	1463c83a 	sub	r17,r2,r17
    8858:	8809883a 	mov	r4,r17
    885c:	b80b883a 	mov	r5,r23
    8860:	0000c580 	call	c58 <__udivsi3>
    8864:	a009883a 	mov	r4,r20
    8868:	00005306 	br	89b8 <__umoddi3+0x24c>
    886c:	380d883a 	mov	r6,r7
    8870:	29c0132e 	bgeu	r5,r7,88c0 <__umoddi3+0x154>
    8874:	d9000415 	stw	r4,16(sp)
    8878:	d9400515 	stw	r5,20(sp)
    887c:	d9400417 	ldw	r5,16(sp)
    8880:	5813883a 	mov	r9,r11
    8884:	2811883a 	mov	r8,r5
    8888:	4005883a 	mov	r2,r8
    888c:	4807883a 	mov	r3,r9
    8890:	dfc00f17 	ldw	ra,60(sp)
    8894:	df000e17 	ldw	fp,56(sp)
    8898:	ddc00d17 	ldw	r23,52(sp)
    889c:	dd800c17 	ldw	r22,48(sp)
    88a0:	dd400b17 	ldw	r21,44(sp)
    88a4:	dd000a17 	ldw	r20,40(sp)
    88a8:	dcc00917 	ldw	r19,36(sp)
    88ac:	dc800817 	ldw	r18,32(sp)
    88b0:	dc400717 	ldw	r17,28(sp)
    88b4:	dc000617 	ldw	r16,24(sp)
    88b8:	dec01004 	addi	sp,sp,64
    88bc:	f800283a 	ret
    88c0:	00bfffd4 	movui	r2,65535
    88c4:	11c06636 	bltu	r2,r7,8a60 <__umoddi3+0x2f4>
    88c8:	00803fc4 	movi	r2,255
    88cc:	11c12036 	bltu	r2,r7,8d50 <__umoddi3+0x5e4>
    88d0:	000b883a 	mov	r5,zero
    88d4:	0005883a 	mov	r2,zero
    88d8:	3084d83a 	srl	r2,r6,r2
    88dc:	01000074 	movhi	r4,1
    88e0:	21362904 	addi	r4,r4,-10076
    88e4:	01c00804 	movi	r7,32
    88e8:	1105883a 	add	r2,r2,r4
    88ec:	10c00003 	ldbu	r3,0(r2)
    88f0:	28c7883a 	add	r3,r5,r3
    88f4:	38e5c83a 	sub	r18,r7,r3
    88f8:	9000941e 	bne	r18,zero,8b4c <__umoddi3+0x3e0>
    88fc:	35405e36 	bltu	r6,r21,8a78 <__umoddi3+0x30c>
    8900:	84c05d2e 	bgeu	r16,r19,8a78 <__umoddi3+0x30c>
    8904:	8011883a 	mov	r8,r16
    8908:	a813883a 	mov	r9,r21
    890c:	dc000415 	stw	r16,16(sp)
    8910:	dd400515 	stw	r21,20(sp)
    8914:	003fdc06 	br	8888 <__umoddi3+0x11c>
    8918:	00bfffd4 	movui	r2,65535
    891c:	12004a36 	bltu	r2,r8,8a48 <__umoddi3+0x2dc>
    8920:	00803fc4 	movi	r2,255
    8924:	12010d36 	bltu	r2,r8,8d5c <__umoddi3+0x5f0>
    8928:	000b883a 	mov	r5,zero
    892c:	0005883a 	mov	r2,zero
    8930:	9884d83a 	srl	r2,r19,r2
    8934:	01000074 	movhi	r4,1
    8938:	21362904 	addi	r4,r4,-10076
    893c:	01800804 	movi	r6,32
    8940:	1105883a 	add	r2,r2,r4
    8944:	10c00003 	ldbu	r3,0(r2)
    8948:	28c7883a 	add	r3,r5,r3
    894c:	30c7c83a 	sub	r3,r6,r3
    8950:	1800dc1e 	bne	r3,zero,8cc4 <__umoddi3+0x558>
    8954:	002d883a 	mov	r22,zero
    8958:	982ed43a 	srli	r23,r19,16
    895c:	a809883a 	mov	r4,r21
    8960:	9cbfffcc 	andi	r18,r19,65535
    8964:	b80b883a 	mov	r5,r23
    8968:	0000c580 	call	c58 <__udivsi3>
    896c:	100b883a 	mov	r5,r2
    8970:	9009883a 	mov	r4,r18
    8974:	0000c680 	call	c68 <__mulsi3>
    8978:	a809883a 	mov	r4,r21
    897c:	b80b883a 	mov	r5,r23
    8980:	1023883a 	mov	r17,r2
    8984:	0000c600 	call	c60 <__umodsi3>
    8988:	1004943a 	slli	r2,r2,16
    898c:	8006d43a 	srli	r3,r16,16
    8990:	10c4b03a 	or	r2,r2,r3
    8994:	1440032e 	bgeu	r2,r17,89a4 <__umoddi3+0x238>
    8998:	14c5883a 	add	r2,r2,r19
    899c:	14c00136 	bltu	r2,r19,89a4 <__umoddi3+0x238>
    89a0:	14410236 	bltu	r2,r17,8dac <__umoddi3+0x640>
    89a4:	1463c83a 	sub	r17,r2,r17
    89a8:	8809883a 	mov	r4,r17
    89ac:	b80b883a 	mov	r5,r23
    89b0:	0000c580 	call	c58 <__udivsi3>
    89b4:	9009883a 	mov	r4,r18
    89b8:	100b883a 	mov	r5,r2
    89bc:	0000c680 	call	c68 <__mulsi3>
    89c0:	8809883a 	mov	r4,r17
    89c4:	b80b883a 	mov	r5,r23
    89c8:	102b883a 	mov	r21,r2
    89cc:	0000c600 	call	c60 <__umodsi3>
    89d0:	1004943a 	slli	r2,r2,16
    89d4:	80ffffcc 	andi	r3,r16,65535
    89d8:	10c4b03a 	or	r2,r2,r3
    89dc:	1540042e 	bgeu	r2,r21,89f0 <__umoddi3+0x284>
    89e0:	14c5883a 	add	r2,r2,r19
    89e4:	14c00236 	bltu	r2,r19,89f0 <__umoddi3+0x284>
    89e8:	1540012e 	bgeu	r2,r21,89f0 <__umoddi3+0x284>
    89ec:	14c5883a 	add	r2,r2,r19
    89f0:	1545c83a 	sub	r2,r2,r21
    89f4:	1584d83a 	srl	r2,r2,r22
    89f8:	0013883a 	mov	r9,zero
    89fc:	d8800415 	stw	r2,16(sp)
    8a00:	d8c00417 	ldw	r3,16(sp)
    8a04:	0005883a 	mov	r2,zero
    8a08:	d8800515 	stw	r2,20(sp)
    8a0c:	1811883a 	mov	r8,r3
    8a10:	003f9d06 	br	8888 <__umoddi3+0x11c>
    8a14:	00804034 	movhi	r2,256
    8a18:	10bfffc4 	addi	r2,r2,-1
    8a1c:	14c0c636 	bltu	r2,r19,8d38 <__umoddi3+0x5cc>
    8a20:	01400404 	movi	r5,16
    8a24:	2805883a 	mov	r2,r5
    8a28:	003f6c06 	br	87dc <__umoddi3+0x70>
    8a2c:	01000044 	movi	r4,1
    8a30:	000b883a 	mov	r5,zero
    8a34:	0000c580 	call	c58 <__udivsi3>
    8a38:	1027883a 	mov	r19,r2
    8a3c:	00bfffd4 	movui	r2,65535
    8a40:	14fff436 	bltu	r2,r19,8a14 <__umoddi3+0x2a8>
    8a44:	003f6106 	br	87cc <__umoddi3+0x60>
    8a48:	00804034 	movhi	r2,256
    8a4c:	10bfffc4 	addi	r2,r2,-1
    8a50:	1200c536 	bltu	r2,r8,8d68 <__umoddi3+0x5fc>
    8a54:	01400404 	movi	r5,16
    8a58:	2805883a 	mov	r2,r5
    8a5c:	003fb406 	br	8930 <__umoddi3+0x1c4>
    8a60:	00804034 	movhi	r2,256
    8a64:	10bfffc4 	addi	r2,r2,-1
    8a68:	11c0c236 	bltu	r2,r7,8d74 <__umoddi3+0x608>
    8a6c:	01400404 	movi	r5,16
    8a70:	2805883a 	mov	r2,r5
    8a74:	003f9806 	br	88d8 <__umoddi3+0x16c>
    8a78:	84c9c83a 	sub	r4,r16,r19
    8a7c:	8105803a 	cmpltu	r2,r16,r4
    8a80:	a987c83a 	sub	r3,r21,r6
    8a84:	18abc83a 	sub	r21,r3,r2
    8a88:	2021883a 	mov	r16,r4
    8a8c:	003f9d06 	br	8904 <__umoddi3+0x198>
    8a90:	9ca6983a 	sll	r19,r19,r18
    8a94:	3485c83a 	sub	r2,r6,r18
    8a98:	a8a2d83a 	srl	r17,r21,r2
    8a9c:	982ed43a 	srli	r23,r19,16
    8aa0:	ac86983a 	sll	r3,r21,r18
    8aa4:	8084d83a 	srl	r2,r16,r2
    8aa8:	8809883a 	mov	r4,r17
    8aac:	b80b883a 	mov	r5,r23
    8ab0:	18b8b03a 	or	fp,r3,r2
    8ab4:	9d3fffcc 	andi	r20,r19,65535
    8ab8:	0000c580 	call	c58 <__udivsi3>
    8abc:	100b883a 	mov	r5,r2
    8ac0:	a009883a 	mov	r4,r20
    8ac4:	0000c680 	call	c68 <__mulsi3>
    8ac8:	8809883a 	mov	r4,r17
    8acc:	b80b883a 	mov	r5,r23
    8ad0:	102b883a 	mov	r21,r2
    8ad4:	0000c600 	call	c60 <__umodsi3>
    8ad8:	1004943a 	slli	r2,r2,16
    8adc:	e006d43a 	srli	r3,fp,16
    8ae0:	902d883a 	mov	r22,r18
    8ae4:	10c4b03a 	or	r2,r2,r3
    8ae8:	1540022e 	bgeu	r2,r21,8af4 <__umoddi3+0x388>
    8aec:	14c5883a 	add	r2,r2,r19
    8af0:	14c0ab2e 	bgeu	r2,r19,8da0 <__umoddi3+0x634>
    8af4:	1563c83a 	sub	r17,r2,r21
    8af8:	8809883a 	mov	r4,r17
    8afc:	b80b883a 	mov	r5,r23
    8b00:	0000c580 	call	c58 <__udivsi3>
    8b04:	100b883a 	mov	r5,r2
    8b08:	a009883a 	mov	r4,r20
    8b0c:	0000c680 	call	c68 <__mulsi3>
    8b10:	8809883a 	mov	r4,r17
    8b14:	b80b883a 	mov	r5,r23
    8b18:	102b883a 	mov	r21,r2
    8b1c:	0000c600 	call	c60 <__umodsi3>
    8b20:	1004943a 	slli	r2,r2,16
    8b24:	e0ffffcc 	andi	r3,fp,65535
    8b28:	10c4b03a 	or	r2,r2,r3
    8b2c:	1540042e 	bgeu	r2,r21,8b40 <__umoddi3+0x3d4>
    8b30:	14c5883a 	add	r2,r2,r19
    8b34:	14c00236 	bltu	r2,r19,8b40 <__umoddi3+0x3d4>
    8b38:	1540012e 	bgeu	r2,r21,8b40 <__umoddi3+0x3d4>
    8b3c:	14c5883a 	add	r2,r2,r19
    8b40:	84a0983a 	sll	r16,r16,r18
    8b44:	156bc83a 	sub	r21,r2,r21
    8b48:	003f3106 	br	8810 <__umoddi3+0xa4>
    8b4c:	3c8fc83a 	sub	r7,r7,r18
    8b50:	3486983a 	sll	r3,r6,r18
    8b54:	99c4d83a 	srl	r2,r19,r7
    8b58:	a9e2d83a 	srl	r17,r21,r7
    8b5c:	ac8c983a 	sll	r6,r21,r18
    8b60:	18acb03a 	or	r22,r3,r2
    8b64:	b02ed43a 	srli	r23,r22,16
    8b68:	81c4d83a 	srl	r2,r16,r7
    8b6c:	8809883a 	mov	r4,r17
    8b70:	b80b883a 	mov	r5,r23
    8b74:	308cb03a 	or	r6,r6,r2
    8b78:	d9c00315 	stw	r7,12(sp)
    8b7c:	d9800215 	stw	r6,8(sp)
    8b80:	b53fffcc 	andi	r20,r22,65535
    8b84:	0000c580 	call	c58 <__udivsi3>
    8b88:	100b883a 	mov	r5,r2
    8b8c:	a009883a 	mov	r4,r20
    8b90:	1039883a 	mov	fp,r2
    8b94:	0000c680 	call	c68 <__mulsi3>
    8b98:	8809883a 	mov	r4,r17
    8b9c:	b80b883a 	mov	r5,r23
    8ba0:	102b883a 	mov	r21,r2
    8ba4:	0000c600 	call	c60 <__umodsi3>
    8ba8:	d9000217 	ldw	r4,8(sp)
    8bac:	1004943a 	slli	r2,r2,16
    8bb0:	9ca6983a 	sll	r19,r19,r18
    8bb4:	2006d43a 	srli	r3,r4,16
    8bb8:	84a0983a 	sll	r16,r16,r18
    8bbc:	dcc00015 	stw	r19,0(sp)
    8bc0:	10c4b03a 	or	r2,r2,r3
    8bc4:	dc000115 	stw	r16,4(sp)
    8bc8:	1540032e 	bgeu	r2,r21,8bd8 <__umoddi3+0x46c>
    8bcc:	1585883a 	add	r2,r2,r22
    8bd0:	e73fffc4 	addi	fp,fp,-1
    8bd4:	15806e2e 	bgeu	r2,r22,8d90 <__umoddi3+0x624>
    8bd8:	1563c83a 	sub	r17,r2,r21
    8bdc:	8809883a 	mov	r4,r17
    8be0:	b80b883a 	mov	r5,r23
    8be4:	0000c580 	call	c58 <__udivsi3>
    8be8:	100b883a 	mov	r5,r2
    8bec:	a009883a 	mov	r4,r20
    8bf0:	1021883a 	mov	r16,r2
    8bf4:	0000c680 	call	c68 <__mulsi3>
    8bf8:	b80b883a 	mov	r5,r23
    8bfc:	8809883a 	mov	r4,r17
    8c00:	1029883a 	mov	r20,r2
    8c04:	0000c600 	call	c60 <__umodsi3>
    8c08:	d9400217 	ldw	r5,8(sp)
    8c0c:	1004943a 	slli	r2,r2,16
    8c10:	28ffffcc 	andi	r3,r5,65535
    8c14:	10c4b03a 	or	r2,r2,r3
    8c18:	1500032e 	bgeu	r2,r20,8c28 <__umoddi3+0x4bc>
    8c1c:	1585883a 	add	r2,r2,r22
    8c20:	843fffc4 	addi	r16,r16,-1
    8c24:	1580562e 	bgeu	r2,r22,8d80 <__umoddi3+0x614>
    8c28:	d9800017 	ldw	r6,0(sp)
    8c2c:	e022943a 	slli	r17,fp,16
    8c30:	302ed43a 	srli	r23,r6,16
    8c34:	8462b03a 	or	r17,r16,r17
    8c38:	34ffffcc 	andi	r19,r6,65535
    8c3c:	882ad43a 	srli	r21,r17,16
    8c40:	8c7fffcc 	andi	r17,r17,65535
    8c44:	8809883a 	mov	r4,r17
    8c48:	980b883a 	mov	r5,r19
    8c4c:	1521c83a 	sub	r16,r2,r20
    8c50:	0000c680 	call	c68 <__mulsi3>
    8c54:	8809883a 	mov	r4,r17
    8c58:	b80b883a 	mov	r5,r23
    8c5c:	1029883a 	mov	r20,r2
    8c60:	0000c680 	call	c68 <__mulsi3>
    8c64:	980b883a 	mov	r5,r19
    8c68:	a809883a 	mov	r4,r21
    8c6c:	1023883a 	mov	r17,r2
    8c70:	0000c680 	call	c68 <__mulsi3>
    8c74:	a809883a 	mov	r4,r21
    8c78:	b80b883a 	mov	r5,r23
    8c7c:	1027883a 	mov	r19,r2
    8c80:	0000c680 	call	c68 <__mulsi3>
    8c84:	100b883a 	mov	r5,r2
    8c88:	a004d43a 	srli	r2,r20,16
    8c8c:	8ce3883a 	add	r17,r17,r19
    8c90:	1449883a 	add	r4,r2,r17
    8c94:	24c0022e 	bgeu	r4,r19,8ca0 <__umoddi3+0x534>
    8c98:	00800074 	movhi	r2,1
    8c9c:	288b883a 	add	r5,r5,r2
    8ca0:	2004d43a 	srli	r2,r4,16
    8ca4:	2008943a 	slli	r4,r4,16
    8ca8:	a0ffffcc 	andi	r3,r20,65535
    8cac:	288d883a 	add	r6,r5,r2
    8cb0:	20c9883a 	add	r4,r4,r3
    8cb4:	81800b36 	bltu	r16,r6,8ce4 <__umoddi3+0x578>
    8cb8:	81804026 	beq	r16,r6,8dbc <__umoddi3+0x650>
    8cbc:	818dc83a 	sub	r6,r16,r6
    8cc0:	00000f06 	br	8d00 <__umoddi3+0x594>
    8cc4:	30c5c83a 	sub	r2,r6,r3
    8cc8:	182d883a 	mov	r22,r3
    8ccc:	8084d83a 	srl	r2,r16,r2
    8cd0:	a8c6983a 	sll	r3,r21,r3
    8cd4:	9da6983a 	sll	r19,r19,r22
    8cd8:	85a0983a 	sll	r16,r16,r22
    8cdc:	18aab03a 	or	r21,r3,r2
    8ce0:	003f1d06 	br	8958 <__umoddi3+0x1ec>
    8ce4:	d8c00017 	ldw	r3,0(sp)
    8ce8:	20c5c83a 	sub	r2,r4,r3
    8cec:	2089803a 	cmpltu	r4,r4,r2
    8cf0:	3587c83a 	sub	r3,r6,r22
    8cf4:	1907c83a 	sub	r3,r3,r4
    8cf8:	80cdc83a 	sub	r6,r16,r3
    8cfc:	1009883a 	mov	r4,r2
    8d00:	d9400117 	ldw	r5,4(sp)
    8d04:	2905c83a 	sub	r2,r5,r4
    8d08:	2887803a 	cmpltu	r3,r5,r2
    8d0c:	30c7c83a 	sub	r3,r6,r3
    8d10:	d9800317 	ldw	r6,12(sp)
    8d14:	1484d83a 	srl	r2,r2,r18
    8d18:	1988983a 	sll	r4,r3,r6
    8d1c:	1c86d83a 	srl	r3,r3,r18
    8d20:	2088b03a 	or	r4,r4,r2
    8d24:	2011883a 	mov	r8,r4
    8d28:	1813883a 	mov	r9,r3
    8d2c:	d9000415 	stw	r4,16(sp)
    8d30:	d8c00515 	stw	r3,20(sp)
    8d34:	003ed406 	br	8888 <__umoddi3+0x11c>
    8d38:	01400604 	movi	r5,24
    8d3c:	2805883a 	mov	r2,r5
    8d40:	003ea606 	br	87dc <__umoddi3+0x70>
    8d44:	01400204 	movi	r5,8
    8d48:	2805883a 	mov	r2,r5
    8d4c:	003ea306 	br	87dc <__umoddi3+0x70>
    8d50:	01400204 	movi	r5,8
    8d54:	2805883a 	mov	r2,r5
    8d58:	003edf06 	br	88d8 <__umoddi3+0x16c>
    8d5c:	01400204 	movi	r5,8
    8d60:	2805883a 	mov	r2,r5
    8d64:	003ef206 	br	8930 <__umoddi3+0x1c4>
    8d68:	01400604 	movi	r5,24
    8d6c:	2805883a 	mov	r2,r5
    8d70:	003eef06 	br	8930 <__umoddi3+0x1c4>
    8d74:	01400604 	movi	r5,24
    8d78:	2805883a 	mov	r2,r5
    8d7c:	003ed606 	br	88d8 <__umoddi3+0x16c>
    8d80:	153fa92e 	bgeu	r2,r20,8c28 <__umoddi3+0x4bc>
    8d84:	843fffc4 	addi	r16,r16,-1
    8d88:	1585883a 	add	r2,r2,r22
    8d8c:	003fa606 	br	8c28 <__umoddi3+0x4bc>
    8d90:	157f912e 	bgeu	r2,r21,8bd8 <__umoddi3+0x46c>
    8d94:	e73fffc4 	addi	fp,fp,-1
    8d98:	1585883a 	add	r2,r2,r22
    8d9c:	003f8e06 	br	8bd8 <__umoddi3+0x46c>
    8da0:	157f542e 	bgeu	r2,r21,8af4 <__umoddi3+0x388>
    8da4:	14c5883a 	add	r2,r2,r19
    8da8:	003f5206 	br	8af4 <__umoddi3+0x388>
    8dac:	14c5883a 	add	r2,r2,r19
    8db0:	003efc06 	br	89a4 <__umoddi3+0x238>
    8db4:	14c5883a 	add	r2,r2,r19
    8db8:	003ea606 	br	8854 <__umoddi3+0xe8>
    8dbc:	d8800117 	ldw	r2,4(sp)
    8dc0:	113fc836 	bltu	r2,r4,8ce4 <__umoddi3+0x578>
    8dc4:	000d883a 	mov	r6,zero
    8dc8:	003fcd06 	br	8d00 <__umoddi3+0x594>

00008dcc <_fpadd_parts>:
    8dcc:	defff804 	addi	sp,sp,-32
    8dd0:	dcc00315 	stw	r19,12(sp)
    8dd4:	2027883a 	mov	r19,r4
    8dd8:	21000017 	ldw	r4,0(r4)
    8ddc:	00c00044 	movi	r3,1
    8de0:	dd400515 	stw	r21,20(sp)
    8de4:	dd000415 	stw	r20,16(sp)
    8de8:	ddc00715 	stw	r23,28(sp)
    8dec:	dd800615 	stw	r22,24(sp)
    8df0:	dc800215 	stw	r18,8(sp)
    8df4:	dc400115 	stw	r17,4(sp)
    8df8:	dc000015 	stw	r16,0(sp)
    8dfc:	282b883a 	mov	r21,r5
    8e00:	3029883a 	mov	r20,r6
    8e04:	1900632e 	bgeu	r3,r4,8f94 <_fpadd_parts+0x1c8>
    8e08:	28800017 	ldw	r2,0(r5)
    8e0c:	1880812e 	bgeu	r3,r2,9014 <_fpadd_parts+0x248>
    8e10:	00c00104 	movi	r3,4
    8e14:	20c0dc26 	beq	r4,r3,9188 <_fpadd_parts+0x3bc>
    8e18:	10c07e26 	beq	r2,r3,9014 <_fpadd_parts+0x248>
    8e1c:	00c00084 	movi	r3,2
    8e20:	10c06726 	beq	r2,r3,8fc0 <_fpadd_parts+0x1f4>
    8e24:	20c07b26 	beq	r4,r3,9014 <_fpadd_parts+0x248>
    8e28:	9dc00217 	ldw	r23,8(r19)
    8e2c:	28c00217 	ldw	r3,8(r5)
    8e30:	9c400317 	ldw	r17,12(r19)
    8e34:	2bc00317 	ldw	r15,12(r5)
    8e38:	b8cdc83a 	sub	r6,r23,r3
    8e3c:	9c800417 	ldw	r18,16(r19)
    8e40:	2c000417 	ldw	r16,16(r5)
    8e44:	3009883a 	mov	r4,r6
    8e48:	30009716 	blt	r6,zero,90a8 <_fpadd_parts+0x2dc>
    8e4c:	00800fc4 	movi	r2,63
    8e50:	11806b16 	blt	r2,r6,9000 <_fpadd_parts+0x234>
    8e54:	0100a40e 	bge	zero,r4,90e8 <_fpadd_parts+0x31c>
    8e58:	35bff804 	addi	r22,r6,-32
    8e5c:	b000bc16 	blt	r22,zero,9150 <_fpadd_parts+0x384>
    8e60:	8596d83a 	srl	r11,r16,r22
    8e64:	0019883a 	mov	r12,zero
    8e68:	0013883a 	mov	r9,zero
    8e6c:	01000044 	movi	r4,1
    8e70:	0015883a 	mov	r10,zero
    8e74:	b000be16 	blt	r22,zero,9170 <_fpadd_parts+0x3a4>
    8e78:	2590983a 	sll	r8,r4,r22
    8e7c:	000f883a 	mov	r7,zero
    8e80:	00bfffc4 	movi	r2,-1
    8e84:	3889883a 	add	r4,r7,r2
    8e88:	408b883a 	add	r5,r8,r2
    8e8c:	21cd803a 	cmpltu	r6,r4,r7
    8e90:	314b883a 	add	r5,r6,r5
    8e94:	7904703a 	and	r2,r15,r4
    8e98:	8146703a 	and	r3,r16,r5
    8e9c:	10c4b03a 	or	r2,r2,r3
    8ea0:	10000226 	beq	r2,zero,8eac <_fpadd_parts+0xe0>
    8ea4:	02400044 	movi	r9,1
    8ea8:	0015883a 	mov	r10,zero
    8eac:	5a5eb03a 	or	r15,r11,r9
    8eb0:	62a0b03a 	or	r16,r12,r10
    8eb4:	99400117 	ldw	r5,4(r19)
    8eb8:	a8800117 	ldw	r2,4(r21)
    8ebc:	28806e26 	beq	r5,r2,9078 <_fpadd_parts+0x2ac>
    8ec0:	28006626 	beq	r5,zero,905c <_fpadd_parts+0x290>
    8ec4:	7c45c83a 	sub	r2,r15,r17
    8ec8:	7889803a 	cmpltu	r4,r15,r2
    8ecc:	8487c83a 	sub	r3,r16,r18
    8ed0:	1909c83a 	sub	r4,r3,r4
    8ed4:	100d883a 	mov	r6,r2
    8ed8:	200f883a 	mov	r7,r4
    8edc:	38007716 	blt	r7,zero,90bc <_fpadd_parts+0x2f0>
    8ee0:	a5c00215 	stw	r23,8(r20)
    8ee4:	a1c00415 	stw	r7,16(r20)
    8ee8:	a0000115 	stw	zero,4(r20)
    8eec:	a1800315 	stw	r6,12(r20)
    8ef0:	a2000317 	ldw	r8,12(r20)
    8ef4:	a2400417 	ldw	r9,16(r20)
    8ef8:	00bfffc4 	movi	r2,-1
    8efc:	408b883a 	add	r5,r8,r2
    8f00:	2a09803a 	cmpltu	r4,r5,r8
    8f04:	488d883a 	add	r6,r9,r2
    8f08:	01c40034 	movhi	r7,4096
    8f0c:	39ffffc4 	addi	r7,r7,-1
    8f10:	218d883a 	add	r6,r4,r6
    8f14:	39801736 	bltu	r7,r6,8f74 <_fpadd_parts+0x1a8>
    8f18:	31c06526 	beq	r6,r7,90b0 <_fpadd_parts+0x2e4>
    8f1c:	a3000217 	ldw	r12,8(r20)
    8f20:	4209883a 	add	r4,r8,r8
    8f24:	00bfffc4 	movi	r2,-1
    8f28:	220f803a 	cmpltu	r7,r4,r8
    8f2c:	4a4b883a 	add	r5,r9,r9
    8f30:	394f883a 	add	r7,r7,r5
    8f34:	2095883a 	add	r10,r4,r2
    8f38:	3897883a 	add	r11,r7,r2
    8f3c:	510d803a 	cmpltu	r6,r10,r4
    8f40:	6099883a 	add	r12,r12,r2
    8f44:	32d7883a 	add	r11,r6,r11
    8f48:	00840034 	movhi	r2,4096
    8f4c:	10bfffc4 	addi	r2,r2,-1
    8f50:	2011883a 	mov	r8,r4
    8f54:	3813883a 	mov	r9,r7
    8f58:	a1000315 	stw	r4,12(r20)
    8f5c:	a1c00415 	stw	r7,16(r20)
    8f60:	a3000215 	stw	r12,8(r20)
    8f64:	12c00336 	bltu	r2,r11,8f74 <_fpadd_parts+0x1a8>
    8f68:	58bfed1e 	bne	r11,r2,8f20 <_fpadd_parts+0x154>
    8f6c:	00bfff84 	movi	r2,-2
    8f70:	12bfeb2e 	bgeu	r2,r10,8f20 <_fpadd_parts+0x154>
    8f74:	a2800417 	ldw	r10,16(r20)
    8f78:	008000c4 	movi	r2,3
    8f7c:	00c80034 	movhi	r3,8192
    8f80:	18ffffc4 	addi	r3,r3,-1
    8f84:	a2400317 	ldw	r9,12(r20)
    8f88:	a0800015 	stw	r2,0(r20)
    8f8c:	1a802336 	bltu	r3,r10,901c <_fpadd_parts+0x250>
    8f90:	a027883a 	mov	r19,r20
    8f94:	9805883a 	mov	r2,r19
    8f98:	ddc00717 	ldw	r23,28(sp)
    8f9c:	dd800617 	ldw	r22,24(sp)
    8fa0:	dd400517 	ldw	r21,20(sp)
    8fa4:	dd000417 	ldw	r20,16(sp)
    8fa8:	dcc00317 	ldw	r19,12(sp)
    8fac:	dc800217 	ldw	r18,8(sp)
    8fb0:	dc400117 	ldw	r17,4(sp)
    8fb4:	dc000017 	ldw	r16,0(sp)
    8fb8:	dec00804 	addi	sp,sp,32
    8fbc:	f800283a 	ret
    8fc0:	20fff41e 	bne	r4,r3,8f94 <_fpadd_parts+0x1c8>
    8fc4:	31000015 	stw	r4,0(r6)
    8fc8:	98800117 	ldw	r2,4(r19)
    8fcc:	30800115 	stw	r2,4(r6)
    8fd0:	98c00217 	ldw	r3,8(r19)
    8fd4:	30c00215 	stw	r3,8(r6)
    8fd8:	98800317 	ldw	r2,12(r19)
    8fdc:	30800315 	stw	r2,12(r6)
    8fe0:	98c00417 	ldw	r3,16(r19)
    8fe4:	30c00415 	stw	r3,16(r6)
    8fe8:	98800117 	ldw	r2,4(r19)
    8fec:	28c00117 	ldw	r3,4(r5)
    8ff0:	3027883a 	mov	r19,r6
    8ff4:	10c4703a 	and	r2,r2,r3
    8ff8:	30800115 	stw	r2,4(r6)
    8ffc:	003fe506 	br	8f94 <_fpadd_parts+0x1c8>
    9000:	1dc02616 	blt	r3,r23,909c <_fpadd_parts+0x2d0>
    9004:	0023883a 	mov	r17,zero
    9008:	182f883a 	mov	r23,r3
    900c:	0025883a 	mov	r18,zero
    9010:	003fa806 	br	8eb4 <_fpadd_parts+0xe8>
    9014:	a827883a 	mov	r19,r21
    9018:	003fde06 	br	8f94 <_fpadd_parts+0x1c8>
    901c:	01800044 	movi	r6,1
    9020:	500497fa 	slli	r2,r10,31
    9024:	4808d07a 	srli	r4,r9,1
    9028:	518ad83a 	srl	r5,r10,r6
    902c:	a2000217 	ldw	r8,8(r20)
    9030:	1108b03a 	or	r4,r2,r4
    9034:	0007883a 	mov	r3,zero
    9038:	4984703a 	and	r2,r9,r6
    903c:	208cb03a 	or	r6,r4,r2
    9040:	28ceb03a 	or	r7,r5,r3
    9044:	42000044 	addi	r8,r8,1
    9048:	a027883a 	mov	r19,r20
    904c:	a1c00415 	stw	r7,16(r20)
    9050:	a2000215 	stw	r8,8(r20)
    9054:	a1800315 	stw	r6,12(r20)
    9058:	003fce06 	br	8f94 <_fpadd_parts+0x1c8>
    905c:	8bc5c83a 	sub	r2,r17,r15
    9060:	8889803a 	cmpltu	r4,r17,r2
    9064:	9407c83a 	sub	r3,r18,r16
    9068:	1909c83a 	sub	r4,r3,r4
    906c:	100d883a 	mov	r6,r2
    9070:	200f883a 	mov	r7,r4
    9074:	003f9906 	br	8edc <_fpadd_parts+0x110>
    9078:	7c45883a 	add	r2,r15,r17
    907c:	13c9803a 	cmpltu	r4,r2,r15
    9080:	8487883a 	add	r3,r16,r18
    9084:	20c9883a 	add	r4,r4,r3
    9088:	a1400115 	stw	r5,4(r20)
    908c:	a5c00215 	stw	r23,8(r20)
    9090:	a0800315 	stw	r2,12(r20)
    9094:	a1000415 	stw	r4,16(r20)
    9098:	003fb606 	br	8f74 <_fpadd_parts+0x1a8>
    909c:	001f883a 	mov	r15,zero
    90a0:	0021883a 	mov	r16,zero
    90a4:	003f8306 	br	8eb4 <_fpadd_parts+0xe8>
    90a8:	018dc83a 	sub	r6,zero,r6
    90ac:	003f6706 	br	8e4c <_fpadd_parts+0x80>
    90b0:	00bfff84 	movi	r2,-2
    90b4:	117faf36 	bltu	r2,r5,8f74 <_fpadd_parts+0x1a8>
    90b8:	003f9806 	br	8f1c <_fpadd_parts+0x150>
    90bc:	0005883a 	mov	r2,zero
    90c0:	1189c83a 	sub	r4,r2,r6
    90c4:	1105803a 	cmpltu	r2,r2,r4
    90c8:	01cbc83a 	sub	r5,zero,r7
    90cc:	2885c83a 	sub	r2,r5,r2
    90d0:	01800044 	movi	r6,1
    90d4:	a1800115 	stw	r6,4(r20)
    90d8:	a5c00215 	stw	r23,8(r20)
    90dc:	a1000315 	stw	r4,12(r20)
    90e0:	a0800415 	stw	r2,16(r20)
    90e4:	003f8206 	br	8ef0 <_fpadd_parts+0x124>
    90e8:	203f7226 	beq	r4,zero,8eb4 <_fpadd_parts+0xe8>
    90ec:	35bff804 	addi	r22,r6,-32
    90f0:	b9af883a 	add	r23,r23,r6
    90f4:	b0003116 	blt	r22,zero,91bc <_fpadd_parts+0x3f0>
    90f8:	959ad83a 	srl	r13,r18,r22
    90fc:	001d883a 	mov	r14,zero
    9100:	000f883a 	mov	r7,zero
    9104:	01000044 	movi	r4,1
    9108:	0011883a 	mov	r8,zero
    910c:	b0002516 	blt	r22,zero,91a4 <_fpadd_parts+0x3d8>
    9110:	2594983a 	sll	r10,r4,r22
    9114:	0013883a 	mov	r9,zero
    9118:	00bfffc4 	movi	r2,-1
    911c:	4889883a 	add	r4,r9,r2
    9120:	508b883a 	add	r5,r10,r2
    9124:	224d803a 	cmpltu	r6,r4,r9
    9128:	314b883a 	add	r5,r6,r5
    912c:	8904703a 	and	r2,r17,r4
    9130:	9146703a 	and	r3,r18,r5
    9134:	10c4b03a 	or	r2,r2,r3
    9138:	10000226 	beq	r2,zero,9144 <_fpadd_parts+0x378>
    913c:	01c00044 	movi	r7,1
    9140:	0011883a 	mov	r8,zero
    9144:	69e2b03a 	or	r17,r13,r7
    9148:	7224b03a 	or	r18,r14,r8
    914c:	003f5906 	br	8eb4 <_fpadd_parts+0xe8>
    9150:	8407883a 	add	r3,r16,r16
    9154:	008007c4 	movi	r2,31
    9158:	1185c83a 	sub	r2,r2,r6
    915c:	1886983a 	sll	r3,r3,r2
    9160:	7996d83a 	srl	r11,r15,r6
    9164:	8198d83a 	srl	r12,r16,r6
    9168:	1ad6b03a 	or	r11,r3,r11
    916c:	003f3e06 	br	8e68 <_fpadd_parts+0x9c>
    9170:	2006d07a 	srli	r3,r4,1
    9174:	008007c4 	movi	r2,31
    9178:	1185c83a 	sub	r2,r2,r6
    917c:	1890d83a 	srl	r8,r3,r2
    9180:	218e983a 	sll	r7,r4,r6
    9184:	003f3e06 	br	8e80 <_fpadd_parts+0xb4>
    9188:	113f821e 	bne	r2,r4,8f94 <_fpadd_parts+0x1c8>
    918c:	28c00117 	ldw	r3,4(r5)
    9190:	98800117 	ldw	r2,4(r19)
    9194:	10ff7f26 	beq	r2,r3,8f94 <_fpadd_parts+0x1c8>
    9198:	04c00074 	movhi	r19,1
    919c:	9cf62404 	addi	r19,r19,-10096
    91a0:	003f7c06 	br	8f94 <_fpadd_parts+0x1c8>
    91a4:	2006d07a 	srli	r3,r4,1
    91a8:	008007c4 	movi	r2,31
    91ac:	1185c83a 	sub	r2,r2,r6
    91b0:	1894d83a 	srl	r10,r3,r2
    91b4:	2192983a 	sll	r9,r4,r6
    91b8:	003fd706 	br	9118 <_fpadd_parts+0x34c>
    91bc:	9487883a 	add	r3,r18,r18
    91c0:	008007c4 	movi	r2,31
    91c4:	1185c83a 	sub	r2,r2,r6
    91c8:	1886983a 	sll	r3,r3,r2
    91cc:	899ad83a 	srl	r13,r17,r6
    91d0:	919cd83a 	srl	r14,r18,r6
    91d4:	1b5ab03a 	or	r13,r3,r13
    91d8:	003fc906 	br	9100 <_fpadd_parts+0x334>

000091dc <__subdf3>:
    91dc:	deffea04 	addi	sp,sp,-88
    91e0:	dcc01415 	stw	r19,80(sp)
    91e4:	dcc00404 	addi	r19,sp,16
    91e8:	2011883a 	mov	r8,r4
    91ec:	2813883a 	mov	r9,r5
    91f0:	dc401315 	stw	r17,76(sp)
    91f4:	d809883a 	mov	r4,sp
    91f8:	980b883a 	mov	r5,r19
    91fc:	dc400904 	addi	r17,sp,36
    9200:	dfc01515 	stw	ra,84(sp)
    9204:	da400115 	stw	r9,4(sp)
    9208:	d9c00315 	stw	r7,12(sp)
    920c:	da000015 	stw	r8,0(sp)
    9210:	d9800215 	stw	r6,8(sp)
    9214:	000a3b00 	call	a3b0 <__unpack_d>
    9218:	d9000204 	addi	r4,sp,8
    921c:	880b883a 	mov	r5,r17
    9220:	000a3b00 	call	a3b0 <__unpack_d>
    9224:	d8800a17 	ldw	r2,40(sp)
    9228:	880b883a 	mov	r5,r17
    922c:	9809883a 	mov	r4,r19
    9230:	d9800e04 	addi	r6,sp,56
    9234:	1080005c 	xori	r2,r2,1
    9238:	d8800a15 	stw	r2,40(sp)
    923c:	0008dcc0 	call	8dcc <_fpadd_parts>
    9240:	1009883a 	mov	r4,r2
    9244:	000a09c0 	call	a09c <__pack_d>
    9248:	dfc01517 	ldw	ra,84(sp)
    924c:	dcc01417 	ldw	r19,80(sp)
    9250:	dc401317 	ldw	r17,76(sp)
    9254:	dec01604 	addi	sp,sp,88
    9258:	f800283a 	ret

0000925c <__adddf3>:
    925c:	deffea04 	addi	sp,sp,-88
    9260:	dcc01415 	stw	r19,80(sp)
    9264:	dcc00404 	addi	r19,sp,16
    9268:	2011883a 	mov	r8,r4
    926c:	2813883a 	mov	r9,r5
    9270:	dc401315 	stw	r17,76(sp)
    9274:	d809883a 	mov	r4,sp
    9278:	980b883a 	mov	r5,r19
    927c:	dc400904 	addi	r17,sp,36
    9280:	dfc01515 	stw	ra,84(sp)
    9284:	da400115 	stw	r9,4(sp)
    9288:	d9c00315 	stw	r7,12(sp)
    928c:	da000015 	stw	r8,0(sp)
    9290:	d9800215 	stw	r6,8(sp)
    9294:	000a3b00 	call	a3b0 <__unpack_d>
    9298:	d9000204 	addi	r4,sp,8
    929c:	880b883a 	mov	r5,r17
    92a0:	000a3b00 	call	a3b0 <__unpack_d>
    92a4:	d9800e04 	addi	r6,sp,56
    92a8:	9809883a 	mov	r4,r19
    92ac:	880b883a 	mov	r5,r17
    92b0:	0008dcc0 	call	8dcc <_fpadd_parts>
    92b4:	1009883a 	mov	r4,r2
    92b8:	000a09c0 	call	a09c <__pack_d>
    92bc:	dfc01517 	ldw	ra,84(sp)
    92c0:	dcc01417 	ldw	r19,80(sp)
    92c4:	dc401317 	ldw	r17,76(sp)
    92c8:	dec01604 	addi	sp,sp,88
    92cc:	f800283a 	ret

000092d0 <__muldf3>:
    92d0:	deffe004 	addi	sp,sp,-128
    92d4:	dc401815 	stw	r17,96(sp)
    92d8:	dc400404 	addi	r17,sp,16
    92dc:	2011883a 	mov	r8,r4
    92e0:	2813883a 	mov	r9,r5
    92e4:	dc001715 	stw	r16,92(sp)
    92e8:	d809883a 	mov	r4,sp
    92ec:	880b883a 	mov	r5,r17
    92f0:	dc000904 	addi	r16,sp,36
    92f4:	dfc01f15 	stw	ra,124(sp)
    92f8:	da400115 	stw	r9,4(sp)
    92fc:	d9c00315 	stw	r7,12(sp)
    9300:	da000015 	stw	r8,0(sp)
    9304:	d9800215 	stw	r6,8(sp)
    9308:	ddc01e15 	stw	r23,120(sp)
    930c:	dd801d15 	stw	r22,116(sp)
    9310:	dd401c15 	stw	r21,112(sp)
    9314:	dd001b15 	stw	r20,108(sp)
    9318:	dcc01a15 	stw	r19,104(sp)
    931c:	dc801915 	stw	r18,100(sp)
    9320:	000a3b00 	call	a3b0 <__unpack_d>
    9324:	d9000204 	addi	r4,sp,8
    9328:	800b883a 	mov	r5,r16
    932c:	000a3b00 	call	a3b0 <__unpack_d>
    9330:	d9000417 	ldw	r4,16(sp)
    9334:	00800044 	movi	r2,1
    9338:	1100102e 	bgeu	r2,r4,937c <__muldf3+0xac>
    933c:	d8c00917 	ldw	r3,36(sp)
    9340:	10c0062e 	bgeu	r2,r3,935c <__muldf3+0x8c>
    9344:	00800104 	movi	r2,4
    9348:	20800a26 	beq	r4,r2,9374 <__muldf3+0xa4>
    934c:	1880cc26 	beq	r3,r2,9680 <__muldf3+0x3b0>
    9350:	00800084 	movi	r2,2
    9354:	20800926 	beq	r4,r2,937c <__muldf3+0xac>
    9358:	1880191e 	bne	r3,r2,93c0 <__muldf3+0xf0>
    935c:	d8c00a17 	ldw	r3,40(sp)
    9360:	d8800517 	ldw	r2,20(sp)
    9364:	8009883a 	mov	r4,r16
    9368:	10c4c03a 	cmpne	r2,r2,r3
    936c:	d8800a15 	stw	r2,40(sp)
    9370:	00000706 	br	9390 <__muldf3+0xc0>
    9374:	00800084 	movi	r2,2
    9378:	1880c326 	beq	r3,r2,9688 <__muldf3+0x3b8>
    937c:	d8800517 	ldw	r2,20(sp)
    9380:	d8c00a17 	ldw	r3,40(sp)
    9384:	8809883a 	mov	r4,r17
    9388:	10c4c03a 	cmpne	r2,r2,r3
    938c:	d8800515 	stw	r2,20(sp)
    9390:	000a09c0 	call	a09c <__pack_d>
    9394:	dfc01f17 	ldw	ra,124(sp)
    9398:	ddc01e17 	ldw	r23,120(sp)
    939c:	dd801d17 	ldw	r22,116(sp)
    93a0:	dd401c17 	ldw	r21,112(sp)
    93a4:	dd001b17 	ldw	r20,108(sp)
    93a8:	dcc01a17 	ldw	r19,104(sp)
    93ac:	dc801917 	ldw	r18,100(sp)
    93b0:	dc401817 	ldw	r17,96(sp)
    93b4:	dc001717 	ldw	r16,92(sp)
    93b8:	dec02004 	addi	sp,sp,128
    93bc:	f800283a 	ret
    93c0:	dd800717 	ldw	r22,28(sp)
    93c4:	dc800c17 	ldw	r18,48(sp)
    93c8:	002b883a 	mov	r21,zero
    93cc:	0023883a 	mov	r17,zero
    93d0:	a80b883a 	mov	r5,r21
    93d4:	b00d883a 	mov	r6,r22
    93d8:	880f883a 	mov	r7,r17
    93dc:	ddc00817 	ldw	r23,32(sp)
    93e0:	dcc00d17 	ldw	r19,52(sp)
    93e4:	9009883a 	mov	r4,r18
    93e8:	0009ef80 	call	9ef8 <__muldi3>
    93ec:	001b883a 	mov	r13,zero
    93f0:	680f883a 	mov	r7,r13
    93f4:	b009883a 	mov	r4,r22
    93f8:	000b883a 	mov	r5,zero
    93fc:	980d883a 	mov	r6,r19
    9400:	b82d883a 	mov	r22,r23
    9404:	002f883a 	mov	r23,zero
    9408:	db401615 	stw	r13,88(sp)
    940c:	d8801315 	stw	r2,76(sp)
    9410:	d8c01415 	stw	r3,80(sp)
    9414:	dcc01515 	stw	r19,84(sp)
    9418:	0009ef80 	call	9ef8 <__muldi3>
    941c:	b00d883a 	mov	r6,r22
    9420:	000b883a 	mov	r5,zero
    9424:	9009883a 	mov	r4,r18
    9428:	b80f883a 	mov	r7,r23
    942c:	1021883a 	mov	r16,r2
    9430:	1823883a 	mov	r17,r3
    9434:	0009ef80 	call	9ef8 <__muldi3>
    9438:	8085883a 	add	r2,r16,r2
    943c:	140d803a 	cmpltu	r6,r2,r16
    9440:	88c7883a 	add	r3,r17,r3
    9444:	30cd883a 	add	r6,r6,r3
    9448:	1029883a 	mov	r20,r2
    944c:	302b883a 	mov	r21,r6
    9450:	da801317 	ldw	r10,76(sp)
    9454:	dac01417 	ldw	r11,80(sp)
    9458:	db001517 	ldw	r12,84(sp)
    945c:	db401617 	ldw	r13,88(sp)
    9460:	3440612e 	bgeu	r6,r17,95e8 <__muldf3+0x318>
    9464:	0009883a 	mov	r4,zero
    9468:	5105883a 	add	r2,r10,r4
    946c:	128d803a 	cmpltu	r6,r2,r10
    9470:	5d07883a 	add	r3,r11,r20
    9474:	30cd883a 	add	r6,r6,r3
    9478:	0021883a 	mov	r16,zero
    947c:	04400044 	movi	r17,1
    9480:	1025883a 	mov	r18,r2
    9484:	3027883a 	mov	r19,r6
    9488:	32c06236 	bltu	r6,r11,9614 <__muldf3+0x344>
    948c:	59807a26 	beq	r11,r6,9678 <__muldf3+0x3a8>
    9490:	680b883a 	mov	r5,r13
    9494:	b80f883a 	mov	r7,r23
    9498:	6009883a 	mov	r4,r12
    949c:	b00d883a 	mov	r6,r22
    94a0:	0009ef80 	call	9ef8 <__muldi3>
    94a4:	1009883a 	mov	r4,r2
    94a8:	000f883a 	mov	r7,zero
    94ac:	1545883a 	add	r2,r2,r21
    94b0:	1111803a 	cmpltu	r8,r2,r4
    94b4:	19c7883a 	add	r3,r3,r7
    94b8:	40c7883a 	add	r3,r8,r3
    94bc:	88cb883a 	add	r5,r17,r3
    94c0:	d8c00617 	ldw	r3,24(sp)
    94c4:	8089883a 	add	r4,r16,r2
    94c8:	d8800b17 	ldw	r2,44(sp)
    94cc:	18c00104 	addi	r3,r3,4
    94d0:	240d803a 	cmpltu	r6,r4,r16
    94d4:	10c7883a 	add	r3,r2,r3
    94d8:	2013883a 	mov	r9,r4
    94dc:	d8800a17 	ldw	r2,40(sp)
    94e0:	d9000517 	ldw	r4,20(sp)
    94e4:	314d883a 	add	r6,r6,r5
    94e8:	3015883a 	mov	r10,r6
    94ec:	2088c03a 	cmpne	r4,r4,r2
    94f0:	00880034 	movhi	r2,8192
    94f4:	10bfffc4 	addi	r2,r2,-1
    94f8:	d9000f15 	stw	r4,60(sp)
    94fc:	d8c01015 	stw	r3,64(sp)
    9500:	1180162e 	bgeu	r2,r6,955c <__muldf3+0x28c>
    9504:	1811883a 	mov	r8,r3
    9508:	101f883a 	mov	r15,r2
    950c:	980497fa 	slli	r2,r19,31
    9510:	9016d07a 	srli	r11,r18,1
    9514:	500697fa 	slli	r3,r10,31
    9518:	480cd07a 	srli	r6,r9,1
    951c:	500ed07a 	srli	r7,r10,1
    9520:	12d6b03a 	or	r11,r2,r11
    9524:	00800044 	movi	r2,1
    9528:	198cb03a 	or	r6,r3,r6
    952c:	4888703a 	and	r4,r9,r2
    9530:	9818d07a 	srli	r12,r19,1
    9534:	001b883a 	mov	r13,zero
    9538:	03a00034 	movhi	r14,32768
    953c:	3013883a 	mov	r9,r6
    9540:	3815883a 	mov	r10,r7
    9544:	4091883a 	add	r8,r8,r2
    9548:	20000226 	beq	r4,zero,9554 <__muldf3+0x284>
    954c:	5b64b03a 	or	r18,r11,r13
    9550:	63a6b03a 	or	r19,r12,r14
    9554:	7abfed36 	bltu	r15,r10,950c <__muldf3+0x23c>
    9558:	da001015 	stw	r8,64(sp)
    955c:	00840034 	movhi	r2,4096
    9560:	10bfffc4 	addi	r2,r2,-1
    9564:	12801436 	bltu	r2,r10,95b8 <__muldf3+0x2e8>
    9568:	da001017 	ldw	r8,64(sp)
    956c:	101f883a 	mov	r15,r2
    9570:	4a45883a 	add	r2,r9,r9
    9574:	124d803a 	cmpltu	r6,r2,r9
    9578:	5287883a 	add	r3,r10,r10
    957c:	9497883a 	add	r11,r18,r18
    9580:	5c8f803a 	cmpltu	r7,r11,r18
    9584:	9cd9883a 	add	r12,r19,r19
    9588:	01000044 	movi	r4,1
    958c:	30cd883a 	add	r6,r6,r3
    9590:	3b0f883a 	add	r7,r7,r12
    9594:	423fffc4 	addi	r8,r8,-1
    9598:	1013883a 	mov	r9,r2
    959c:	3015883a 	mov	r10,r6
    95a0:	111ab03a 	or	r13,r2,r4
    95a4:	98003016 	blt	r19,zero,9668 <__muldf3+0x398>
    95a8:	5825883a 	mov	r18,r11
    95ac:	3827883a 	mov	r19,r7
    95b0:	7abfef2e 	bgeu	r15,r10,9570 <__muldf3+0x2a0>
    95b4:	da001015 	stw	r8,64(sp)
    95b8:	00803fc4 	movi	r2,255
    95bc:	488e703a 	and	r7,r9,r2
    95c0:	00802004 	movi	r2,128
    95c4:	0007883a 	mov	r3,zero
    95c8:	0011883a 	mov	r8,zero
    95cc:	38801826 	beq	r7,r2,9630 <__muldf3+0x360>
    95d0:	008000c4 	movi	r2,3
    95d4:	d9000e04 	addi	r4,sp,56
    95d8:	da801215 	stw	r10,72(sp)
    95dc:	d8800e15 	stw	r2,56(sp)
    95e0:	da401115 	stw	r9,68(sp)
    95e4:	003f6a06 	br	9390 <__muldf3+0xc0>
    95e8:	89802126 	beq	r17,r6,9670 <__muldf3+0x3a0>
    95ec:	0009883a 	mov	r4,zero
    95f0:	5105883a 	add	r2,r10,r4
    95f4:	128d803a 	cmpltu	r6,r2,r10
    95f8:	5d07883a 	add	r3,r11,r20
    95fc:	30cd883a 	add	r6,r6,r3
    9600:	0021883a 	mov	r16,zero
    9604:	0023883a 	mov	r17,zero
    9608:	1025883a 	mov	r18,r2
    960c:	3027883a 	mov	r19,r6
    9610:	32ff9e2e 	bgeu	r6,r11,948c <__muldf3+0x1bc>
    9614:	00800044 	movi	r2,1
    9618:	8089883a 	add	r4,r16,r2
    961c:	240d803a 	cmpltu	r6,r4,r16
    9620:	344d883a 	add	r6,r6,r17
    9624:	2021883a 	mov	r16,r4
    9628:	3023883a 	mov	r17,r6
    962c:	003f9806 	br	9490 <__muldf3+0x1c0>
    9630:	403fe71e 	bne	r8,zero,95d0 <__muldf3+0x300>
    9634:	01004004 	movi	r4,256
    9638:	4904703a 	and	r2,r9,r4
    963c:	10c4b03a 	or	r2,r2,r3
    9640:	103fe31e 	bne	r2,zero,95d0 <__muldf3+0x300>
    9644:	94c4b03a 	or	r2,r18,r19
    9648:	103fe126 	beq	r2,zero,95d0 <__muldf3+0x300>
    964c:	49c5883a 	add	r2,r9,r7
    9650:	1251803a 	cmpltu	r8,r2,r9
    9654:	4291883a 	add	r8,r8,r10
    9658:	013fc004 	movi	r4,-256
    965c:	1112703a 	and	r9,r2,r4
    9660:	4015883a 	mov	r10,r8
    9664:	003fda06 	br	95d0 <__muldf3+0x300>
    9668:	6813883a 	mov	r9,r13
    966c:	003fce06 	br	95a8 <__muldf3+0x2d8>
    9670:	143f7c36 	bltu	r2,r16,9464 <__muldf3+0x194>
    9674:	003fdd06 	br	95ec <__muldf3+0x31c>
    9678:	12bf852e 	bgeu	r2,r10,9490 <__muldf3+0x1c0>
    967c:	003fe506 	br	9614 <__muldf3+0x344>
    9680:	00800084 	movi	r2,2
    9684:	20bf351e 	bne	r4,r2,935c <__muldf3+0x8c>
    9688:	01000074 	movhi	r4,1
    968c:	21362404 	addi	r4,r4,-10096
    9690:	003f3f06 	br	9390 <__muldf3+0xc0>

00009694 <__divdf3>:
    9694:	deffed04 	addi	sp,sp,-76
    9698:	dcc01115 	stw	r19,68(sp)
    969c:	dcc00404 	addi	r19,sp,16
    96a0:	2011883a 	mov	r8,r4
    96a4:	2813883a 	mov	r9,r5
    96a8:	dc000e15 	stw	r16,56(sp)
    96ac:	d809883a 	mov	r4,sp
    96b0:	980b883a 	mov	r5,r19
    96b4:	dc000904 	addi	r16,sp,36
    96b8:	dfc01215 	stw	ra,72(sp)
    96bc:	da400115 	stw	r9,4(sp)
    96c0:	d9c00315 	stw	r7,12(sp)
    96c4:	da000015 	stw	r8,0(sp)
    96c8:	d9800215 	stw	r6,8(sp)
    96cc:	dc801015 	stw	r18,64(sp)
    96d0:	dc400f15 	stw	r17,60(sp)
    96d4:	000a3b00 	call	a3b0 <__unpack_d>
    96d8:	d9000204 	addi	r4,sp,8
    96dc:	800b883a 	mov	r5,r16
    96e0:	000a3b00 	call	a3b0 <__unpack_d>
    96e4:	d9000417 	ldw	r4,16(sp)
    96e8:	00800044 	movi	r2,1
    96ec:	11000b2e 	bgeu	r2,r4,971c <__divdf3+0x88>
    96f0:	d9400917 	ldw	r5,36(sp)
    96f4:	1140762e 	bgeu	r2,r5,98d0 <__divdf3+0x23c>
    96f8:	d8800517 	ldw	r2,20(sp)
    96fc:	d8c00a17 	ldw	r3,40(sp)
    9700:	01800104 	movi	r6,4
    9704:	10c4f03a 	xor	r2,r2,r3
    9708:	d8800515 	stw	r2,20(sp)
    970c:	21800226 	beq	r4,r6,9718 <__divdf3+0x84>
    9710:	00800084 	movi	r2,2
    9714:	2080141e 	bne	r4,r2,9768 <__divdf3+0xd4>
    9718:	29000926 	beq	r5,r4,9740 <__divdf3+0xac>
    971c:	9809883a 	mov	r4,r19
    9720:	000a09c0 	call	a09c <__pack_d>
    9724:	dfc01217 	ldw	ra,72(sp)
    9728:	dcc01117 	ldw	r19,68(sp)
    972c:	dc801017 	ldw	r18,64(sp)
    9730:	dc400f17 	ldw	r17,60(sp)
    9734:	dc000e17 	ldw	r16,56(sp)
    9738:	dec01304 	addi	sp,sp,76
    973c:	f800283a 	ret
    9740:	01000074 	movhi	r4,1
    9744:	21362404 	addi	r4,r4,-10096
    9748:	000a09c0 	call	a09c <__pack_d>
    974c:	dfc01217 	ldw	ra,72(sp)
    9750:	dcc01117 	ldw	r19,68(sp)
    9754:	dc801017 	ldw	r18,64(sp)
    9758:	dc400f17 	ldw	r17,60(sp)
    975c:	dc000e17 	ldw	r16,56(sp)
    9760:	dec01304 	addi	sp,sp,76
    9764:	f800283a 	ret
    9768:	29805b26 	beq	r5,r6,98d8 <__divdf3+0x244>
    976c:	28802d26 	beq	r5,r2,9824 <__divdf3+0x190>
    9770:	d8c00617 	ldw	r3,24(sp)
    9774:	d8800b17 	ldw	r2,44(sp)
    9778:	d9c00817 	ldw	r7,32(sp)
    977c:	dc400d17 	ldw	r17,52(sp)
    9780:	188bc83a 	sub	r5,r3,r2
    9784:	d9800717 	ldw	r6,28(sp)
    9788:	dc000c17 	ldw	r16,48(sp)
    978c:	d9400615 	stw	r5,24(sp)
    9790:	3c403836 	bltu	r7,r17,9874 <__divdf3+0x1e0>
    9794:	89c03626 	beq	r17,r7,9870 <__divdf3+0x1dc>
    9798:	0015883a 	mov	r10,zero
    979c:	001d883a 	mov	r14,zero
    97a0:	02c40034 	movhi	r11,4096
    97a4:	001f883a 	mov	r15,zero
    97a8:	003f883a 	mov	ra,zero
    97ac:	04800f44 	movi	r18,61
    97b0:	00000f06 	br	97f0 <__divdf3+0x15c>
    97b4:	601d883a 	mov	r14,r12
    97b8:	681f883a 	mov	r15,r13
    97bc:	400d883a 	mov	r6,r8
    97c0:	100f883a 	mov	r7,r2
    97c4:	3191883a 	add	r8,r6,r6
    97c8:	5808d07a 	srli	r4,r11,1
    97cc:	4185803a 	cmpltu	r2,r8,r6
    97d0:	39d3883a 	add	r9,r7,r7
    97d4:	28c6b03a 	or	r3,r5,r3
    97d8:	1245883a 	add	r2,r2,r9
    97dc:	1815883a 	mov	r10,r3
    97e0:	2017883a 	mov	r11,r4
    97e4:	400d883a 	mov	r6,r8
    97e8:	100f883a 	mov	r7,r2
    97ec:	fc801726 	beq	ra,r18,984c <__divdf3+0x1b8>
    97f0:	580a97fa 	slli	r5,r11,31
    97f4:	5006d07a 	srli	r3,r10,1
    97f8:	ffc00044 	addi	ra,ra,1
    97fc:	3c7ff136 	bltu	r7,r17,97c4 <__divdf3+0x130>
    9800:	3411c83a 	sub	r8,r6,r16
    9804:	3205803a 	cmpltu	r2,r6,r8
    9808:	3c53c83a 	sub	r9,r7,r17
    980c:	7298b03a 	or	r12,r14,r10
    9810:	7adab03a 	or	r13,r15,r11
    9814:	4885c83a 	sub	r2,r9,r2
    9818:	89ffe61e 	bne	r17,r7,97b4 <__divdf3+0x120>
    981c:	343fe936 	bltu	r6,r16,97c4 <__divdf3+0x130>
    9820:	003fe406 	br	97b4 <__divdf3+0x120>
    9824:	9809883a 	mov	r4,r19
    9828:	d9800415 	stw	r6,16(sp)
    982c:	000a09c0 	call	a09c <__pack_d>
    9830:	dfc01217 	ldw	ra,72(sp)
    9834:	dcc01117 	ldw	r19,68(sp)
    9838:	dc801017 	ldw	r18,64(sp)
    983c:	dc400f17 	ldw	r17,60(sp)
    9840:	dc000e17 	ldw	r16,56(sp)
    9844:	dec01304 	addi	sp,sp,76
    9848:	f800283a 	ret
    984c:	00803fc4 	movi	r2,255
    9850:	7090703a 	and	r8,r14,r2
    9854:	00802004 	movi	r2,128
    9858:	0007883a 	mov	r3,zero
    985c:	0013883a 	mov	r9,zero
    9860:	40800d26 	beq	r8,r2,9898 <__divdf3+0x204>
    9864:	dbc00815 	stw	r15,32(sp)
    9868:	db800715 	stw	r14,28(sp)
    986c:	003fab06 	br	971c <__divdf3+0x88>
    9870:	343fc92e 	bgeu	r6,r16,9798 <__divdf3+0x104>
    9874:	3185883a 	add	r2,r6,r6
    9878:	1189803a 	cmpltu	r4,r2,r6
    987c:	39c7883a 	add	r3,r7,r7
    9880:	20c9883a 	add	r4,r4,r3
    9884:	297fffc4 	addi	r5,r5,-1
    9888:	100d883a 	mov	r6,r2
    988c:	200f883a 	mov	r7,r4
    9890:	d9400615 	stw	r5,24(sp)
    9894:	003fc006 	br	9798 <__divdf3+0x104>
    9898:	483ff21e 	bne	r9,zero,9864 <__divdf3+0x1d0>
    989c:	01004004 	movi	r4,256
    98a0:	7104703a 	and	r2,r14,r4
    98a4:	10c4b03a 	or	r2,r2,r3
    98a8:	103fee1e 	bne	r2,zero,9864 <__divdf3+0x1d0>
    98ac:	31c4b03a 	or	r2,r6,r7
    98b0:	103fec26 	beq	r2,zero,9864 <__divdf3+0x1d0>
    98b4:	7205883a 	add	r2,r14,r8
    98b8:	1391803a 	cmpltu	r8,r2,r14
    98bc:	43d1883a 	add	r8,r8,r15
    98c0:	013fc004 	movi	r4,-256
    98c4:	111c703a 	and	r14,r2,r4
    98c8:	401f883a 	mov	r15,r8
    98cc:	003fe506 	br	9864 <__divdf3+0x1d0>
    98d0:	8009883a 	mov	r4,r16
    98d4:	003f9206 	br	9720 <__divdf3+0x8c>
    98d8:	9809883a 	mov	r4,r19
    98dc:	d8000715 	stw	zero,28(sp)
    98e0:	d8000815 	stw	zero,32(sp)
    98e4:	d8000615 	stw	zero,24(sp)
    98e8:	003f8d06 	br	9720 <__divdf3+0x8c>

000098ec <__eqdf2>:
    98ec:	deffef04 	addi	sp,sp,-68
    98f0:	dc400f15 	stw	r17,60(sp)
    98f4:	dc400404 	addi	r17,sp,16
    98f8:	2005883a 	mov	r2,r4
    98fc:	2807883a 	mov	r3,r5
    9900:	dc000e15 	stw	r16,56(sp)
    9904:	d809883a 	mov	r4,sp
    9908:	880b883a 	mov	r5,r17
    990c:	dc000904 	addi	r16,sp,36
    9910:	d8c00115 	stw	r3,4(sp)
    9914:	d8800015 	stw	r2,0(sp)
    9918:	d9800215 	stw	r6,8(sp)
    991c:	dfc01015 	stw	ra,64(sp)
    9920:	d9c00315 	stw	r7,12(sp)
    9924:	000a3b00 	call	a3b0 <__unpack_d>
    9928:	d9000204 	addi	r4,sp,8
    992c:	800b883a 	mov	r5,r16
    9930:	000a3b00 	call	a3b0 <__unpack_d>
    9934:	d8800417 	ldw	r2,16(sp)
    9938:	00c00044 	movi	r3,1
    993c:	180d883a 	mov	r6,r3
    9940:	1880062e 	bgeu	r3,r2,995c <__eqdf2+0x70>
    9944:	d8800917 	ldw	r2,36(sp)
    9948:	8809883a 	mov	r4,r17
    994c:	800b883a 	mov	r5,r16
    9950:	1880022e 	bgeu	r3,r2,995c <__eqdf2+0x70>
    9954:	000a4e80 	call	a4e8 <__fpcmp_parts_d>
    9958:	100d883a 	mov	r6,r2
    995c:	3005883a 	mov	r2,r6
    9960:	dfc01017 	ldw	ra,64(sp)
    9964:	dc400f17 	ldw	r17,60(sp)
    9968:	dc000e17 	ldw	r16,56(sp)
    996c:	dec01104 	addi	sp,sp,68
    9970:	f800283a 	ret

00009974 <__nedf2>:
    9974:	deffef04 	addi	sp,sp,-68
    9978:	dc400f15 	stw	r17,60(sp)
    997c:	dc400404 	addi	r17,sp,16
    9980:	2005883a 	mov	r2,r4
    9984:	2807883a 	mov	r3,r5
    9988:	dc000e15 	stw	r16,56(sp)
    998c:	d809883a 	mov	r4,sp
    9990:	880b883a 	mov	r5,r17
    9994:	dc000904 	addi	r16,sp,36
    9998:	d8c00115 	stw	r3,4(sp)
    999c:	d8800015 	stw	r2,0(sp)
    99a0:	d9800215 	stw	r6,8(sp)
    99a4:	dfc01015 	stw	ra,64(sp)
    99a8:	d9c00315 	stw	r7,12(sp)
    99ac:	000a3b00 	call	a3b0 <__unpack_d>
    99b0:	d9000204 	addi	r4,sp,8
    99b4:	800b883a 	mov	r5,r16
    99b8:	000a3b00 	call	a3b0 <__unpack_d>
    99bc:	d8800417 	ldw	r2,16(sp)
    99c0:	00c00044 	movi	r3,1
    99c4:	180d883a 	mov	r6,r3
    99c8:	1880062e 	bgeu	r3,r2,99e4 <__nedf2+0x70>
    99cc:	d8800917 	ldw	r2,36(sp)
    99d0:	8809883a 	mov	r4,r17
    99d4:	800b883a 	mov	r5,r16
    99d8:	1880022e 	bgeu	r3,r2,99e4 <__nedf2+0x70>
    99dc:	000a4e80 	call	a4e8 <__fpcmp_parts_d>
    99e0:	100d883a 	mov	r6,r2
    99e4:	3005883a 	mov	r2,r6
    99e8:	dfc01017 	ldw	ra,64(sp)
    99ec:	dc400f17 	ldw	r17,60(sp)
    99f0:	dc000e17 	ldw	r16,56(sp)
    99f4:	dec01104 	addi	sp,sp,68
    99f8:	f800283a 	ret

000099fc <__gtdf2>:
    99fc:	deffef04 	addi	sp,sp,-68
    9a00:	dc400f15 	stw	r17,60(sp)
    9a04:	dc400404 	addi	r17,sp,16
    9a08:	2005883a 	mov	r2,r4
    9a0c:	2807883a 	mov	r3,r5
    9a10:	dc000e15 	stw	r16,56(sp)
    9a14:	d809883a 	mov	r4,sp
    9a18:	880b883a 	mov	r5,r17
    9a1c:	dc000904 	addi	r16,sp,36
    9a20:	d8c00115 	stw	r3,4(sp)
    9a24:	d8800015 	stw	r2,0(sp)
    9a28:	d9800215 	stw	r6,8(sp)
    9a2c:	dfc01015 	stw	ra,64(sp)
    9a30:	d9c00315 	stw	r7,12(sp)
    9a34:	000a3b00 	call	a3b0 <__unpack_d>
    9a38:	d9000204 	addi	r4,sp,8
    9a3c:	800b883a 	mov	r5,r16
    9a40:	000a3b00 	call	a3b0 <__unpack_d>
    9a44:	d8800417 	ldw	r2,16(sp)
    9a48:	00c00044 	movi	r3,1
    9a4c:	01bfffc4 	movi	r6,-1
    9a50:	1880062e 	bgeu	r3,r2,9a6c <__gtdf2+0x70>
    9a54:	d8800917 	ldw	r2,36(sp)
    9a58:	8809883a 	mov	r4,r17
    9a5c:	800b883a 	mov	r5,r16
    9a60:	1880022e 	bgeu	r3,r2,9a6c <__gtdf2+0x70>
    9a64:	000a4e80 	call	a4e8 <__fpcmp_parts_d>
    9a68:	100d883a 	mov	r6,r2
    9a6c:	3005883a 	mov	r2,r6
    9a70:	dfc01017 	ldw	ra,64(sp)
    9a74:	dc400f17 	ldw	r17,60(sp)
    9a78:	dc000e17 	ldw	r16,56(sp)
    9a7c:	dec01104 	addi	sp,sp,68
    9a80:	f800283a 	ret

00009a84 <__gedf2>:
    9a84:	deffef04 	addi	sp,sp,-68
    9a88:	dc400f15 	stw	r17,60(sp)
    9a8c:	dc400404 	addi	r17,sp,16
    9a90:	2005883a 	mov	r2,r4
    9a94:	2807883a 	mov	r3,r5
    9a98:	dc000e15 	stw	r16,56(sp)
    9a9c:	d809883a 	mov	r4,sp
    9aa0:	880b883a 	mov	r5,r17
    9aa4:	dc000904 	addi	r16,sp,36
    9aa8:	d8c00115 	stw	r3,4(sp)
    9aac:	d8800015 	stw	r2,0(sp)
    9ab0:	d9800215 	stw	r6,8(sp)
    9ab4:	dfc01015 	stw	ra,64(sp)
    9ab8:	d9c00315 	stw	r7,12(sp)
    9abc:	000a3b00 	call	a3b0 <__unpack_d>
    9ac0:	d9000204 	addi	r4,sp,8
    9ac4:	800b883a 	mov	r5,r16
    9ac8:	000a3b00 	call	a3b0 <__unpack_d>
    9acc:	d8800417 	ldw	r2,16(sp)
    9ad0:	00c00044 	movi	r3,1
    9ad4:	01bfffc4 	movi	r6,-1
    9ad8:	1880062e 	bgeu	r3,r2,9af4 <__gedf2+0x70>
    9adc:	d8800917 	ldw	r2,36(sp)
    9ae0:	8809883a 	mov	r4,r17
    9ae4:	800b883a 	mov	r5,r16
    9ae8:	1880022e 	bgeu	r3,r2,9af4 <__gedf2+0x70>
    9aec:	000a4e80 	call	a4e8 <__fpcmp_parts_d>
    9af0:	100d883a 	mov	r6,r2
    9af4:	3005883a 	mov	r2,r6
    9af8:	dfc01017 	ldw	ra,64(sp)
    9afc:	dc400f17 	ldw	r17,60(sp)
    9b00:	dc000e17 	ldw	r16,56(sp)
    9b04:	dec01104 	addi	sp,sp,68
    9b08:	f800283a 	ret

00009b0c <__ltdf2>:
    9b0c:	deffef04 	addi	sp,sp,-68
    9b10:	dc400f15 	stw	r17,60(sp)
    9b14:	dc400404 	addi	r17,sp,16
    9b18:	2005883a 	mov	r2,r4
    9b1c:	2807883a 	mov	r3,r5
    9b20:	dc000e15 	stw	r16,56(sp)
    9b24:	d809883a 	mov	r4,sp
    9b28:	880b883a 	mov	r5,r17
    9b2c:	dc000904 	addi	r16,sp,36
    9b30:	d8c00115 	stw	r3,4(sp)
    9b34:	d8800015 	stw	r2,0(sp)
    9b38:	d9800215 	stw	r6,8(sp)
    9b3c:	dfc01015 	stw	ra,64(sp)
    9b40:	d9c00315 	stw	r7,12(sp)
    9b44:	000a3b00 	call	a3b0 <__unpack_d>
    9b48:	d9000204 	addi	r4,sp,8
    9b4c:	800b883a 	mov	r5,r16
    9b50:	000a3b00 	call	a3b0 <__unpack_d>
    9b54:	d8800417 	ldw	r2,16(sp)
    9b58:	00c00044 	movi	r3,1
    9b5c:	180d883a 	mov	r6,r3
    9b60:	1880062e 	bgeu	r3,r2,9b7c <__ltdf2+0x70>
    9b64:	d8800917 	ldw	r2,36(sp)
    9b68:	8809883a 	mov	r4,r17
    9b6c:	800b883a 	mov	r5,r16
    9b70:	1880022e 	bgeu	r3,r2,9b7c <__ltdf2+0x70>
    9b74:	000a4e80 	call	a4e8 <__fpcmp_parts_d>
    9b78:	100d883a 	mov	r6,r2
    9b7c:	3005883a 	mov	r2,r6
    9b80:	dfc01017 	ldw	ra,64(sp)
    9b84:	dc400f17 	ldw	r17,60(sp)
    9b88:	dc000e17 	ldw	r16,56(sp)
    9b8c:	dec01104 	addi	sp,sp,68
    9b90:	f800283a 	ret

00009b94 <__floatsidf>:
    9b94:	2006d7fa 	srli	r3,r4,31
    9b98:	defff604 	addi	sp,sp,-40
    9b9c:	008000c4 	movi	r2,3
    9ba0:	dfc00915 	stw	ra,36(sp)
    9ba4:	dcc00815 	stw	r19,32(sp)
    9ba8:	dc800715 	stw	r18,28(sp)
    9bac:	dc400615 	stw	r17,24(sp)
    9bb0:	dc000515 	stw	r16,20(sp)
    9bb4:	d8800015 	stw	r2,0(sp)
    9bb8:	d8c00115 	stw	r3,4(sp)
    9bbc:	20000f1e 	bne	r4,zero,9bfc <__floatsidf+0x68>
    9bc0:	00800084 	movi	r2,2
    9bc4:	d8800015 	stw	r2,0(sp)
    9bc8:	d809883a 	mov	r4,sp
    9bcc:	000a09c0 	call	a09c <__pack_d>
    9bd0:	1009883a 	mov	r4,r2
    9bd4:	180b883a 	mov	r5,r3
    9bd8:	2005883a 	mov	r2,r4
    9bdc:	2807883a 	mov	r3,r5
    9be0:	dfc00917 	ldw	ra,36(sp)
    9be4:	dcc00817 	ldw	r19,32(sp)
    9be8:	dc800717 	ldw	r18,28(sp)
    9bec:	dc400617 	ldw	r17,24(sp)
    9bf0:	dc000517 	ldw	r16,20(sp)
    9bf4:	dec00a04 	addi	sp,sp,40
    9bf8:	f800283a 	ret
    9bfc:	00800f04 	movi	r2,60
    9c00:	1807003a 	cmpeq	r3,r3,zero
    9c04:	d8800215 	stw	r2,8(sp)
    9c08:	18001126 	beq	r3,zero,9c50 <__floatsidf+0xbc>
    9c0c:	0027883a 	mov	r19,zero
    9c10:	2025883a 	mov	r18,r4
    9c14:	d9000315 	stw	r4,12(sp)
    9c18:	dcc00415 	stw	r19,16(sp)
    9c1c:	000a01c0 	call	a01c <__clzsi2>
    9c20:	11000744 	addi	r4,r2,29
    9c24:	013fe80e 	bge	zero,r4,9bc8 <__floatsidf+0x34>
    9c28:	10bfff44 	addi	r2,r2,-3
    9c2c:	10000c16 	blt	r2,zero,9c60 <__floatsidf+0xcc>
    9c30:	90a2983a 	sll	r17,r18,r2
    9c34:	0021883a 	mov	r16,zero
    9c38:	d8800217 	ldw	r2,8(sp)
    9c3c:	dc400415 	stw	r17,16(sp)
    9c40:	dc000315 	stw	r16,12(sp)
    9c44:	1105c83a 	sub	r2,r2,r4
    9c48:	d8800215 	stw	r2,8(sp)
    9c4c:	003fde06 	br	9bc8 <__floatsidf+0x34>
    9c50:	00a00034 	movhi	r2,32768
    9c54:	20800a26 	beq	r4,r2,9c80 <__floatsidf+0xec>
    9c58:	0109c83a 	sub	r4,zero,r4
    9c5c:	003feb06 	br	9c0c <__floatsidf+0x78>
    9c60:	9006d07a 	srli	r3,r18,1
    9c64:	008007c4 	movi	r2,31
    9c68:	1105c83a 	sub	r2,r2,r4
    9c6c:	1886d83a 	srl	r3,r3,r2
    9c70:	9922983a 	sll	r17,r19,r4
    9c74:	9120983a 	sll	r16,r18,r4
    9c78:	1c62b03a 	or	r17,r3,r17
    9c7c:	003fee06 	br	9c38 <__floatsidf+0xa4>
    9c80:	0009883a 	mov	r4,zero
    9c84:	01707834 	movhi	r5,49632
    9c88:	003fd306 	br	9bd8 <__floatsidf+0x44>

00009c8c <__fixdfsi>:
    9c8c:	defff804 	addi	sp,sp,-32
    9c90:	2005883a 	mov	r2,r4
    9c94:	2807883a 	mov	r3,r5
    9c98:	d809883a 	mov	r4,sp
    9c9c:	d9400204 	addi	r5,sp,8
    9ca0:	d8c00115 	stw	r3,4(sp)
    9ca4:	d8800015 	stw	r2,0(sp)
    9ca8:	dfc00715 	stw	ra,28(sp)
    9cac:	000a3b00 	call	a3b0 <__unpack_d>
    9cb0:	d8c00217 	ldw	r3,8(sp)
    9cb4:	00800084 	movi	r2,2
    9cb8:	1880051e 	bne	r3,r2,9cd0 <__fixdfsi+0x44>
    9cbc:	0007883a 	mov	r3,zero
    9cc0:	1805883a 	mov	r2,r3
    9cc4:	dfc00717 	ldw	ra,28(sp)
    9cc8:	dec00804 	addi	sp,sp,32
    9ccc:	f800283a 	ret
    9cd0:	00800044 	movi	r2,1
    9cd4:	10fff92e 	bgeu	r2,r3,9cbc <__fixdfsi+0x30>
    9cd8:	00800104 	movi	r2,4
    9cdc:	18800426 	beq	r3,r2,9cf0 <__fixdfsi+0x64>
    9ce0:	d8c00417 	ldw	r3,16(sp)
    9ce4:	183ff516 	blt	r3,zero,9cbc <__fixdfsi+0x30>
    9ce8:	00800784 	movi	r2,30
    9cec:	10c0080e 	bge	r2,r3,9d10 <__fixdfsi+0x84>
    9cf0:	d8800317 	ldw	r2,12(sp)
    9cf4:	1000121e 	bne	r2,zero,9d40 <__fixdfsi+0xb4>
    9cf8:	00e00034 	movhi	r3,32768
    9cfc:	18ffffc4 	addi	r3,r3,-1
    9d00:	1805883a 	mov	r2,r3
    9d04:	dfc00717 	ldw	ra,28(sp)
    9d08:	dec00804 	addi	sp,sp,32
    9d0c:	f800283a 	ret
    9d10:	00800f04 	movi	r2,60
    9d14:	10d1c83a 	sub	r8,r2,r3
    9d18:	40bff804 	addi	r2,r8,-32
    9d1c:	d9800517 	ldw	r6,20(sp)
    9d20:	d9c00617 	ldw	r7,24(sp)
    9d24:	10000816 	blt	r2,zero,9d48 <__fixdfsi+0xbc>
    9d28:	3888d83a 	srl	r4,r7,r2
    9d2c:	d8800317 	ldw	r2,12(sp)
    9d30:	2007883a 	mov	r3,r4
    9d34:	103fe226 	beq	r2,zero,9cc0 <__fixdfsi+0x34>
    9d38:	0107c83a 	sub	r3,zero,r4
    9d3c:	003fe006 	br	9cc0 <__fixdfsi+0x34>
    9d40:	00e00034 	movhi	r3,32768
    9d44:	003fde06 	br	9cc0 <__fixdfsi+0x34>
    9d48:	39c7883a 	add	r3,r7,r7
    9d4c:	008007c4 	movi	r2,31
    9d50:	1205c83a 	sub	r2,r2,r8
    9d54:	1886983a 	sll	r3,r3,r2
    9d58:	3208d83a 	srl	r4,r6,r8
    9d5c:	1908b03a 	or	r4,r3,r4
    9d60:	003ff206 	br	9d2c <__fixdfsi+0xa0>

00009d64 <__floatunsidf>:
    9d64:	defff204 	addi	sp,sp,-56
    9d68:	dfc00d15 	stw	ra,52(sp)
    9d6c:	ddc00c15 	stw	r23,48(sp)
    9d70:	dd800b15 	stw	r22,44(sp)
    9d74:	dd400a15 	stw	r21,40(sp)
    9d78:	dd000915 	stw	r20,36(sp)
    9d7c:	dcc00815 	stw	r19,32(sp)
    9d80:	dc800715 	stw	r18,28(sp)
    9d84:	dc400615 	stw	r17,24(sp)
    9d88:	dc000515 	stw	r16,20(sp)
    9d8c:	d8000115 	stw	zero,4(sp)
    9d90:	20000f1e 	bne	r4,zero,9dd0 <__floatunsidf+0x6c>
    9d94:	00800084 	movi	r2,2
    9d98:	d8800015 	stw	r2,0(sp)
    9d9c:	d809883a 	mov	r4,sp
    9da0:	000a09c0 	call	a09c <__pack_d>
    9da4:	dfc00d17 	ldw	ra,52(sp)
    9da8:	ddc00c17 	ldw	r23,48(sp)
    9dac:	dd800b17 	ldw	r22,44(sp)
    9db0:	dd400a17 	ldw	r21,40(sp)
    9db4:	dd000917 	ldw	r20,36(sp)
    9db8:	dcc00817 	ldw	r19,32(sp)
    9dbc:	dc800717 	ldw	r18,28(sp)
    9dc0:	dc400617 	ldw	r17,24(sp)
    9dc4:	dc000517 	ldw	r16,20(sp)
    9dc8:	dec00e04 	addi	sp,sp,56
    9dcc:	f800283a 	ret
    9dd0:	008000c4 	movi	r2,3
    9dd4:	00c00f04 	movi	r3,60
    9dd8:	002f883a 	mov	r23,zero
    9ddc:	202d883a 	mov	r22,r4
    9de0:	d8800015 	stw	r2,0(sp)
    9de4:	d8c00215 	stw	r3,8(sp)
    9de8:	d9000315 	stw	r4,12(sp)
    9dec:	ddc00415 	stw	r23,16(sp)
    9df0:	000a01c0 	call	a01c <__clzsi2>
    9df4:	12400744 	addi	r9,r2,29
    9df8:	48000b16 	blt	r9,zero,9e28 <__floatunsidf+0xc4>
    9dfc:	483fe726 	beq	r9,zero,9d9c <__floatunsidf+0x38>
    9e00:	10bfff44 	addi	r2,r2,-3
    9e04:	10002e16 	blt	r2,zero,9ec0 <__floatunsidf+0x15c>
    9e08:	b0a2983a 	sll	r17,r22,r2
    9e0c:	0021883a 	mov	r16,zero
    9e10:	d8800217 	ldw	r2,8(sp)
    9e14:	dc400415 	stw	r17,16(sp)
    9e18:	dc000315 	stw	r16,12(sp)
    9e1c:	1245c83a 	sub	r2,r2,r9
    9e20:	d8800215 	stw	r2,8(sp)
    9e24:	003fdd06 	br	9d9c <__floatunsidf+0x38>
    9e28:	0255c83a 	sub	r10,zero,r9
    9e2c:	51bff804 	addi	r6,r10,-32
    9e30:	30001b16 	blt	r6,zero,9ea0 <__floatunsidf+0x13c>
    9e34:	b9a8d83a 	srl	r20,r23,r6
    9e38:	002b883a 	mov	r21,zero
    9e3c:	000f883a 	mov	r7,zero
    9e40:	01000044 	movi	r4,1
    9e44:	0011883a 	mov	r8,zero
    9e48:	30002516 	blt	r6,zero,9ee0 <__floatunsidf+0x17c>
    9e4c:	21a6983a 	sll	r19,r4,r6
    9e50:	0025883a 	mov	r18,zero
    9e54:	00bfffc4 	movi	r2,-1
    9e58:	9089883a 	add	r4,r18,r2
    9e5c:	988b883a 	add	r5,r19,r2
    9e60:	248d803a 	cmpltu	r6,r4,r18
    9e64:	314b883a 	add	r5,r6,r5
    9e68:	b104703a 	and	r2,r22,r4
    9e6c:	b946703a 	and	r3,r23,r5
    9e70:	10c4b03a 	or	r2,r2,r3
    9e74:	10000226 	beq	r2,zero,9e80 <__floatunsidf+0x11c>
    9e78:	01c00044 	movi	r7,1
    9e7c:	0011883a 	mov	r8,zero
    9e80:	d9000217 	ldw	r4,8(sp)
    9e84:	a1c4b03a 	or	r2,r20,r7
    9e88:	aa06b03a 	or	r3,r21,r8
    9e8c:	2249c83a 	sub	r4,r4,r9
    9e90:	d8c00415 	stw	r3,16(sp)
    9e94:	d9000215 	stw	r4,8(sp)
    9e98:	d8800315 	stw	r2,12(sp)
    9e9c:	003fbf06 	br	9d9c <__floatunsidf+0x38>
    9ea0:	bdc7883a 	add	r3,r23,r23
    9ea4:	008007c4 	movi	r2,31
    9ea8:	1285c83a 	sub	r2,r2,r10
    9eac:	1886983a 	sll	r3,r3,r2
    9eb0:	b2a8d83a 	srl	r20,r22,r10
    9eb4:	baaad83a 	srl	r21,r23,r10
    9eb8:	1d28b03a 	or	r20,r3,r20
    9ebc:	003fdf06 	br	9e3c <__floatunsidf+0xd8>
    9ec0:	b006d07a 	srli	r3,r22,1
    9ec4:	008007c4 	movi	r2,31
    9ec8:	1245c83a 	sub	r2,r2,r9
    9ecc:	1886d83a 	srl	r3,r3,r2
    9ed0:	ba62983a 	sll	r17,r23,r9
    9ed4:	b260983a 	sll	r16,r22,r9
    9ed8:	1c62b03a 	or	r17,r3,r17
    9edc:	003fcc06 	br	9e10 <__floatunsidf+0xac>
    9ee0:	2006d07a 	srli	r3,r4,1
    9ee4:	008007c4 	movi	r2,31
    9ee8:	1285c83a 	sub	r2,r2,r10
    9eec:	18a6d83a 	srl	r19,r3,r2
    9ef0:	22a4983a 	sll	r18,r4,r10
    9ef4:	003fd706 	br	9e54 <__floatunsidf+0xf0>

00009ef8 <__muldi3>:
    9ef8:	defff204 	addi	sp,sp,-56
    9efc:	df000c15 	stw	fp,48(sp)
    9f00:	3038d43a 	srli	fp,r6,16
    9f04:	dd000815 	stw	r20,32(sp)
    9f08:	dc400515 	stw	r17,20(sp)
    9f0c:	2028d43a 	srli	r20,r4,16
    9f10:	247fffcc 	andi	r17,r4,65535
    9f14:	dc000415 	stw	r16,16(sp)
    9f18:	343fffcc 	andi	r16,r6,65535
    9f1c:	dcc00715 	stw	r19,28(sp)
    9f20:	d9000015 	stw	r4,0(sp)
    9f24:	2827883a 	mov	r19,r5
    9f28:	8809883a 	mov	r4,r17
    9f2c:	d9400115 	stw	r5,4(sp)
    9f30:	800b883a 	mov	r5,r16
    9f34:	d9800215 	stw	r6,8(sp)
    9f38:	dfc00d15 	stw	ra,52(sp)
    9f3c:	d9c00315 	stw	r7,12(sp)
    9f40:	dd800a15 	stw	r22,40(sp)
    9f44:	dd400915 	stw	r21,36(sp)
    9f48:	302d883a 	mov	r22,r6
    9f4c:	ddc00b15 	stw	r23,44(sp)
    9f50:	dc800615 	stw	r18,24(sp)
    9f54:	0000c680 	call	c68 <__mulsi3>
    9f58:	8809883a 	mov	r4,r17
    9f5c:	e00b883a 	mov	r5,fp
    9f60:	102b883a 	mov	r21,r2
    9f64:	0000c680 	call	c68 <__mulsi3>
    9f68:	800b883a 	mov	r5,r16
    9f6c:	a009883a 	mov	r4,r20
    9f70:	1023883a 	mov	r17,r2
    9f74:	0000c680 	call	c68 <__mulsi3>
    9f78:	a009883a 	mov	r4,r20
    9f7c:	e00b883a 	mov	r5,fp
    9f80:	1021883a 	mov	r16,r2
    9f84:	0000c680 	call	c68 <__mulsi3>
    9f88:	a8ffffcc 	andi	r3,r21,65535
    9f8c:	a82ad43a 	srli	r21,r21,16
    9f90:	8c23883a 	add	r17,r17,r16
    9f94:	1011883a 	mov	r8,r2
    9f98:	ac6b883a 	add	r21,r21,r17
    9f9c:	a804943a 	slli	r2,r21,16
    9fa0:	b009883a 	mov	r4,r22
    9fa4:	980b883a 	mov	r5,r19
    9fa8:	10c7883a 	add	r3,r2,r3
    9fac:	a812d43a 	srli	r9,r21,16
    9fb0:	180d883a 	mov	r6,r3
    9fb4:	ac00022e 	bgeu	r21,r16,9fc0 <__muldi3+0xc8>
    9fb8:	00800074 	movhi	r2,1
    9fbc:	4091883a 	add	r8,r8,r2
    9fc0:	4267883a 	add	r19,r8,r9
    9fc4:	302d883a 	mov	r22,r6
    9fc8:	0000c680 	call	c68 <__mulsi3>
    9fcc:	d9400317 	ldw	r5,12(sp)
    9fd0:	d9000017 	ldw	r4,0(sp)
    9fd4:	1023883a 	mov	r17,r2
    9fd8:	0000c680 	call	c68 <__mulsi3>
    9fdc:	14cb883a 	add	r5,r2,r19
    9fe0:	894b883a 	add	r5,r17,r5
    9fe4:	b005883a 	mov	r2,r22
    9fe8:	2807883a 	mov	r3,r5
    9fec:	dfc00d17 	ldw	ra,52(sp)
    9ff0:	df000c17 	ldw	fp,48(sp)
    9ff4:	ddc00b17 	ldw	r23,44(sp)
    9ff8:	dd800a17 	ldw	r22,40(sp)
    9ffc:	dd400917 	ldw	r21,36(sp)
    a000:	dd000817 	ldw	r20,32(sp)
    a004:	dcc00717 	ldw	r19,28(sp)
    a008:	dc800617 	ldw	r18,24(sp)
    a00c:	dc400517 	ldw	r17,20(sp)
    a010:	dc000417 	ldw	r16,16(sp)
    a014:	dec00e04 	addi	sp,sp,56
    a018:	f800283a 	ret

0000a01c <__clzsi2>:
    a01c:	00bfffd4 	movui	r2,65535
    a020:	11000e36 	bltu	r2,r4,a05c <__clzsi2+0x40>
    a024:	00803fc4 	movi	r2,255
    a028:	01400204 	movi	r5,8
    a02c:	0007883a 	mov	r3,zero
    a030:	11001036 	bltu	r2,r4,a074 <__clzsi2+0x58>
    a034:	000b883a 	mov	r5,zero
    a038:	20c6d83a 	srl	r3,r4,r3
    a03c:	00800074 	movhi	r2,1
    a040:	10b62904 	addi	r2,r2,-10076
    a044:	1887883a 	add	r3,r3,r2
    a048:	18800003 	ldbu	r2,0(r3)
    a04c:	00c00804 	movi	r3,32
    a050:	2885883a 	add	r2,r5,r2
    a054:	1885c83a 	sub	r2,r3,r2
    a058:	f800283a 	ret
    a05c:	01400404 	movi	r5,16
    a060:	00804034 	movhi	r2,256
    a064:	10bfffc4 	addi	r2,r2,-1
    a068:	2807883a 	mov	r3,r5
    a06c:	113ff22e 	bgeu	r2,r4,a038 <__clzsi2+0x1c>
    a070:	01400604 	movi	r5,24
    a074:	2807883a 	mov	r3,r5
    a078:	20c6d83a 	srl	r3,r4,r3
    a07c:	00800074 	movhi	r2,1
    a080:	10b62904 	addi	r2,r2,-10076
    a084:	1887883a 	add	r3,r3,r2
    a088:	18800003 	ldbu	r2,0(r3)
    a08c:	00c00804 	movi	r3,32
    a090:	2885883a 	add	r2,r5,r2
    a094:	1885c83a 	sub	r2,r3,r2
    a098:	f800283a 	ret

0000a09c <__pack_d>:
    a09c:	20c00017 	ldw	r3,0(r4)
    a0a0:	defffd04 	addi	sp,sp,-12
    a0a4:	dc000015 	stw	r16,0(sp)
    a0a8:	dc800215 	stw	r18,8(sp)
    a0ac:	dc400115 	stw	r17,4(sp)
    a0b0:	00800044 	movi	r2,1
    a0b4:	22000317 	ldw	r8,12(r4)
    a0b8:	001f883a 	mov	r15,zero
    a0bc:	22400417 	ldw	r9,16(r4)
    a0c0:	24000117 	ldw	r16,4(r4)
    a0c4:	10c0552e 	bgeu	r2,r3,a21c <__pack_d+0x180>
    a0c8:	00800104 	movi	r2,4
    a0cc:	18804f26 	beq	r3,r2,a20c <__pack_d+0x170>
    a0d0:	00800084 	movi	r2,2
    a0d4:	18800226 	beq	r3,r2,a0e0 <__pack_d+0x44>
    a0d8:	4244b03a 	or	r2,r8,r9
    a0dc:	10001a1e 	bne	r2,zero,a148 <__pack_d+0xac>
    a0e0:	000d883a 	mov	r6,zero
    a0e4:	000f883a 	mov	r7,zero
    a0e8:	0011883a 	mov	r8,zero
    a0ec:	00800434 	movhi	r2,16
    a0f0:	10bfffc4 	addi	r2,r2,-1
    a0f4:	301d883a 	mov	r14,r6
    a0f8:	3884703a 	and	r2,r7,r2
    a0fc:	400a953a 	slli	r5,r8,20
    a100:	79bffc2c 	andhi	r6,r15,65520
    a104:	308cb03a 	or	r6,r6,r2
    a108:	00e00434 	movhi	r3,32784
    a10c:	18ffffc4 	addi	r3,r3,-1
    a110:	800497fa 	slli	r2,r16,31
    a114:	30c6703a 	and	r3,r6,r3
    a118:	1946b03a 	or	r3,r3,r5
    a11c:	01600034 	movhi	r5,32768
    a120:	297fffc4 	addi	r5,r5,-1
    a124:	194a703a 	and	r5,r3,r5
    a128:	288ab03a 	or	r5,r5,r2
    a12c:	2807883a 	mov	r3,r5
    a130:	7005883a 	mov	r2,r14
    a134:	dc800217 	ldw	r18,8(sp)
    a138:	dc400117 	ldw	r17,4(sp)
    a13c:	dc000017 	ldw	r16,0(sp)
    a140:	dec00304 	addi	sp,sp,12
    a144:	f800283a 	ret
    a148:	21000217 	ldw	r4,8(r4)
    a14c:	00bf0084 	movi	r2,-1022
    a150:	20803f16 	blt	r4,r2,a250 <__pack_d+0x1b4>
    a154:	0080ffc4 	movi	r2,1023
    a158:	11002c16 	blt	r2,r4,a20c <__pack_d+0x170>
    a15c:	00803fc4 	movi	r2,255
    a160:	408c703a 	and	r6,r8,r2
    a164:	00802004 	movi	r2,128
    a168:	0007883a 	mov	r3,zero
    a16c:	000f883a 	mov	r7,zero
    a170:	2280ffc4 	addi	r10,r4,1023
    a174:	30801e26 	beq	r6,r2,a1f0 <__pack_d+0x154>
    a178:	00801fc4 	movi	r2,127
    a17c:	4089883a 	add	r4,r8,r2
    a180:	220d803a 	cmpltu	r6,r4,r8
    a184:	324d883a 	add	r6,r6,r9
    a188:	2011883a 	mov	r8,r4
    a18c:	3013883a 	mov	r9,r6
    a190:	00880034 	movhi	r2,8192
    a194:	10bfffc4 	addi	r2,r2,-1
    a198:	12400d36 	bltu	r2,r9,a1d0 <__pack_d+0x134>
    a19c:	4804963a 	slli	r2,r9,24
    a1a0:	400cd23a 	srli	r6,r8,8
    a1a4:	480ed23a 	srli	r7,r9,8
    a1a8:	013fffc4 	movi	r4,-1
    a1ac:	118cb03a 	or	r6,r2,r6
    a1b0:	01400434 	movhi	r5,16
    a1b4:	297fffc4 	addi	r5,r5,-1
    a1b8:	3104703a 	and	r2,r6,r4
    a1bc:	3946703a 	and	r3,r7,r5
    a1c0:	5201ffcc 	andi	r8,r10,2047
    a1c4:	100d883a 	mov	r6,r2
    a1c8:	180f883a 	mov	r7,r3
    a1cc:	003fc706 	br	a0ec <__pack_d+0x50>
    a1d0:	480897fa 	slli	r4,r9,31
    a1d4:	4004d07a 	srli	r2,r8,1
    a1d8:	4806d07a 	srli	r3,r9,1
    a1dc:	52800044 	addi	r10,r10,1
    a1e0:	2084b03a 	or	r2,r4,r2
    a1e4:	1011883a 	mov	r8,r2
    a1e8:	1813883a 	mov	r9,r3
    a1ec:	003feb06 	br	a19c <__pack_d+0x100>
    a1f0:	383fe11e 	bne	r7,zero,a178 <__pack_d+0xdc>
    a1f4:	01004004 	movi	r4,256
    a1f8:	4104703a 	and	r2,r8,r4
    a1fc:	10c4b03a 	or	r2,r2,r3
    a200:	103fe326 	beq	r2,zero,a190 <__pack_d+0xf4>
    a204:	3005883a 	mov	r2,r6
    a208:	003fdc06 	br	a17c <__pack_d+0xe0>
    a20c:	000d883a 	mov	r6,zero
    a210:	000f883a 	mov	r7,zero
    a214:	0201ffc4 	movi	r8,2047
    a218:	003fb406 	br	a0ec <__pack_d+0x50>
    a21c:	0005883a 	mov	r2,zero
    a220:	00c00234 	movhi	r3,8
    a224:	408cb03a 	or	r6,r8,r2
    a228:	48ceb03a 	or	r7,r9,r3
    a22c:	013fffc4 	movi	r4,-1
    a230:	01400434 	movhi	r5,16
    a234:	297fffc4 	addi	r5,r5,-1
    a238:	3104703a 	and	r2,r6,r4
    a23c:	3946703a 	and	r3,r7,r5
    a240:	100d883a 	mov	r6,r2
    a244:	180f883a 	mov	r7,r3
    a248:	0201ffc4 	movi	r8,2047
    a24c:	003fa706 	br	a0ec <__pack_d+0x50>
    a250:	1109c83a 	sub	r4,r2,r4
    a254:	00800e04 	movi	r2,56
    a258:	11004316 	blt	r2,r4,a368 <__pack_d+0x2cc>
    a25c:	21fff804 	addi	r7,r4,-32
    a260:	38004516 	blt	r7,zero,a378 <__pack_d+0x2dc>
    a264:	49d8d83a 	srl	r12,r9,r7
    a268:	001b883a 	mov	r13,zero
    a26c:	0023883a 	mov	r17,zero
    a270:	01400044 	movi	r5,1
    a274:	0025883a 	mov	r18,zero
    a278:	38004716 	blt	r7,zero,a398 <__pack_d+0x2fc>
    a27c:	29d6983a 	sll	r11,r5,r7
    a280:	0015883a 	mov	r10,zero
    a284:	00bfffc4 	movi	r2,-1
    a288:	5089883a 	add	r4,r10,r2
    a28c:	588b883a 	add	r5,r11,r2
    a290:	228d803a 	cmpltu	r6,r4,r10
    a294:	314b883a 	add	r5,r6,r5
    a298:	4104703a 	and	r2,r8,r4
    a29c:	4946703a 	and	r3,r9,r5
    a2a0:	10c4b03a 	or	r2,r2,r3
    a2a4:	10000226 	beq	r2,zero,a2b0 <__pack_d+0x214>
    a2a8:	04400044 	movi	r17,1
    a2ac:	0025883a 	mov	r18,zero
    a2b0:	00803fc4 	movi	r2,255
    a2b4:	644eb03a 	or	r7,r12,r17
    a2b8:	3892703a 	and	r9,r7,r2
    a2bc:	00802004 	movi	r2,128
    a2c0:	6c90b03a 	or	r8,r13,r18
    a2c4:	0015883a 	mov	r10,zero
    a2c8:	48801626 	beq	r9,r2,a324 <__pack_d+0x288>
    a2cc:	01001fc4 	movi	r4,127
    a2d0:	3905883a 	add	r2,r7,r4
    a2d4:	11cd803a 	cmpltu	r6,r2,r7
    a2d8:	320d883a 	add	r6,r6,r8
    a2dc:	100f883a 	mov	r7,r2
    a2e0:	00840034 	movhi	r2,4096
    a2e4:	10bfffc4 	addi	r2,r2,-1
    a2e8:	3011883a 	mov	r8,r6
    a2ec:	0007883a 	mov	r3,zero
    a2f0:	11801b36 	bltu	r2,r6,a360 <__pack_d+0x2c4>
    a2f4:	4004963a 	slli	r2,r8,24
    a2f8:	3808d23a 	srli	r4,r7,8
    a2fc:	400ad23a 	srli	r5,r8,8
    a300:	1813883a 	mov	r9,r3
    a304:	1108b03a 	or	r4,r2,r4
    a308:	00bfffc4 	movi	r2,-1
    a30c:	00c00434 	movhi	r3,16
    a310:	18ffffc4 	addi	r3,r3,-1
    a314:	208c703a 	and	r6,r4,r2
    a318:	28ce703a 	and	r7,r5,r3
    a31c:	4a01ffcc 	andi	r8,r9,2047
    a320:	003f7206 	br	a0ec <__pack_d+0x50>
    a324:	503fe91e 	bne	r10,zero,a2cc <__pack_d+0x230>
    a328:	01004004 	movi	r4,256
    a32c:	3904703a 	and	r2,r7,r4
    a330:	0007883a 	mov	r3,zero
    a334:	10c4b03a 	or	r2,r2,r3
    a338:	10000626 	beq	r2,zero,a354 <__pack_d+0x2b8>
    a33c:	3a45883a 	add	r2,r7,r9
    a340:	11cd803a 	cmpltu	r6,r2,r7
    a344:	320d883a 	add	r6,r6,r8
    a348:	100f883a 	mov	r7,r2
    a34c:	3011883a 	mov	r8,r6
    a350:	0007883a 	mov	r3,zero
    a354:	00840034 	movhi	r2,4096
    a358:	10bfffc4 	addi	r2,r2,-1
    a35c:	123fe52e 	bgeu	r2,r8,a2f4 <__pack_d+0x258>
    a360:	00c00044 	movi	r3,1
    a364:	003fe306 	br	a2f4 <__pack_d+0x258>
    a368:	0009883a 	mov	r4,zero
    a36c:	0013883a 	mov	r9,zero
    a370:	000b883a 	mov	r5,zero
    a374:	003fe406 	br	a308 <__pack_d+0x26c>
    a378:	4a47883a 	add	r3,r9,r9
    a37c:	008007c4 	movi	r2,31
    a380:	1105c83a 	sub	r2,r2,r4
    a384:	1886983a 	sll	r3,r3,r2
    a388:	4118d83a 	srl	r12,r8,r4
    a38c:	491ad83a 	srl	r13,r9,r4
    a390:	1b18b03a 	or	r12,r3,r12
    a394:	003fb506 	br	a26c <__pack_d+0x1d0>
    a398:	2806d07a 	srli	r3,r5,1
    a39c:	008007c4 	movi	r2,31
    a3a0:	1105c83a 	sub	r2,r2,r4
    a3a4:	1896d83a 	srl	r11,r3,r2
    a3a8:	2914983a 	sll	r10,r5,r4
    a3ac:	003fb506 	br	a284 <__pack_d+0x1e8>

0000a3b0 <__unpack_d>:
    a3b0:	20c00117 	ldw	r3,4(r4)
    a3b4:	22400017 	ldw	r9,0(r4)
    a3b8:	00800434 	movhi	r2,16
    a3bc:	10bfffc4 	addi	r2,r2,-1
    a3c0:	1808d53a 	srli	r4,r3,20
    a3c4:	180cd7fa 	srli	r6,r3,31
    a3c8:	1894703a 	and	r10,r3,r2
    a3cc:	2201ffcc 	andi	r8,r4,2047
    a3d0:	281b883a 	mov	r13,r5
    a3d4:	4817883a 	mov	r11,r9
    a3d8:	29800115 	stw	r6,4(r5)
    a3dc:	5019883a 	mov	r12,r10
    a3e0:	40001e1e 	bne	r8,zero,a45c <__unpack_d+0xac>
    a3e4:	4a84b03a 	or	r2,r9,r10
    a3e8:	10001926 	beq	r2,zero,a450 <__unpack_d+0xa0>
    a3ec:	4804d63a 	srli	r2,r9,24
    a3f0:	500c923a 	slli	r6,r10,8
    a3f4:	013f0084 	movi	r4,-1022
    a3f8:	00c40034 	movhi	r3,4096
    a3fc:	18ffffc4 	addi	r3,r3,-1
    a400:	118cb03a 	or	r6,r2,r6
    a404:	008000c4 	movi	r2,3
    a408:	480a923a 	slli	r5,r9,8
    a40c:	68800015 	stw	r2,0(r13)
    a410:	69000215 	stw	r4,8(r13)
    a414:	19800b36 	bltu	r3,r6,a444 <__unpack_d+0x94>
    a418:	200f883a 	mov	r7,r4
    a41c:	1811883a 	mov	r8,r3
    a420:	2945883a 	add	r2,r5,r5
    a424:	1149803a 	cmpltu	r4,r2,r5
    a428:	3187883a 	add	r3,r6,r6
    a42c:	20c9883a 	add	r4,r4,r3
    a430:	100b883a 	mov	r5,r2
    a434:	200d883a 	mov	r6,r4
    a438:	39ffffc4 	addi	r7,r7,-1
    a43c:	413ff82e 	bgeu	r8,r4,a420 <__unpack_d+0x70>
    a440:	69c00215 	stw	r7,8(r13)
    a444:	69800415 	stw	r6,16(r13)
    a448:	69400315 	stw	r5,12(r13)
    a44c:	f800283a 	ret
    a450:	00800084 	movi	r2,2
    a454:	28800015 	stw	r2,0(r5)
    a458:	f800283a 	ret
    a45c:	0081ffc4 	movi	r2,2047
    a460:	40800f26 	beq	r8,r2,a4a0 <__unpack_d+0xf0>
    a464:	480cd63a 	srli	r6,r9,24
    a468:	5006923a 	slli	r3,r10,8
    a46c:	4804923a 	slli	r2,r9,8
    a470:	0009883a 	mov	r4,zero
    a474:	30c6b03a 	or	r3,r6,r3
    a478:	01440034 	movhi	r5,4096
    a47c:	110cb03a 	or	r6,r2,r4
    a480:	423f0044 	addi	r8,r8,-1023
    a484:	194eb03a 	or	r7,r3,r5
    a488:	008000c4 	movi	r2,3
    a48c:	69c00415 	stw	r7,16(r13)
    a490:	6a000215 	stw	r8,8(r13)
    a494:	68800015 	stw	r2,0(r13)
    a498:	69800315 	stw	r6,12(r13)
    a49c:	f800283a 	ret
    a4a0:	4a84b03a 	or	r2,r9,r10
    a4a4:	1000031e 	bne	r2,zero,a4b4 <__unpack_d+0x104>
    a4a8:	00800104 	movi	r2,4
    a4ac:	28800015 	stw	r2,0(r5)
    a4b0:	f800283a 	ret
    a4b4:	0009883a 	mov	r4,zero
    a4b8:	01400234 	movhi	r5,8
    a4bc:	4904703a 	and	r2,r9,r4
    a4c0:	5146703a 	and	r3,r10,r5
    a4c4:	10c4b03a 	or	r2,r2,r3
    a4c8:	10000526 	beq	r2,zero,a4e0 <__unpack_d+0x130>
    a4cc:	00800044 	movi	r2,1
    a4d0:	68800015 	stw	r2,0(r13)
    a4d4:	6b000415 	stw	r12,16(r13)
    a4d8:	6ac00315 	stw	r11,12(r13)
    a4dc:	f800283a 	ret
    a4e0:	68000015 	stw	zero,0(r13)
    a4e4:	003ffb06 	br	a4d4 <__unpack_d+0x124>

0000a4e8 <__fpcmp_parts_d>:
    a4e8:	21800017 	ldw	r6,0(r4)
    a4ec:	00c00044 	movi	r3,1
    a4f0:	19800a2e 	bgeu	r3,r6,a51c <__fpcmp_parts_d+0x34>
    a4f4:	28800017 	ldw	r2,0(r5)
    a4f8:	1880082e 	bgeu	r3,r2,a51c <__fpcmp_parts_d+0x34>
    a4fc:	00c00104 	movi	r3,4
    a500:	30c02626 	beq	r6,r3,a59c <__fpcmp_parts_d+0xb4>
    a504:	10c02226 	beq	r2,r3,a590 <__fpcmp_parts_d+0xa8>
    a508:	00c00084 	movi	r3,2
    a50c:	30c00526 	beq	r6,r3,a524 <__fpcmp_parts_d+0x3c>
    a510:	10c0071e 	bne	r2,r3,a530 <__fpcmp_parts_d+0x48>
    a514:	20800117 	ldw	r2,4(r4)
    a518:	1000091e 	bne	r2,zero,a540 <__fpcmp_parts_d+0x58>
    a51c:	00800044 	movi	r2,1
    a520:	f800283a 	ret
    a524:	10c01a1e 	bne	r2,r3,a590 <__fpcmp_parts_d+0xa8>
    a528:	0005883a 	mov	r2,zero
    a52c:	f800283a 	ret
    a530:	22000117 	ldw	r8,4(r4)
    a534:	28800117 	ldw	r2,4(r5)
    a538:	40800326 	beq	r8,r2,a548 <__fpcmp_parts_d+0x60>
    a53c:	403ff726 	beq	r8,zero,a51c <__fpcmp_parts_d+0x34>
    a540:	00bfffc4 	movi	r2,-1
    a544:	f800283a 	ret
    a548:	20c00217 	ldw	r3,8(r4)
    a54c:	28800217 	ldw	r2,8(r5)
    a550:	10fffa16 	blt	r2,r3,a53c <__fpcmp_parts_d+0x54>
    a554:	18800916 	blt	r3,r2,a57c <__fpcmp_parts_d+0x94>
    a558:	21c00417 	ldw	r7,16(r4)
    a55c:	28c00417 	ldw	r3,16(r5)
    a560:	21800317 	ldw	r6,12(r4)
    a564:	28800317 	ldw	r2,12(r5)
    a568:	19fff436 	bltu	r3,r7,a53c <__fpcmp_parts_d+0x54>
    a56c:	38c00526 	beq	r7,r3,a584 <__fpcmp_parts_d+0x9c>
    a570:	38c00236 	bltu	r7,r3,a57c <__fpcmp_parts_d+0x94>
    a574:	19ffec1e 	bne	r3,r7,a528 <__fpcmp_parts_d+0x40>
    a578:	30bfeb2e 	bgeu	r6,r2,a528 <__fpcmp_parts_d+0x40>
    a57c:	403fe71e 	bne	r8,zero,a51c <__fpcmp_parts_d+0x34>
    a580:	003fef06 	br	a540 <__fpcmp_parts_d+0x58>
    a584:	11bffa2e 	bgeu	r2,r6,a570 <__fpcmp_parts_d+0x88>
    a588:	403fe426 	beq	r8,zero,a51c <__fpcmp_parts_d+0x34>
    a58c:	003fec06 	br	a540 <__fpcmp_parts_d+0x58>
    a590:	28800117 	ldw	r2,4(r5)
    a594:	103fe11e 	bne	r2,zero,a51c <__fpcmp_parts_d+0x34>
    a598:	003fe906 	br	a540 <__fpcmp_parts_d+0x58>
    a59c:	11bfdd1e 	bne	r2,r6,a514 <__fpcmp_parts_d+0x2c>
    a5a0:	28c00117 	ldw	r3,4(r5)
    a5a4:	20800117 	ldw	r2,4(r4)
    a5a8:	1885c83a 	sub	r2,r3,r2
    a5ac:	f800283a 	ret

0000a5b0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    a5b0:	defff404 	addi	sp,sp,-48
    a5b4:	df000b15 	stw	fp,44(sp)
    a5b8:	df000b04 	addi	fp,sp,44
    a5bc:	e13ffb15 	stw	r4,-20(fp)
    a5c0:	e17ffc15 	stw	r5,-16(fp)
    a5c4:	e1bffd15 	stw	r6,-12(fp)
    a5c8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    a5cc:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    a5d0:	00800074 	movhi	r2,1
    a5d4:	1083b104 	addi	r2,r2,3780
    a5d8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    a5dc:	1005003a 	cmpeq	r2,r2,zero
    a5e0:	1000411e 	bne	r2,zero,a6e8 <alt_alarm_start+0x138>
  {
    if (alarm)
    a5e4:	e0bffb17 	ldw	r2,-20(fp)
    a5e8:	1005003a 	cmpeq	r2,r2,zero
    a5ec:	10003b1e 	bne	r2,zero,a6dc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    a5f0:	e0fffb17 	ldw	r3,-20(fp)
    a5f4:	e0bffd17 	ldw	r2,-12(fp)
    a5f8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    a5fc:	e0fffb17 	ldw	r3,-20(fp)
    a600:	e0bffe17 	ldw	r2,-8(fp)
    a604:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a608:	0005303a 	rdctl	r2,status
    a60c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a610:	e0fff817 	ldw	r3,-32(fp)
    a614:	00bfff84 	movi	r2,-2
    a618:	1884703a 	and	r2,r3,r2
    a61c:	1001703a 	wrctl	status,r2
  
  return context;
    a620:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    a624:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    a628:	00800074 	movhi	r2,1
    a62c:	1083b204 	addi	r2,r2,3784
    a630:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    a634:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    a638:	e0fffc17 	ldw	r3,-16(fp)
    a63c:	e0bff917 	ldw	r2,-28(fp)
    a640:	1885883a 	add	r2,r3,r2
    a644:	10c00044 	addi	r3,r2,1
    a648:	e0bffb17 	ldw	r2,-20(fp)
    a64c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    a650:	e0bffb17 	ldw	r2,-20(fp)
    a654:	10c00217 	ldw	r3,8(r2)
    a658:	e0bff917 	ldw	r2,-28(fp)
    a65c:	1880042e 	bgeu	r3,r2,a670 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    a660:	e0fffb17 	ldw	r3,-20(fp)
    a664:	00800044 	movi	r2,1
    a668:	18800405 	stb	r2,16(r3)
    a66c:	00000206 	br	a678 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    a670:	e0bffb17 	ldw	r2,-20(fp)
    a674:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    a678:	e0fffb17 	ldw	r3,-20(fp)
    a67c:	00800074 	movhi	r2,1
    a680:	10bd0904 	addi	r2,r2,-3036
    a684:	e0bff615 	stw	r2,-40(fp)
    a688:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    a68c:	e0fff717 	ldw	r3,-36(fp)
    a690:	e0bff617 	ldw	r2,-40(fp)
    a694:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    a698:	e0bff617 	ldw	r2,-40(fp)
    a69c:	10c00017 	ldw	r3,0(r2)
    a6a0:	e0bff717 	ldw	r2,-36(fp)
    a6a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    a6a8:	e0bff617 	ldw	r2,-40(fp)
    a6ac:	10c00017 	ldw	r3,0(r2)
    a6b0:	e0bff717 	ldw	r2,-36(fp)
    a6b4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    a6b8:	e0fff617 	ldw	r3,-40(fp)
    a6bc:	e0bff717 	ldw	r2,-36(fp)
    a6c0:	18800015 	stw	r2,0(r3)
    a6c4:	e0bffa17 	ldw	r2,-24(fp)
    a6c8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a6cc:	e0bff517 	ldw	r2,-44(fp)
    a6d0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    a6d4:	e03fff15 	stw	zero,-4(fp)
    a6d8:	00000506 	br	a6f0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    a6dc:	00bffa84 	movi	r2,-22
    a6e0:	e0bfff15 	stw	r2,-4(fp)
    a6e4:	00000206 	br	a6f0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    a6e8:	00bfde84 	movi	r2,-134
    a6ec:	e0bfff15 	stw	r2,-4(fp)
    a6f0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    a6f4:	e037883a 	mov	sp,fp
    a6f8:	df000017 	ldw	fp,0(sp)
    a6fc:	dec00104 	addi	sp,sp,4
    a700:	f800283a 	ret

0000a704 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    a704:	defff804 	addi	sp,sp,-32
    a708:	dfc00715 	stw	ra,28(sp)
    a70c:	df000615 	stw	fp,24(sp)
    a710:	df000604 	addi	fp,sp,24
    a714:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    a718:	e0bffc17 	ldw	r2,-16(fp)
    a71c:	1004803a 	cmplt	r2,r2,zero
    a720:	1000091e 	bne	r2,zero,a748 <close+0x44>
    a724:	e13ffc17 	ldw	r4,-16(fp)
    a728:	01400304 	movi	r5,12
    a72c:	0000c680 	call	c68 <__mulsi3>
    a730:	1007883a 	mov	r3,r2
    a734:	00800074 	movhi	r2,1
    a738:	10b88304 	addi	r2,r2,-7668
    a73c:	1887883a 	add	r3,r3,r2
    a740:	e0ffff15 	stw	r3,-4(fp)
    a744:	00000106 	br	a74c <close+0x48>
    a748:	e03fff15 	stw	zero,-4(fp)
    a74c:	e0bfff17 	ldw	r2,-4(fp)
    a750:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    a754:	e0bffb17 	ldw	r2,-20(fp)
    a758:	1005003a 	cmpeq	r2,r2,zero
    a75c:	10001d1e 	bne	r2,zero,a7d4 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    a760:	e0bffb17 	ldw	r2,-20(fp)
    a764:	10800017 	ldw	r2,0(r2)
    a768:	10800417 	ldw	r2,16(r2)
    a76c:	1005003a 	cmpeq	r2,r2,zero
    a770:	1000071e 	bne	r2,zero,a790 <close+0x8c>
    a774:	e0bffb17 	ldw	r2,-20(fp)
    a778:	10800017 	ldw	r2,0(r2)
    a77c:	10800417 	ldw	r2,16(r2)
    a780:	e13ffb17 	ldw	r4,-20(fp)
    a784:	103ee83a 	callr	r2
    a788:	e0bffe15 	stw	r2,-8(fp)
    a78c:	00000106 	br	a794 <close+0x90>
    a790:	e03ffe15 	stw	zero,-8(fp)
    a794:	e0bffe17 	ldw	r2,-8(fp)
    a798:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    a79c:	e13ffc17 	ldw	r4,-16(fp)
    a7a0:	000b1f40 	call	b1f4 <alt_release_fd>
    if (rval < 0)
    a7a4:	e0bffa17 	ldw	r2,-24(fp)
    a7a8:	1004403a 	cmpge	r2,r2,zero
    a7ac:	1000071e 	bne	r2,zero,a7cc <close+0xc8>
    {
      ALT_ERRNO = -rval;
    a7b0:	000a8040 	call	a804 <alt_get_errno>
    a7b4:	e0fffa17 	ldw	r3,-24(fp)
    a7b8:	00c7c83a 	sub	r3,zero,r3
    a7bc:	10c00015 	stw	r3,0(r2)
      return -1;
    a7c0:	00bfffc4 	movi	r2,-1
    a7c4:	e0bffd15 	stw	r2,-12(fp)
    a7c8:	00000806 	br	a7ec <close+0xe8>
    }
    return 0;
    a7cc:	e03ffd15 	stw	zero,-12(fp)
    a7d0:	00000606 	br	a7ec <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a7d4:	000a8040 	call	a804 <alt_get_errno>
    a7d8:	1007883a 	mov	r3,r2
    a7dc:	00801444 	movi	r2,81
    a7e0:	18800015 	stw	r2,0(r3)
    return -1;
    a7e4:	00bfffc4 	movi	r2,-1
    a7e8:	e0bffd15 	stw	r2,-12(fp)
    a7ec:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    a7f0:	e037883a 	mov	sp,fp
    a7f4:	dfc00117 	ldw	ra,4(sp)
    a7f8:	df000017 	ldw	fp,0(sp)
    a7fc:	dec00204 	addi	sp,sp,8
    a800:	f800283a 	ret

0000a804 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a804:	defffd04 	addi	sp,sp,-12
    a808:	dfc00215 	stw	ra,8(sp)
    a80c:	df000115 	stw	fp,4(sp)
    a810:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a814:	00800074 	movhi	r2,1
    a818:	10bd0704 	addi	r2,r2,-3044
    a81c:	10800017 	ldw	r2,0(r2)
    a820:	1005003a 	cmpeq	r2,r2,zero
    a824:	1000061e 	bne	r2,zero,a840 <alt_get_errno+0x3c>
    a828:	00800074 	movhi	r2,1
    a82c:	10bd0704 	addi	r2,r2,-3044
    a830:	10800017 	ldw	r2,0(r2)
    a834:	103ee83a 	callr	r2
    a838:	e0bfff15 	stw	r2,-4(fp)
    a83c:	00000306 	br	a84c <alt_get_errno+0x48>
    a840:	00800074 	movhi	r2,1
    a844:	1083aa04 	addi	r2,r2,3752
    a848:	e0bfff15 	stw	r2,-4(fp)
    a84c:	e0bfff17 	ldw	r2,-4(fp)
}
    a850:	e037883a 	mov	sp,fp
    a854:	dfc00117 	ldw	ra,4(sp)
    a858:	df000017 	ldw	fp,0(sp)
    a85c:	dec00204 	addi	sp,sp,8
    a860:	f800283a 	ret

0000a864 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    a864:	defffc04 	addi	sp,sp,-16
    a868:	df000315 	stw	fp,12(sp)
    a86c:	df000304 	addi	fp,sp,12
    a870:	e13ffd15 	stw	r4,-12(fp)
    a874:	e17ffe15 	stw	r5,-8(fp)
    a878:	e1bfff15 	stw	r6,-4(fp)
  return len;
    a87c:	e0bfff17 	ldw	r2,-4(fp)
}
    a880:	e037883a 	mov	sp,fp
    a884:	df000017 	ldw	fp,0(sp)
    a888:	dec00104 	addi	sp,sp,4
    a88c:	f800283a 	ret

0000a890 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    a890:	defff904 	addi	sp,sp,-28
    a894:	dfc00615 	stw	ra,24(sp)
    a898:	df000515 	stw	fp,20(sp)
    a89c:	df000504 	addi	fp,sp,20
    a8a0:	e13ffc15 	stw	r4,-16(fp)
    a8a4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a8a8:	e0bffc17 	ldw	r2,-16(fp)
    a8ac:	1004803a 	cmplt	r2,r2,zero
    a8b0:	1000091e 	bne	r2,zero,a8d8 <fstat+0x48>
    a8b4:	e13ffc17 	ldw	r4,-16(fp)
    a8b8:	01400304 	movi	r5,12
    a8bc:	0000c680 	call	c68 <__mulsi3>
    a8c0:	1007883a 	mov	r3,r2
    a8c4:	00800074 	movhi	r2,1
    a8c8:	10b88304 	addi	r2,r2,-7668
    a8cc:	1887883a 	add	r3,r3,r2
    a8d0:	e0ffff15 	stw	r3,-4(fp)
    a8d4:	00000106 	br	a8dc <fstat+0x4c>
    a8d8:	e03fff15 	stw	zero,-4(fp)
    a8dc:	e0bfff17 	ldw	r2,-4(fp)
    a8e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    a8e4:	e0bffb17 	ldw	r2,-20(fp)
    a8e8:	1005003a 	cmpeq	r2,r2,zero
    a8ec:	1000121e 	bne	r2,zero,a938 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    a8f0:	e0bffb17 	ldw	r2,-20(fp)
    a8f4:	10800017 	ldw	r2,0(r2)
    a8f8:	10800817 	ldw	r2,32(r2)
    a8fc:	1005003a 	cmpeq	r2,r2,zero
    a900:	1000081e 	bne	r2,zero,a924 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    a904:	e0bffb17 	ldw	r2,-20(fp)
    a908:	10800017 	ldw	r2,0(r2)
    a90c:	10800817 	ldw	r2,32(r2)
    a910:	e13ffb17 	ldw	r4,-20(fp)
    a914:	e17ffd17 	ldw	r5,-12(fp)
    a918:	103ee83a 	callr	r2
    a91c:	e0bffe15 	stw	r2,-8(fp)
    a920:	00000b06 	br	a950 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    a924:	e0fffd17 	ldw	r3,-12(fp)
    a928:	00880004 	movi	r2,8192
    a92c:	18800115 	stw	r2,4(r3)
      return 0;
    a930:	e03ffe15 	stw	zero,-8(fp)
    a934:	00000606 	br	a950 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a938:	000a9680 	call	a968 <alt_get_errno>
    a93c:	1007883a 	mov	r3,r2
    a940:	00801444 	movi	r2,81
    a944:	18800015 	stw	r2,0(r3)
    return -1;
    a948:	00bfffc4 	movi	r2,-1
    a94c:	e0bffe15 	stw	r2,-8(fp)
    a950:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    a954:	e037883a 	mov	sp,fp
    a958:	dfc00117 	ldw	ra,4(sp)
    a95c:	df000017 	ldw	fp,0(sp)
    a960:	dec00204 	addi	sp,sp,8
    a964:	f800283a 	ret

0000a968 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a968:	defffd04 	addi	sp,sp,-12
    a96c:	dfc00215 	stw	ra,8(sp)
    a970:	df000115 	stw	fp,4(sp)
    a974:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a978:	00800074 	movhi	r2,1
    a97c:	10bd0704 	addi	r2,r2,-3044
    a980:	10800017 	ldw	r2,0(r2)
    a984:	1005003a 	cmpeq	r2,r2,zero
    a988:	1000061e 	bne	r2,zero,a9a4 <alt_get_errno+0x3c>
    a98c:	00800074 	movhi	r2,1
    a990:	10bd0704 	addi	r2,r2,-3044
    a994:	10800017 	ldw	r2,0(r2)
    a998:	103ee83a 	callr	r2
    a99c:	e0bfff15 	stw	r2,-4(fp)
    a9a0:	00000306 	br	a9b0 <alt_get_errno+0x48>
    a9a4:	00800074 	movhi	r2,1
    a9a8:	1083aa04 	addi	r2,r2,3752
    a9ac:	e0bfff15 	stw	r2,-4(fp)
    a9b0:	e0bfff17 	ldw	r2,-4(fp)
}
    a9b4:	e037883a 	mov	sp,fp
    a9b8:	dfc00117 	ldw	ra,4(sp)
    a9bc:	df000017 	ldw	fp,0(sp)
    a9c0:	dec00204 	addi	sp,sp,8
    a9c4:	f800283a 	ret

0000a9c8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    a9c8:	deffeb04 	addi	sp,sp,-84
    a9cc:	dfc01415 	stw	ra,80(sp)
    a9d0:	df001315 	stw	fp,76(sp)
    a9d4:	df001304 	addi	fp,sp,76
    a9d8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a9dc:	e0bffd17 	ldw	r2,-12(fp)
    a9e0:	1004803a 	cmplt	r2,r2,zero
    a9e4:	1000091e 	bne	r2,zero,aa0c <isatty+0x44>
    a9e8:	e13ffd17 	ldw	r4,-12(fp)
    a9ec:	01400304 	movi	r5,12
    a9f0:	0000c680 	call	c68 <__mulsi3>
    a9f4:	1007883a 	mov	r3,r2
    a9f8:	00800074 	movhi	r2,1
    a9fc:	10b88304 	addi	r2,r2,-7668
    aa00:	1887883a 	add	r3,r3,r2
    aa04:	e0ffff15 	stw	r3,-4(fp)
    aa08:	00000106 	br	aa10 <isatty+0x48>
    aa0c:	e03fff15 	stw	zero,-4(fp)
    aa10:	e0bfff17 	ldw	r2,-4(fp)
    aa14:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    aa18:	e0bfed17 	ldw	r2,-76(fp)
    aa1c:	1005003a 	cmpeq	r2,r2,zero
    aa20:	10000f1e 	bne	r2,zero,aa60 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    aa24:	e0bfed17 	ldw	r2,-76(fp)
    aa28:	10800017 	ldw	r2,0(r2)
    aa2c:	10800817 	ldw	r2,32(r2)
    aa30:	1004c03a 	cmpne	r2,r2,zero
    aa34:	1000031e 	bne	r2,zero,aa44 <isatty+0x7c>
    {
      return 1;
    aa38:	00800044 	movi	r2,1
    aa3c:	e0bffe15 	stw	r2,-8(fp)
    aa40:	00000c06 	br	aa74 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    aa44:	e17fee04 	addi	r5,fp,-72
    aa48:	e13ffd17 	ldw	r4,-12(fp)
    aa4c:	000a8900 	call	a890 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    aa50:	e0bfef17 	ldw	r2,-68(fp)
    aa54:	10880020 	cmpeqi	r2,r2,8192
    aa58:	e0bffe15 	stw	r2,-8(fp)
    aa5c:	00000506 	br	aa74 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    aa60:	000aa8c0 	call	aa8c <alt_get_errno>
    aa64:	1007883a 	mov	r3,r2
    aa68:	00801444 	movi	r2,81
    aa6c:	18800015 	stw	r2,0(r3)
    return 0;
    aa70:	e03ffe15 	stw	zero,-8(fp)
    aa74:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    aa78:	e037883a 	mov	sp,fp
    aa7c:	dfc00117 	ldw	ra,4(sp)
    aa80:	df000017 	ldw	fp,0(sp)
    aa84:	dec00204 	addi	sp,sp,8
    aa88:	f800283a 	ret

0000aa8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aa8c:	defffd04 	addi	sp,sp,-12
    aa90:	dfc00215 	stw	ra,8(sp)
    aa94:	df000115 	stw	fp,4(sp)
    aa98:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    aa9c:	00800074 	movhi	r2,1
    aaa0:	10bd0704 	addi	r2,r2,-3044
    aaa4:	10800017 	ldw	r2,0(r2)
    aaa8:	1005003a 	cmpeq	r2,r2,zero
    aaac:	1000061e 	bne	r2,zero,aac8 <alt_get_errno+0x3c>
    aab0:	00800074 	movhi	r2,1
    aab4:	10bd0704 	addi	r2,r2,-3044
    aab8:	10800017 	ldw	r2,0(r2)
    aabc:	103ee83a 	callr	r2
    aac0:	e0bfff15 	stw	r2,-4(fp)
    aac4:	00000306 	br	aad4 <alt_get_errno+0x48>
    aac8:	00800074 	movhi	r2,1
    aacc:	1083aa04 	addi	r2,r2,3752
    aad0:	e0bfff15 	stw	r2,-4(fp)
    aad4:	e0bfff17 	ldw	r2,-4(fp)
}
    aad8:	e037883a 	mov	sp,fp
    aadc:	dfc00117 	ldw	ra,4(sp)
    aae0:	df000017 	ldw	fp,0(sp)
    aae4:	dec00204 	addi	sp,sp,8
    aae8:	f800283a 	ret

0000aaec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    aaec:	defffe04 	addi	sp,sp,-8
    aaf0:	dfc00115 	stw	ra,4(sp)
    aaf4:	df000015 	stw	fp,0(sp)
    aaf8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    aafc:	01000074 	movhi	r4,1
    ab00:	213d0c04 	addi	r4,r4,-3024
    ab04:	01400074 	movhi	r5,1
    ab08:	29767404 	addi	r5,r5,-9776
    ab0c:	01800074 	movhi	r6,1
    ab10:	31bd0c04 	addi	r6,r6,-3024
    ab14:	000ab6c0 	call	ab6c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    ab18:	01000034 	movhi	r4,0
    ab1c:	21000804 	addi	r4,r4,32
    ab20:	01400034 	movhi	r5,0
    ab24:	29400804 	addi	r5,r5,32
    ab28:	01800034 	movhi	r6,0
    ab2c:	31807404 	addi	r6,r6,464
    ab30:	000ab6c0 	call	ab6c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    ab34:	01000074 	movhi	r4,1
    ab38:	21357004 	addi	r4,r4,-10816
    ab3c:	01400074 	movhi	r5,1
    ab40:	29757004 	addi	r5,r5,-10816
    ab44:	01800074 	movhi	r6,1
    ab48:	31b67404 	addi	r6,r6,-9776
    ab4c:	000ab6c0 	call	ab6c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    ab50:	000c2c40 	call	c2c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    ab54:	000c4bc0 	call	c4bc <alt_icache_flush_all>
}
    ab58:	e037883a 	mov	sp,fp
    ab5c:	dfc00117 	ldw	ra,4(sp)
    ab60:	df000017 	ldw	fp,0(sp)
    ab64:	dec00204 	addi	sp,sp,8
    ab68:	f800283a 	ret

0000ab6c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    ab6c:	defffc04 	addi	sp,sp,-16
    ab70:	df000315 	stw	fp,12(sp)
    ab74:	df000304 	addi	fp,sp,12
    ab78:	e13ffd15 	stw	r4,-12(fp)
    ab7c:	e17ffe15 	stw	r5,-8(fp)
    ab80:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ab84:	e0fffe17 	ldw	r3,-8(fp)
    ab88:	e0bffd17 	ldw	r2,-12(fp)
    ab8c:	18800e26 	beq	r3,r2,abc8 <alt_load_section+0x5c>
  {
    while( to != end )
    ab90:	00000a06 	br	abbc <alt_load_section+0x50>
    {
      *to++ = *from++;
    ab94:	e0bffd17 	ldw	r2,-12(fp)
    ab98:	10c00017 	ldw	r3,0(r2)
    ab9c:	e0bffe17 	ldw	r2,-8(fp)
    aba0:	10c00015 	stw	r3,0(r2)
    aba4:	e0bffe17 	ldw	r2,-8(fp)
    aba8:	10800104 	addi	r2,r2,4
    abac:	e0bffe15 	stw	r2,-8(fp)
    abb0:	e0bffd17 	ldw	r2,-12(fp)
    abb4:	10800104 	addi	r2,r2,4
    abb8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    abbc:	e0fffe17 	ldw	r3,-8(fp)
    abc0:	e0bfff17 	ldw	r2,-4(fp)
    abc4:	18bff31e 	bne	r3,r2,ab94 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    abc8:	e037883a 	mov	sp,fp
    abcc:	df000017 	ldw	fp,0(sp)
    abd0:	dec00104 	addi	sp,sp,4
    abd4:	f800283a 	ret

0000abd8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    abd8:	defff804 	addi	sp,sp,-32
    abdc:	dfc00715 	stw	ra,28(sp)
    abe0:	df000615 	stw	fp,24(sp)
    abe4:	df000604 	addi	fp,sp,24
    abe8:	e13ffc15 	stw	r4,-16(fp)
    abec:	e17ffd15 	stw	r5,-12(fp)
    abf0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    abf4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    abf8:	e0bffc17 	ldw	r2,-16(fp)
    abfc:	1004803a 	cmplt	r2,r2,zero
    ac00:	1000091e 	bne	r2,zero,ac28 <lseek+0x50>
    ac04:	e13ffc17 	ldw	r4,-16(fp)
    ac08:	01400304 	movi	r5,12
    ac0c:	0000c680 	call	c68 <__mulsi3>
    ac10:	1007883a 	mov	r3,r2
    ac14:	00800074 	movhi	r2,1
    ac18:	10b88304 	addi	r2,r2,-7668
    ac1c:	1887883a 	add	r3,r3,r2
    ac20:	e0ffff15 	stw	r3,-4(fp)
    ac24:	00000106 	br	ac2c <lseek+0x54>
    ac28:	e03fff15 	stw	zero,-4(fp)
    ac2c:	e0bfff17 	ldw	r2,-4(fp)
    ac30:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    ac34:	e0bffb17 	ldw	r2,-20(fp)
    ac38:	1005003a 	cmpeq	r2,r2,zero
    ac3c:	1000111e 	bne	r2,zero,ac84 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    ac40:	e0bffb17 	ldw	r2,-20(fp)
    ac44:	10800017 	ldw	r2,0(r2)
    ac48:	10800717 	ldw	r2,28(r2)
    ac4c:	1005003a 	cmpeq	r2,r2,zero
    ac50:	1000091e 	bne	r2,zero,ac78 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    ac54:	e0bffb17 	ldw	r2,-20(fp)
    ac58:	10800017 	ldw	r2,0(r2)
    ac5c:	10800717 	ldw	r2,28(r2)
    ac60:	e13ffb17 	ldw	r4,-20(fp)
    ac64:	e17ffd17 	ldw	r5,-12(fp)
    ac68:	e1bffe17 	ldw	r6,-8(fp)
    ac6c:	103ee83a 	callr	r2
    ac70:	e0bffa15 	stw	r2,-24(fp)
    ac74:	00000506 	br	ac8c <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    ac78:	00bfde84 	movi	r2,-134
    ac7c:	e0bffa15 	stw	r2,-24(fp)
    ac80:	00000206 	br	ac8c <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    ac84:	00bfebc4 	movi	r2,-81
    ac88:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    ac8c:	e0bffa17 	ldw	r2,-24(fp)
    ac90:	1004403a 	cmpge	r2,r2,zero
    ac94:	1000071e 	bne	r2,zero,acb4 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    ac98:	000accc0 	call	accc <alt_get_errno>
    ac9c:	1007883a 	mov	r3,r2
    aca0:	e0bffa17 	ldw	r2,-24(fp)
    aca4:	0085c83a 	sub	r2,zero,r2
    aca8:	18800015 	stw	r2,0(r3)
    rc = -1;
    acac:	00bfffc4 	movi	r2,-1
    acb0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    acb4:	e0bffa17 	ldw	r2,-24(fp)
}
    acb8:	e037883a 	mov	sp,fp
    acbc:	dfc00117 	ldw	ra,4(sp)
    acc0:	df000017 	ldw	fp,0(sp)
    acc4:	dec00204 	addi	sp,sp,8
    acc8:	f800283a 	ret

0000accc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    accc:	defffd04 	addi	sp,sp,-12
    acd0:	dfc00215 	stw	ra,8(sp)
    acd4:	df000115 	stw	fp,4(sp)
    acd8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    acdc:	00800074 	movhi	r2,1
    ace0:	10bd0704 	addi	r2,r2,-3044
    ace4:	10800017 	ldw	r2,0(r2)
    ace8:	1005003a 	cmpeq	r2,r2,zero
    acec:	1000061e 	bne	r2,zero,ad08 <alt_get_errno+0x3c>
    acf0:	00800074 	movhi	r2,1
    acf4:	10bd0704 	addi	r2,r2,-3044
    acf8:	10800017 	ldw	r2,0(r2)
    acfc:	103ee83a 	callr	r2
    ad00:	e0bfff15 	stw	r2,-4(fp)
    ad04:	00000306 	br	ad14 <alt_get_errno+0x48>
    ad08:	00800074 	movhi	r2,1
    ad0c:	1083aa04 	addi	r2,r2,3752
    ad10:	e0bfff15 	stw	r2,-4(fp)
    ad14:	e0bfff17 	ldw	r2,-4(fp)
}
    ad18:	e037883a 	mov	sp,fp
    ad1c:	dfc00117 	ldw	ra,4(sp)
    ad20:	df000017 	ldw	fp,0(sp)
    ad24:	dec00204 	addi	sp,sp,8
    ad28:	f800283a 	ret

0000ad2c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ad2c:	defffd04 	addi	sp,sp,-12
    ad30:	dfc00215 	stw	ra,8(sp)
    ad34:	df000115 	stw	fp,4(sp)
    ad38:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ad3c:	0009883a 	mov	r4,zero
    ad40:	000b6500 	call	b650 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ad44:	000b6840 	call	b684 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ad48:	01000074 	movhi	r4,1
    ad4c:	21366c04 	addi	r4,r4,-9808
    ad50:	01400074 	movhi	r5,1
    ad54:	29766c04 	addi	r5,r5,-9808
    ad58:	01800074 	movhi	r6,1
    ad5c:	31b66c04 	addi	r6,r6,-9808
    ad60:	000c87c0 	call	c87c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ad64:	000c3f40 	call	c3f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ad68:	01000074 	movhi	r4,1
    ad6c:	21311604 	addi	r4,r4,-15272
    ad70:	000ce7c0 	call	ce7c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ad74:	d126b317 	ldw	r4,-25908(gp)
    ad78:	d166b417 	ldw	r5,-25904(gp)
    ad7c:	d1a6b517 	ldw	r6,-25900(gp)
    ad80:	00003100 	call	310 <main>
    ad84:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    ad88:	01000044 	movi	r4,1
    ad8c:	000a7040 	call	a704 <close>
  exit (result);
    ad90:	e13fff17 	ldw	r4,-4(fp)
    ad94:	000ce900 	call	ce90 <exit>

0000ad98 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    ad98:	defffe04 	addi	sp,sp,-8
    ad9c:	df000115 	stw	fp,4(sp)
    ada0:	df000104 	addi	fp,sp,4
    ada4:	e13fff15 	stw	r4,-4(fp)
}
    ada8:	e037883a 	mov	sp,fp
    adac:	df000017 	ldw	fp,0(sp)
    adb0:	dec00104 	addi	sp,sp,4
    adb4:	f800283a 	ret

0000adb8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    adb8:	defffe04 	addi	sp,sp,-8
    adbc:	df000115 	stw	fp,4(sp)
    adc0:	df000104 	addi	fp,sp,4
    adc4:	e13fff15 	stw	r4,-4(fp)
}
    adc8:	e037883a 	mov	sp,fp
    adcc:	df000017 	ldw	fp,0(sp)
    add0:	dec00104 	addi	sp,sp,4
    add4:	f800283a 	ret

0000add8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    add8:	defff204 	addi	sp,sp,-56
    addc:	dfc00a15 	stw	ra,40(sp)
    ade0:	df000915 	stw	fp,36(sp)
    ade4:	df000904 	addi	fp,sp,36
    ade8:	e1400215 	stw	r5,8(fp)
    adec:	e1800315 	stw	r6,12(fp)
    adf0:	e1c00415 	stw	r7,16(fp)
    adf4:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    adf8:	e0800204 	addi	r2,fp,8
    adfc:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    ae00:	e0bfff17 	ldw	r2,-4(fp)
    ae04:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    ae08:	00007806 	br	afec <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    ae0c:	e0bffc07 	ldb	r2,-16(fp)
    ae10:	10800960 	cmpeqi	r2,r2,37
    ae14:	1000031e 	bne	r2,zero,ae24 <alt_printf+0x4c>
        {
            alt_putchar(c);
    ae18:	e13ffc07 	ldb	r4,-16(fp)
    ae1c:	000b0300 	call	b030 <alt_putchar>
    ae20:	00007206 	br	afec <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    ae24:	e0bffd17 	ldw	r2,-12(fp)
    ae28:	10800003 	ldbu	r2,0(r2)
    ae2c:	e0bffc05 	stb	r2,-16(fp)
    ae30:	e0bffc07 	ldb	r2,-16(fp)
    ae34:	1004c03a 	cmpne	r2,r2,zero
    ae38:	1007883a 	mov	r3,r2
    ae3c:	e0bffd17 	ldw	r2,-12(fp)
    ae40:	10800044 	addi	r2,r2,1
    ae44:	e0bffd15 	stw	r2,-12(fp)
    ae48:	18803fcc 	andi	r2,r3,255
    ae4c:	1005003a 	cmpeq	r2,r2,zero
    ae50:	1000721e 	bne	r2,zero,b01c <alt_printf+0x244>
            {
                if (c == '%')
    ae54:	e0bffc07 	ldb	r2,-16(fp)
    ae58:	10800958 	cmpnei	r2,r2,37
    ae5c:	1000031e 	bne	r2,zero,ae6c <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    ae60:	e13ffc07 	ldb	r4,-16(fp)
    ae64:	000b0300 	call	b030 <alt_putchar>
    ae68:	00006006 	br	afec <alt_printf+0x214>
                } 
                else if (c == 'c')
    ae6c:	e0bffc07 	ldb	r2,-16(fp)
    ae70:	108018d8 	cmpnei	r2,r2,99
    ae74:	1000091e 	bne	r2,zero,ae9c <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    ae78:	e0fffe17 	ldw	r3,-8(fp)
    ae7c:	18800104 	addi	r2,r3,4
    ae80:	e0bffe15 	stw	r2,-8(fp)
    ae84:	1805883a 	mov	r2,r3
    ae88:	10800017 	ldw	r2,0(r2)
    ae8c:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    ae90:	e13ffb17 	ldw	r4,-20(fp)
    ae94:	000b0300 	call	b030 <alt_putchar>
    ae98:	00005406 	br	afec <alt_printf+0x214>
                }
                else if (c == 'x')
    ae9c:	e0bffc07 	ldb	r2,-16(fp)
    aea0:	10801e18 	cmpnei	r2,r2,120
    aea4:	1000371e 	bne	r2,zero,af84 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    aea8:	e0fffe17 	ldw	r3,-8(fp)
    aeac:	18800104 	addi	r2,r3,4
    aeb0:	e0bffe15 	stw	r2,-8(fp)
    aeb4:	1805883a 	mov	r2,r3
    aeb8:	10800017 	ldw	r2,0(r2)
    aebc:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    aec0:	e0bffa17 	ldw	r2,-24(fp)
    aec4:	1004c03a 	cmpne	r2,r2,zero
    aec8:	1000031e 	bne	r2,zero,aed8 <alt_printf+0x100>
                    {
                        alt_putchar('0');
    aecc:	01000c04 	movi	r4,48
    aed0:	000b0300 	call	b030 <alt_putchar>
                        continue;
    aed4:	00004506 	br	afec <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    aed8:	00800704 	movi	r2,28
    aedc:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    aee0:	00000306 	br	aef0 <alt_printf+0x118>
                        digit_shift -= 4;
    aee4:	e0bff817 	ldw	r2,-32(fp)
    aee8:	10bfff04 	addi	r2,r2,-4
    aeec:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    aef0:	00c003c4 	movi	r3,15
    aef4:	e0bff817 	ldw	r2,-32(fp)
    aef8:	1884983a 	sll	r2,r3,r2
    aefc:	1007883a 	mov	r3,r2
    af00:	e0bffa17 	ldw	r2,-24(fp)
    af04:	1884703a 	and	r2,r3,r2
    af08:	1005003a 	cmpeq	r2,r2,zero
    af0c:	103ff51e 	bne	r2,zero,aee4 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    af10:	00001806 	br	af74 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    af14:	00c003c4 	movi	r3,15
    af18:	e0bff817 	ldw	r2,-32(fp)
    af1c:	1884983a 	sll	r2,r3,r2
    af20:	1007883a 	mov	r3,r2
    af24:	e0bffa17 	ldw	r2,-24(fp)
    af28:	1886703a 	and	r3,r3,r2
    af2c:	e0bff817 	ldw	r2,-32(fp)
    af30:	1884d83a 	srl	r2,r3,r2
    af34:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    af38:	e0bff917 	ldw	r2,-28(fp)
    af3c:	108002a8 	cmpgeui	r2,r2,10
    af40:	1000041e 	bne	r2,zero,af54 <alt_printf+0x17c>
                            c = '0' + digit;
    af44:	e0bff917 	ldw	r2,-28(fp)
    af48:	10800c04 	addi	r2,r2,48
    af4c:	e0bffc05 	stb	r2,-16(fp)
    af50:	00000306 	br	af60 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    af54:	e0bff917 	ldw	r2,-28(fp)
    af58:	108015c4 	addi	r2,r2,87
    af5c:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    af60:	e13ffc07 	ldb	r4,-16(fp)
    af64:	000b0300 	call	b030 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    af68:	e0bff817 	ldw	r2,-32(fp)
    af6c:	10bfff04 	addi	r2,r2,-4
    af70:	e0bff815 	stw	r2,-32(fp)
    af74:	e0bff817 	ldw	r2,-32(fp)
    af78:	1004403a 	cmpge	r2,r2,zero
    af7c:	103fe51e 	bne	r2,zero,af14 <alt_printf+0x13c>
    af80:	00001a06 	br	afec <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    af84:	e0bffc07 	ldb	r2,-16(fp)
    af88:	10801cd8 	cmpnei	r2,r2,115
    af8c:	1000171e 	bne	r2,zero,afec <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    af90:	e0fffe17 	ldw	r3,-8(fp)
    af94:	18800104 	addi	r2,r3,4
    af98:	e0bffe15 	stw	r2,-8(fp)
    af9c:	1805883a 	mov	r2,r3
    afa0:	10800017 	ldw	r2,0(r2)
    afa4:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    afa8:	00000906 	br	afd0 <alt_printf+0x1f8>
                      alt_putchar(*s++);
    afac:	e0bff717 	ldw	r2,-36(fp)
    afb0:	10800003 	ldbu	r2,0(r2)
    afb4:	11003fcc 	andi	r4,r2,255
    afb8:	2100201c 	xori	r4,r4,128
    afbc:	213fe004 	addi	r4,r4,-128
    afc0:	e0bff717 	ldw	r2,-36(fp)
    afc4:	10800044 	addi	r2,r2,1
    afc8:	e0bff715 	stw	r2,-36(fp)
    afcc:	000b0300 	call	b030 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    afd0:	e0bff717 	ldw	r2,-36(fp)
    afd4:	10800003 	ldbu	r2,0(r2)
    afd8:	10803fcc 	andi	r2,r2,255
    afdc:	1080201c 	xori	r2,r2,128
    afe0:	10bfe004 	addi	r2,r2,-128
    afe4:	1004c03a 	cmpne	r2,r2,zero
    afe8:	103ff01e 	bne	r2,zero,afac <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    afec:	e0bffd17 	ldw	r2,-12(fp)
    aff0:	10800003 	ldbu	r2,0(r2)
    aff4:	e0bffc05 	stb	r2,-16(fp)
    aff8:	e0bffc07 	ldb	r2,-16(fp)
    affc:	1004c03a 	cmpne	r2,r2,zero
    b000:	1007883a 	mov	r3,r2
    b004:	e0bffd17 	ldw	r2,-12(fp)
    b008:	10800044 	addi	r2,r2,1
    b00c:	e0bffd15 	stw	r2,-12(fp)
    b010:	18803fcc 	andi	r2,r3,255
    b014:	1004c03a 	cmpne	r2,r2,zero
    b018:	103f7c1e 	bne	r2,zero,ae0c <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    b01c:	e037883a 	mov	sp,fp
    b020:	dfc00117 	ldw	ra,4(sp)
    b024:	df000017 	ldw	fp,0(sp)
    b028:	dec00504 	addi	sp,sp,20
    b02c:	f800283a 	ret

0000b030 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    b030:	defffd04 	addi	sp,sp,-12
    b034:	dfc00215 	stw	ra,8(sp)
    b038:	df000115 	stw	fp,4(sp)
    b03c:	df000104 	addi	fp,sp,4
    b040:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    b044:	00800074 	movhi	r2,1
    b048:	10bcfe04 	addi	r2,r2,-3080
    b04c:	10800017 	ldw	r2,0(r2)
    b050:	11400217 	ldw	r5,8(r2)
    b054:	e13fff17 	ldw	r4,-4(fp)
    b058:	000cf3c0 	call	cf3c <putc>
#endif
}
    b05c:	e037883a 	mov	sp,fp
    b060:	dfc00117 	ldw	ra,4(sp)
    b064:	df000017 	ldw	fp,0(sp)
    b068:	dec00204 	addi	sp,sp,8
    b06c:	f800283a 	ret

0000b070 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b070:	defff704 	addi	sp,sp,-36
    b074:	dfc00815 	stw	ra,32(sp)
    b078:	df000715 	stw	fp,28(sp)
    b07c:	df000704 	addi	fp,sp,28
    b080:	e13ffb15 	stw	r4,-20(fp)
    b084:	e17ffc15 	stw	r5,-16(fp)
    b088:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b08c:	e0bffb17 	ldw	r2,-20(fp)
    b090:	1004803a 	cmplt	r2,r2,zero
    b094:	1000091e 	bne	r2,zero,b0bc <read+0x4c>
    b098:	e13ffb17 	ldw	r4,-20(fp)
    b09c:	01400304 	movi	r5,12
    b0a0:	0000c680 	call	c68 <__mulsi3>
    b0a4:	1007883a 	mov	r3,r2
    b0a8:	00800074 	movhi	r2,1
    b0ac:	10b88304 	addi	r2,r2,-7668
    b0b0:	1887883a 	add	r3,r3,r2
    b0b4:	e0ffff15 	stw	r3,-4(fp)
    b0b8:	00000106 	br	b0c0 <read+0x50>
    b0bc:	e03fff15 	stw	zero,-4(fp)
    b0c0:	e0bfff17 	ldw	r2,-4(fp)
    b0c4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b0c8:	e0bffa17 	ldw	r2,-24(fp)
    b0cc:	1005003a 	cmpeq	r2,r2,zero
    b0d0:	1000241e 	bne	r2,zero,b164 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b0d4:	e0bffa17 	ldw	r2,-24(fp)
    b0d8:	10800217 	ldw	r2,8(r2)
    b0dc:	108000cc 	andi	r2,r2,3
    b0e0:	10800060 	cmpeqi	r2,r2,1
    b0e4:	10001a1e 	bne	r2,zero,b150 <read+0xe0>
    b0e8:	e0bffa17 	ldw	r2,-24(fp)
    b0ec:	10800017 	ldw	r2,0(r2)
    b0f0:	10800517 	ldw	r2,20(r2)
    b0f4:	1005003a 	cmpeq	r2,r2,zero
    b0f8:	1000151e 	bne	r2,zero,b150 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b0fc:	e0bffa17 	ldw	r2,-24(fp)
    b100:	10800017 	ldw	r2,0(r2)
    b104:	10800517 	ldw	r2,20(r2)
    b108:	e17ffc17 	ldw	r5,-16(fp)
    b10c:	e1bffd17 	ldw	r6,-12(fp)
    b110:	e13ffa17 	ldw	r4,-24(fp)
    b114:	103ee83a 	callr	r2
    b118:	e0bff915 	stw	r2,-28(fp)
    b11c:	e0bff917 	ldw	r2,-28(fp)
    b120:	1004403a 	cmpge	r2,r2,zero
    b124:	1000071e 	bne	r2,zero,b144 <read+0xd4>
        {
          ALT_ERRNO = -rval;
    b128:	000b1940 	call	b194 <alt_get_errno>
    b12c:	e0fff917 	ldw	r3,-28(fp)
    b130:	00c7c83a 	sub	r3,zero,r3
    b134:	10c00015 	stw	r3,0(r2)
          return -1;
    b138:	00bfffc4 	movi	r2,-1
    b13c:	e0bffe15 	stw	r2,-8(fp)
    b140:	00000e06 	br	b17c <read+0x10c>
        }
        return rval;
    b144:	e0bff917 	ldw	r2,-28(fp)
    b148:	e0bffe15 	stw	r2,-8(fp)
    b14c:	00000b06 	br	b17c <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b150:	000b1940 	call	b194 <alt_get_errno>
    b154:	1007883a 	mov	r3,r2
    b158:	00800344 	movi	r2,13
    b15c:	18800015 	stw	r2,0(r3)
    b160:	00000406 	br	b174 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b164:	000b1940 	call	b194 <alt_get_errno>
    b168:	1007883a 	mov	r3,r2
    b16c:	00801444 	movi	r2,81
    b170:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b174:	00bfffc4 	movi	r2,-1
    b178:	e0bffe15 	stw	r2,-8(fp)
    b17c:	e0bffe17 	ldw	r2,-8(fp)
}
    b180:	e037883a 	mov	sp,fp
    b184:	dfc00117 	ldw	ra,4(sp)
    b188:	df000017 	ldw	fp,0(sp)
    b18c:	dec00204 	addi	sp,sp,8
    b190:	f800283a 	ret

0000b194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b194:	defffd04 	addi	sp,sp,-12
    b198:	dfc00215 	stw	ra,8(sp)
    b19c:	df000115 	stw	fp,4(sp)
    b1a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b1a4:	00800074 	movhi	r2,1
    b1a8:	10bd0704 	addi	r2,r2,-3044
    b1ac:	10800017 	ldw	r2,0(r2)
    b1b0:	1005003a 	cmpeq	r2,r2,zero
    b1b4:	1000061e 	bne	r2,zero,b1d0 <alt_get_errno+0x3c>
    b1b8:	00800074 	movhi	r2,1
    b1bc:	10bd0704 	addi	r2,r2,-3044
    b1c0:	10800017 	ldw	r2,0(r2)
    b1c4:	103ee83a 	callr	r2
    b1c8:	e0bfff15 	stw	r2,-4(fp)
    b1cc:	00000306 	br	b1dc <alt_get_errno+0x48>
    b1d0:	00800074 	movhi	r2,1
    b1d4:	1083aa04 	addi	r2,r2,3752
    b1d8:	e0bfff15 	stw	r2,-4(fp)
    b1dc:	e0bfff17 	ldw	r2,-4(fp)
}
    b1e0:	e037883a 	mov	sp,fp
    b1e4:	dfc00117 	ldw	ra,4(sp)
    b1e8:	df000017 	ldw	fp,0(sp)
    b1ec:	dec00204 	addi	sp,sp,8
    b1f0:	f800283a 	ret

0000b1f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b1f4:	defffc04 	addi	sp,sp,-16
    b1f8:	dfc00315 	stw	ra,12(sp)
    b1fc:	df000215 	stw	fp,8(sp)
    b200:	dc000115 	stw	r16,4(sp)
    b204:	df000104 	addi	fp,sp,4
    b208:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b20c:	e0bfff17 	ldw	r2,-4(fp)
    b210:	108000d0 	cmplti	r2,r2,3
    b214:	10000f1e 	bne	r2,zero,b254 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    b218:	e13fff17 	ldw	r4,-4(fp)
    b21c:	04000074 	movhi	r16,1
    b220:	84388304 	addi	r16,r16,-7668
    b224:	01400304 	movi	r5,12
    b228:	0000c680 	call	c68 <__mulsi3>
    b22c:	1405883a 	add	r2,r2,r16
    b230:	10800204 	addi	r2,r2,8
    b234:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b238:	e13fff17 	ldw	r4,-4(fp)
    b23c:	04000074 	movhi	r16,1
    b240:	84388304 	addi	r16,r16,-7668
    b244:	01400304 	movi	r5,12
    b248:	0000c680 	call	c68 <__mulsi3>
    b24c:	1405883a 	add	r2,r2,r16
    b250:	10000015 	stw	zero,0(r2)
  }
}
    b254:	e037883a 	mov	sp,fp
    b258:	dfc00217 	ldw	ra,8(sp)
    b25c:	df000117 	ldw	fp,4(sp)
    b260:	dc000017 	ldw	r16,0(sp)
    b264:	dec00304 	addi	sp,sp,12
    b268:	f800283a 	ret

0000b26c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b26c:	defff804 	addi	sp,sp,-32
    b270:	df000715 	stw	fp,28(sp)
    b274:	df000704 	addi	fp,sp,28
    b278:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b27c:	0005303a 	rdctl	r2,status
    b280:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b284:	e0fffb17 	ldw	r3,-20(fp)
    b288:	00bfff84 	movi	r2,-2
    b28c:	1884703a 	and	r2,r3,r2
    b290:	1001703a 	wrctl	status,r2
  
  return context;
    b294:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b298:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b29c:	d0a00d17 	ldw	r2,-32716(gp)
    b2a0:	10c000c4 	addi	r3,r2,3
    b2a4:	00bfff04 	movi	r2,-4
    b2a8:	1884703a 	and	r2,r3,r2
    b2ac:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b2b0:	d0e00d17 	ldw	r3,-32716(gp)
    b2b4:	e0bffe17 	ldw	r2,-8(fp)
    b2b8:	1887883a 	add	r3,r3,r2
    b2bc:	00802034 	movhi	r2,128
    b2c0:	10800004 	addi	r2,r2,0
    b2c4:	10c0072e 	bgeu	r2,r3,b2e4 <sbrk+0x78>
    b2c8:	e0bffd17 	ldw	r2,-12(fp)
    b2cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b2d0:	e0bffa17 	ldw	r2,-24(fp)
    b2d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b2d8:	00bfffc4 	movi	r2,-1
    b2dc:	e0bfff15 	stw	r2,-4(fp)
    b2e0:	00000c06 	br	b314 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    b2e4:	d0a00d17 	ldw	r2,-32716(gp)
    b2e8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    b2ec:	d0e00d17 	ldw	r3,-32716(gp)
    b2f0:	e0bffe17 	ldw	r2,-8(fp)
    b2f4:	1885883a 	add	r2,r3,r2
    b2f8:	d0a00d15 	stw	r2,-32716(gp)
    b2fc:	e0bffd17 	ldw	r2,-12(fp)
    b300:	e0bff915 	stw	r2,-28(fp)
    b304:	e0bff917 	ldw	r2,-28(fp)
    b308:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b30c:	e0bffc17 	ldw	r2,-16(fp)
    b310:	e0bfff15 	stw	r2,-4(fp)
    b314:	e0bfff17 	ldw	r2,-4(fp)
} 
    b318:	e037883a 	mov	sp,fp
    b31c:	df000017 	ldw	fp,0(sp)
    b320:	dec00104 	addi	sp,sp,4
    b324:	f800283a 	ret

0000b328 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    b328:	defffa04 	addi	sp,sp,-24
    b32c:	df000515 	stw	fp,20(sp)
    b330:	df000504 	addi	fp,sp,20
    b334:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b338:	0005303a 	rdctl	r2,status
    b33c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b340:	e0fffd17 	ldw	r3,-12(fp)
    b344:	00bfff84 	movi	r2,-2
    b348:	1884703a 	and	r2,r3,r2
    b34c:	1001703a 	wrctl	status,r2
  
  return context;
    b350:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    b354:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    b358:	e0bfff17 	ldw	r2,-4(fp)
    b35c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    b360:	e0bffc17 	ldw	r2,-16(fp)
    b364:	10c00017 	ldw	r3,0(r2)
    b368:	e0bffc17 	ldw	r2,-16(fp)
    b36c:	10800117 	ldw	r2,4(r2)
    b370:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    b374:	e0bffc17 	ldw	r2,-16(fp)
    b378:	10c00117 	ldw	r3,4(r2)
    b37c:	e0bffc17 	ldw	r2,-16(fp)
    b380:	10800017 	ldw	r2,0(r2)
    b384:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    b388:	e0fffc17 	ldw	r3,-16(fp)
    b38c:	e0bffc17 	ldw	r2,-16(fp)
    b390:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    b394:	e0fffc17 	ldw	r3,-16(fp)
    b398:	e0bffc17 	ldw	r2,-16(fp)
    b39c:	18800015 	stw	r2,0(r3)
    b3a0:	e0bffe17 	ldw	r2,-8(fp)
    b3a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b3a8:	e0bffb17 	ldw	r2,-20(fp)
    b3ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    b3b0:	e037883a 	mov	sp,fp
    b3b4:	df000017 	ldw	fp,0(sp)
    b3b8:	dec00104 	addi	sp,sp,4
    b3bc:	f800283a 	ret

0000b3c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    b3c0:	defffb04 	addi	sp,sp,-20
    b3c4:	dfc00415 	stw	ra,16(sp)
    b3c8:	df000315 	stw	fp,12(sp)
    b3cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    b3d0:	d0a00e17 	ldw	r2,-32712(gp)
    b3d4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    b3d8:	d0a6b717 	ldw	r2,-25892(gp)
    b3dc:	10800044 	addi	r2,r2,1
    b3e0:	d0a6b715 	stw	r2,-25892(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b3e4:	00003106 	br	b4ac <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    b3e8:	e0bffe17 	ldw	r2,-8(fp)
    b3ec:	10800017 	ldw	r2,0(r2)
    b3f0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    b3f4:	e0bffe17 	ldw	r2,-8(fp)
    b3f8:	10800403 	ldbu	r2,16(r2)
    b3fc:	10803fcc 	andi	r2,r2,255
    b400:	1005003a 	cmpeq	r2,r2,zero
    b404:	1000051e 	bne	r2,zero,b41c <alt_tick+0x5c>
    b408:	d0a6b717 	ldw	r2,-25892(gp)
    b40c:	1004c03a 	cmpne	r2,r2,zero
    b410:	1000021e 	bne	r2,zero,b41c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    b414:	e0bffe17 	ldw	r2,-8(fp)
    b418:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    b41c:	e0bffe17 	ldw	r2,-8(fp)
    b420:	10c00217 	ldw	r3,8(r2)
    b424:	d0a6b717 	ldw	r2,-25892(gp)
    b428:	10c01e36 	bltu	r2,r3,b4a4 <alt_tick+0xe4>
    b42c:	e0bffe17 	ldw	r2,-8(fp)
    b430:	10800403 	ldbu	r2,16(r2)
    b434:	10803fcc 	andi	r2,r2,255
    b438:	1004c03a 	cmpne	r2,r2,zero
    b43c:	1000191e 	bne	r2,zero,b4a4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    b440:	e0bffe17 	ldw	r2,-8(fp)
    b444:	10c00317 	ldw	r3,12(r2)
    b448:	e0bffe17 	ldw	r2,-8(fp)
    b44c:	11000517 	ldw	r4,20(r2)
    b450:	183ee83a 	callr	r3
    b454:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    b458:	e0bffd17 	ldw	r2,-12(fp)
    b45c:	1004c03a 	cmpne	r2,r2,zero
    b460:	1000031e 	bne	r2,zero,b470 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    b464:	e13ffe17 	ldw	r4,-8(fp)
    b468:	000b3280 	call	b328 <alt_alarm_stop>
    b46c:	00000d06 	br	b4a4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    b470:	e0bffe17 	ldw	r2,-8(fp)
    b474:	10c00217 	ldw	r3,8(r2)
    b478:	e0bffd17 	ldw	r2,-12(fp)
    b47c:	1887883a 	add	r3,r3,r2
    b480:	e0bffe17 	ldw	r2,-8(fp)
    b484:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    b488:	e0bffe17 	ldw	r2,-8(fp)
    b48c:	10c00217 	ldw	r3,8(r2)
    b490:	d0a6b717 	ldw	r2,-25892(gp)
    b494:	1880032e 	bgeu	r3,r2,b4a4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    b498:	e0fffe17 	ldw	r3,-8(fp)
    b49c:	00800044 	movi	r2,1
    b4a0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    b4a4:	e0bfff17 	ldw	r2,-4(fp)
    b4a8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b4ac:	d0e00e04 	addi	r3,gp,-32712
    b4b0:	e0bffe17 	ldw	r2,-8(fp)
    b4b4:	10ffcc1e 	bne	r2,r3,b3e8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    b4b8:	e037883a 	mov	sp,fp
    b4bc:	dfc00117 	ldw	ra,4(sp)
    b4c0:	df000017 	ldw	fp,0(sp)
    b4c4:	dec00204 	addi	sp,sp,8
    b4c8:	f800283a 	ret

0000b4cc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b4cc:	defff704 	addi	sp,sp,-36
    b4d0:	dfc00815 	stw	ra,32(sp)
    b4d4:	df000715 	stw	fp,28(sp)
    b4d8:	df000704 	addi	fp,sp,28
    b4dc:	e13ffb15 	stw	r4,-20(fp)
    b4e0:	e17ffc15 	stw	r5,-16(fp)
    b4e4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b4e8:	e0bffb17 	ldw	r2,-20(fp)
    b4ec:	1004803a 	cmplt	r2,r2,zero
    b4f0:	1000091e 	bne	r2,zero,b518 <write+0x4c>
    b4f4:	e13ffb17 	ldw	r4,-20(fp)
    b4f8:	01400304 	movi	r5,12
    b4fc:	0000c680 	call	c68 <__mulsi3>
    b500:	1007883a 	mov	r3,r2
    b504:	00800074 	movhi	r2,1
    b508:	10b88304 	addi	r2,r2,-7668
    b50c:	1887883a 	add	r3,r3,r2
    b510:	e0ffff15 	stw	r3,-4(fp)
    b514:	00000106 	br	b51c <write+0x50>
    b518:	e03fff15 	stw	zero,-4(fp)
    b51c:	e0bfff17 	ldw	r2,-4(fp)
    b520:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b524:	e0bffa17 	ldw	r2,-24(fp)
    b528:	1005003a 	cmpeq	r2,r2,zero
    b52c:	1000241e 	bne	r2,zero,b5c0 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b530:	e0bffa17 	ldw	r2,-24(fp)
    b534:	10800217 	ldw	r2,8(r2)
    b538:	108000cc 	andi	r2,r2,3
    b53c:	1005003a 	cmpeq	r2,r2,zero
    b540:	10001a1e 	bne	r2,zero,b5ac <write+0xe0>
    b544:	e0bffa17 	ldw	r2,-24(fp)
    b548:	10800017 	ldw	r2,0(r2)
    b54c:	10800617 	ldw	r2,24(r2)
    b550:	1005003a 	cmpeq	r2,r2,zero
    b554:	1000151e 	bne	r2,zero,b5ac <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b558:	e0bffa17 	ldw	r2,-24(fp)
    b55c:	10800017 	ldw	r2,0(r2)
    b560:	10800617 	ldw	r2,24(r2)
    b564:	e17ffc17 	ldw	r5,-16(fp)
    b568:	e1bffd17 	ldw	r6,-12(fp)
    b56c:	e13ffa17 	ldw	r4,-24(fp)
    b570:	103ee83a 	callr	r2
    b574:	e0bff915 	stw	r2,-28(fp)
    b578:	e0bff917 	ldw	r2,-28(fp)
    b57c:	1004403a 	cmpge	r2,r2,zero
    b580:	1000071e 	bne	r2,zero,b5a0 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    b584:	000b5f00 	call	b5f0 <alt_get_errno>
    b588:	e0fff917 	ldw	r3,-28(fp)
    b58c:	00c7c83a 	sub	r3,zero,r3
    b590:	10c00015 	stw	r3,0(r2)
        return -1;
    b594:	00bfffc4 	movi	r2,-1
    b598:	e0bffe15 	stw	r2,-8(fp)
    b59c:	00000e06 	br	b5d8 <write+0x10c>
      }
      return rval;
    b5a0:	e0bff917 	ldw	r2,-28(fp)
    b5a4:	e0bffe15 	stw	r2,-8(fp)
    b5a8:	00000b06 	br	b5d8 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b5ac:	000b5f00 	call	b5f0 <alt_get_errno>
    b5b0:	1007883a 	mov	r3,r2
    b5b4:	00800344 	movi	r2,13
    b5b8:	18800015 	stw	r2,0(r3)
    b5bc:	00000406 	br	b5d0 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b5c0:	000b5f00 	call	b5f0 <alt_get_errno>
    b5c4:	1007883a 	mov	r3,r2
    b5c8:	00801444 	movi	r2,81
    b5cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b5d0:	00bfffc4 	movi	r2,-1
    b5d4:	e0bffe15 	stw	r2,-8(fp)
    b5d8:	e0bffe17 	ldw	r2,-8(fp)
}
    b5dc:	e037883a 	mov	sp,fp
    b5e0:	dfc00117 	ldw	ra,4(sp)
    b5e4:	df000017 	ldw	fp,0(sp)
    b5e8:	dec00204 	addi	sp,sp,8
    b5ec:	f800283a 	ret

0000b5f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b5f0:	defffd04 	addi	sp,sp,-12
    b5f4:	dfc00215 	stw	ra,8(sp)
    b5f8:	df000115 	stw	fp,4(sp)
    b5fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b600:	00800074 	movhi	r2,1
    b604:	10bd0704 	addi	r2,r2,-3044
    b608:	10800017 	ldw	r2,0(r2)
    b60c:	1005003a 	cmpeq	r2,r2,zero
    b610:	1000061e 	bne	r2,zero,b62c <alt_get_errno+0x3c>
    b614:	00800074 	movhi	r2,1
    b618:	10bd0704 	addi	r2,r2,-3044
    b61c:	10800017 	ldw	r2,0(r2)
    b620:	103ee83a 	callr	r2
    b624:	e0bfff15 	stw	r2,-4(fp)
    b628:	00000306 	br	b638 <alt_get_errno+0x48>
    b62c:	00800074 	movhi	r2,1
    b630:	1083aa04 	addi	r2,r2,3752
    b634:	e0bfff15 	stw	r2,-4(fp)
    b638:	e0bfff17 	ldw	r2,-4(fp)
}
    b63c:	e037883a 	mov	sp,fp
    b640:	dfc00117 	ldw	ra,4(sp)
    b644:	df000017 	ldw	fp,0(sp)
    b648:	dec00204 	addi	sp,sp,8
    b64c:	f800283a 	ret

0000b650 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b650:	defffd04 	addi	sp,sp,-12
    b654:	dfc00215 	stw	ra,8(sp)
    b658:	df000115 	stw	fp,4(sp)
    b65c:	df000104 	addi	fp,sp,4
    b660:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, CPU);
    b664:	000cbd80 	call	cbd8 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b668:	00800044 	movi	r2,1
    b66c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b670:	e037883a 	mov	sp,fp
    b674:	dfc00117 	ldw	ra,4(sp)
    b678:	df000017 	ldw	fp,0(sp)
    b67c:	dec00204 	addi	sp,sp,8
    b680:	f800283a 	ret

0000b684 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b684:	defffe04 	addi	sp,sp,-8
    b688:	dfc00115 	stw	ra,4(sp)
    b68c:	df000015 	stw	fp,0(sp)
    b690:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_timer);
    b694:	01040034 	movhi	r4,4096
    b698:	21080004 	addi	r4,r4,8192
    b69c:	000b883a 	mov	r5,zero
    b6a0:	000d883a 	mov	r6,zero
    b6a4:	01c00204 	movi	r7,8
    b6a8:	000c2340 	call	c234 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    b6ac:	01000074 	movhi	r4,1
    b6b0:	2138ed04 	addi	r4,r4,-7244
    b6b4:	000b883a 	mov	r5,zero
    b6b8:	01800204 	movi	r6,8
    b6bc:	000b8600 	call	b860 <altera_avalon_jtag_uart_init>
    b6c0:	01000074 	movhi	r4,1
    b6c4:	2138e304 	addi	r4,r4,-7284
    b6c8:	000b6e00 	call	b6e0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
    b6cc:	e037883a 	mov	sp,fp
    b6d0:	dfc00117 	ldw	ra,4(sp)
    b6d4:	df000017 	ldw	fp,0(sp)
    b6d8:	dec00204 	addi	sp,sp,8
    b6dc:	f800283a 	ret

0000b6e0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b6e0:	defffd04 	addi	sp,sp,-12
    b6e4:	dfc00215 	stw	ra,8(sp)
    b6e8:	df000115 	stw	fp,4(sp)
    b6ec:	df000104 	addi	fp,sp,4
    b6f0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b6f4:	e13fff17 	ldw	r4,-4(fp)
    b6f8:	01400074 	movhi	r5,1
    b6fc:	297d0404 	addi	r5,r5,-3056
    b700:	000c2e00 	call	c2e0 <alt_dev_llist_insert>
}
    b704:	e037883a 	mov	sp,fp
    b708:	dfc00117 	ldw	ra,4(sp)
    b70c:	df000017 	ldw	fp,0(sp)
    b710:	dec00204 	addi	sp,sp,8
    b714:	f800283a 	ret

0000b718 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b718:	defffa04 	addi	sp,sp,-24
    b71c:	dfc00515 	stw	ra,20(sp)
    b720:	df000415 	stw	fp,16(sp)
    b724:	df000404 	addi	fp,sp,16
    b728:	e13ffd15 	stw	r4,-12(fp)
    b72c:	e17ffe15 	stw	r5,-8(fp)
    b730:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b734:	e0bffd17 	ldw	r2,-12(fp)
    b738:	10800017 	ldw	r2,0(r2)
    b73c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b740:	e0bffc17 	ldw	r2,-16(fp)
    b744:	11000a04 	addi	r4,r2,40
    b748:	e0bffd17 	ldw	r2,-12(fp)
    b74c:	11c00217 	ldw	r7,8(r2)
    b750:	e17ffe17 	ldw	r5,-8(fp)
    b754:	e1bfff17 	ldw	r6,-4(fp)
    b758:	000bd600 	call	bd60 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b75c:	e037883a 	mov	sp,fp
    b760:	dfc00117 	ldw	ra,4(sp)
    b764:	df000017 	ldw	fp,0(sp)
    b768:	dec00204 	addi	sp,sp,8
    b76c:	f800283a 	ret

0000b770 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b770:	defffa04 	addi	sp,sp,-24
    b774:	dfc00515 	stw	ra,20(sp)
    b778:	df000415 	stw	fp,16(sp)
    b77c:	df000404 	addi	fp,sp,16
    b780:	e13ffd15 	stw	r4,-12(fp)
    b784:	e17ffe15 	stw	r5,-8(fp)
    b788:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b78c:	e0bffd17 	ldw	r2,-12(fp)
    b790:	10800017 	ldw	r2,0(r2)
    b794:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b798:	e0bffc17 	ldw	r2,-16(fp)
    b79c:	11000a04 	addi	r4,r2,40
    b7a0:	e0bffd17 	ldw	r2,-12(fp)
    b7a4:	11c00217 	ldw	r7,8(r2)
    b7a8:	e17ffe17 	ldw	r5,-8(fp)
    b7ac:	e1bfff17 	ldw	r6,-4(fp)
    b7b0:	000bf840 	call	bf84 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b7b4:	e037883a 	mov	sp,fp
    b7b8:	dfc00117 	ldw	ra,4(sp)
    b7bc:	df000017 	ldw	fp,0(sp)
    b7c0:	dec00204 	addi	sp,sp,8
    b7c4:	f800283a 	ret

0000b7c8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    b7c8:	defffc04 	addi	sp,sp,-16
    b7cc:	dfc00315 	stw	ra,12(sp)
    b7d0:	df000215 	stw	fp,8(sp)
    b7d4:	df000204 	addi	fp,sp,8
    b7d8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b7dc:	e0bfff17 	ldw	r2,-4(fp)
    b7e0:	10800017 	ldw	r2,0(r2)
    b7e4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    b7e8:	e0bffe17 	ldw	r2,-8(fp)
    b7ec:	11000a04 	addi	r4,r2,40
    b7f0:	e0bfff17 	ldw	r2,-4(fp)
    b7f4:	11400217 	ldw	r5,8(r2)
    b7f8:	000bbf80 	call	bbf8 <altera_avalon_jtag_uart_close>
}
    b7fc:	e037883a 	mov	sp,fp
    b800:	dfc00117 	ldw	ra,4(sp)
    b804:	df000017 	ldw	fp,0(sp)
    b808:	dec00204 	addi	sp,sp,8
    b80c:	f800283a 	ret

0000b810 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    b810:	defffa04 	addi	sp,sp,-24
    b814:	dfc00515 	stw	ra,20(sp)
    b818:	df000415 	stw	fp,16(sp)
    b81c:	df000404 	addi	fp,sp,16
    b820:	e13ffd15 	stw	r4,-12(fp)
    b824:	e17ffe15 	stw	r5,-8(fp)
    b828:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    b82c:	e0bffd17 	ldw	r2,-12(fp)
    b830:	10800017 	ldw	r2,0(r2)
    b834:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    b838:	e0bffc17 	ldw	r2,-16(fp)
    b83c:	11000a04 	addi	r4,r2,40
    b840:	e17ffe17 	ldw	r5,-8(fp)
    b844:	e1bfff17 	ldw	r6,-4(fp)
    b848:	000bc6c0 	call	bc6c <altera_avalon_jtag_uart_ioctl>
}
    b84c:	e037883a 	mov	sp,fp
    b850:	dfc00117 	ldw	ra,4(sp)
    b854:	df000017 	ldw	fp,0(sp)
    b858:	dec00204 	addi	sp,sp,8
    b85c:	f800283a 	ret

0000b860 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    b860:	defffa04 	addi	sp,sp,-24
    b864:	dfc00515 	stw	ra,20(sp)
    b868:	df000415 	stw	fp,16(sp)
    b86c:	df000404 	addi	fp,sp,16
    b870:	e13ffd15 	stw	r4,-12(fp)
    b874:	e17ffe15 	stw	r5,-8(fp)
    b878:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b87c:	e0fffd17 	ldw	r3,-12(fp)
    b880:	00800044 	movi	r2,1
    b884:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    b888:	e0bffd17 	ldw	r2,-12(fp)
    b88c:	10800017 	ldw	r2,0(r2)
    b890:	11000104 	addi	r4,r2,4
    b894:	e0bffd17 	ldw	r2,-12(fp)
    b898:	10800817 	ldw	r2,32(r2)
    b89c:	1007883a 	mov	r3,r2
    b8a0:	2005883a 	mov	r2,r4
    b8a4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    b8a8:	e13ffe17 	ldw	r4,-8(fp)
    b8ac:	e17fff17 	ldw	r5,-4(fp)
    b8b0:	d8000015 	stw	zero,0(sp)
    b8b4:	01800074 	movhi	r6,1
    b8b8:	31ae4804 	addi	r6,r6,-18144
    b8bc:	e1fffd17 	ldw	r7,-12(fp)
    b8c0:	000c4d80 	call	c4d8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    b8c4:	e0bffd17 	ldw	r2,-12(fp)
    b8c8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    b8cc:	e0bffd17 	ldw	r2,-12(fp)
    b8d0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b8d4:	00800074 	movhi	r2,1
    b8d8:	1083b104 	addi	r2,r2,3780
    b8dc:	10800017 	ldw	r2,0(r2)
    b8e0:	100b883a 	mov	r5,r2
    b8e4:	01800074 	movhi	r6,1
    b8e8:	31aed204 	addi	r6,r6,-17592
    b8ec:	e1fffd17 	ldw	r7,-12(fp)
    b8f0:	000a5b00 	call	a5b0 <alt_alarm_start>
    b8f4:	1004403a 	cmpge	r2,r2,zero
    b8f8:	1000041e 	bne	r2,zero,b90c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    b8fc:	e0fffd17 	ldw	r3,-12(fp)
    b900:	00a00034 	movhi	r2,32768
    b904:	10bfffc4 	addi	r2,r2,-1
    b908:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    b90c:	e037883a 	mov	sp,fp
    b910:	dfc00117 	ldw	ra,4(sp)
    b914:	df000017 	ldw	fp,0(sp)
    b918:	dec00204 	addi	sp,sp,8
    b91c:	f800283a 	ret

0000b920 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    b920:	defff804 	addi	sp,sp,-32
    b924:	df000715 	stw	fp,28(sp)
    b928:	df000704 	addi	fp,sp,28
    b92c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    b930:	e0bfff17 	ldw	r2,-4(fp)
    b934:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    b938:	e0bffe17 	ldw	r2,-8(fp)
    b93c:	10800017 	ldw	r2,0(r2)
    b940:	e0bffd15 	stw	r2,-12(fp)
    b944:	00000006 	br	b948 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b948:	e0bffd17 	ldw	r2,-12(fp)
    b94c:	10800104 	addi	r2,r2,4
    b950:	10800037 	ldwio	r2,0(r2)
    b954:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    b958:	e0bffc17 	ldw	r2,-16(fp)
    b95c:	1080c00c 	andi	r2,r2,768
    b960:	1005003a 	cmpeq	r2,r2,zero
    b964:	1000741e 	bne	r2,zero,bb38 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    b968:	e0bffc17 	ldw	r2,-16(fp)
    b96c:	1080400c 	andi	r2,r2,256
    b970:	1005003a 	cmpeq	r2,r2,zero
    b974:	1000351e 	bne	r2,zero,ba4c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    b978:	00800074 	movhi	r2,1
    b97c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b980:	e0bffe17 	ldw	r2,-8(fp)
    b984:	10800a17 	ldw	r2,40(r2)
    b988:	10800044 	addi	r2,r2,1
    b98c:	1081ffcc 	andi	r2,r2,2047
    b990:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    b994:	e0bffe17 	ldw	r2,-8(fp)
    b998:	10c00b17 	ldw	r3,44(r2)
    b99c:	e0bffa17 	ldw	r2,-24(fp)
    b9a0:	18801626 	beq	r3,r2,b9fc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    b9a4:	e0bffd17 	ldw	r2,-12(fp)
    b9a8:	10800037 	ldwio	r2,0(r2)
    b9ac:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    b9b0:	e0bffb17 	ldw	r2,-20(fp)
    b9b4:	10a0000c 	andi	r2,r2,32768
    b9b8:	1005003a 	cmpeq	r2,r2,zero
    b9bc:	10000f1e 	bne	r2,zero,b9fc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    b9c0:	e0bffe17 	ldw	r2,-8(fp)
    b9c4:	10c00a17 	ldw	r3,40(r2)
    b9c8:	e0bffb17 	ldw	r2,-20(fp)
    b9cc:	1009883a 	mov	r4,r2
    b9d0:	e0bffe17 	ldw	r2,-8(fp)
    b9d4:	1885883a 	add	r2,r3,r2
    b9d8:	10800e04 	addi	r2,r2,56
    b9dc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b9e0:	e0bffe17 	ldw	r2,-8(fp)
    b9e4:	10800a17 	ldw	r2,40(r2)
    b9e8:	10800044 	addi	r2,r2,1
    b9ec:	10c1ffcc 	andi	r3,r2,2047
    b9f0:	e0bffe17 	ldw	r2,-8(fp)
    b9f4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    b9f8:	003fe106 	br	b980 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    b9fc:	e0bffb17 	ldw	r2,-20(fp)
    ba00:	10bfffec 	andhi	r2,r2,65535
    ba04:	1005003a 	cmpeq	r2,r2,zero
    ba08:	1000101e 	bne	r2,zero,ba4c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ba0c:	e0bffe17 	ldw	r2,-8(fp)
    ba10:	10c00817 	ldw	r3,32(r2)
    ba14:	00bfff84 	movi	r2,-2
    ba18:	1886703a 	and	r3,r3,r2
    ba1c:	e0bffe17 	ldw	r2,-8(fp)
    ba20:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    ba24:	e0bffd17 	ldw	r2,-12(fp)
    ba28:	11000104 	addi	r4,r2,4
    ba2c:	e0bffe17 	ldw	r2,-8(fp)
    ba30:	10800817 	ldw	r2,32(r2)
    ba34:	1007883a 	mov	r3,r2
    ba38:	2005883a 	mov	r2,r4
    ba3c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ba40:	e0bffd17 	ldw	r2,-12(fp)
    ba44:	10800104 	addi	r2,r2,4
    ba48:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ba4c:	e0bffc17 	ldw	r2,-16(fp)
    ba50:	1080800c 	andi	r2,r2,512
    ba54:	1005003a 	cmpeq	r2,r2,zero
    ba58:	103fbb1e 	bne	r2,zero,b948 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ba5c:	e0bffc17 	ldw	r2,-16(fp)
    ba60:	10bfffec 	andhi	r2,r2,65535
    ba64:	1004d43a 	srli	r2,r2,16
    ba68:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    ba6c:	00001506 	br	bac4 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ba70:	e13ffd17 	ldw	r4,-12(fp)
    ba74:	e0bffe17 	ldw	r2,-8(fp)
    ba78:	10c00d17 	ldw	r3,52(r2)
    ba7c:	e0bffe17 	ldw	r2,-8(fp)
    ba80:	1885883a 	add	r2,r3,r2
    ba84:	10820e04 	addi	r2,r2,2104
    ba88:	10800003 	ldbu	r2,0(r2)
    ba8c:	10c03fcc 	andi	r3,r2,255
    ba90:	18c0201c 	xori	r3,r3,128
    ba94:	18ffe004 	addi	r3,r3,-128
    ba98:	2005883a 	mov	r2,r4
    ba9c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    baa0:	e0bffe17 	ldw	r2,-8(fp)
    baa4:	10800d17 	ldw	r2,52(r2)
    baa8:	10800044 	addi	r2,r2,1
    baac:	10c1ffcc 	andi	r3,r2,2047
    bab0:	e0bffe17 	ldw	r2,-8(fp)
    bab4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    bab8:	e0bff917 	ldw	r2,-28(fp)
    babc:	10bfffc4 	addi	r2,r2,-1
    bac0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    bac4:	e0bff917 	ldw	r2,-28(fp)
    bac8:	1005003a 	cmpeq	r2,r2,zero
    bacc:	1000051e 	bne	r2,zero,bae4 <altera_avalon_jtag_uart_irq+0x1c4>
    bad0:	e0bffe17 	ldw	r2,-8(fp)
    bad4:	10c00d17 	ldw	r3,52(r2)
    bad8:	e0bffe17 	ldw	r2,-8(fp)
    badc:	10800c17 	ldw	r2,48(r2)
    bae0:	18bfe31e 	bne	r3,r2,ba70 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    bae4:	e0bff917 	ldw	r2,-28(fp)
    bae8:	1005003a 	cmpeq	r2,r2,zero
    baec:	103f961e 	bne	r2,zero,b948 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    baf0:	e0bffe17 	ldw	r2,-8(fp)
    baf4:	10c00817 	ldw	r3,32(r2)
    baf8:	00bfff44 	movi	r2,-3
    bafc:	1886703a 	and	r3,r3,r2
    bb00:	e0bffe17 	ldw	r2,-8(fp)
    bb04:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bb08:	e0bffe17 	ldw	r2,-8(fp)
    bb0c:	10800017 	ldw	r2,0(r2)
    bb10:	11000104 	addi	r4,r2,4
    bb14:	e0bffe17 	ldw	r2,-8(fp)
    bb18:	10800817 	ldw	r2,32(r2)
    bb1c:	1007883a 	mov	r3,r2
    bb20:	2005883a 	mov	r2,r4
    bb24:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bb28:	e0bffd17 	ldw	r2,-12(fp)
    bb2c:	10800104 	addi	r2,r2,4
    bb30:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    bb34:	003f8406 	br	b948 <altera_avalon_jtag_uart_irq+0x28>
}
    bb38:	e037883a 	mov	sp,fp
    bb3c:	df000017 	ldw	fp,0(sp)
    bb40:	dec00104 	addi	sp,sp,4
    bb44:	f800283a 	ret

0000bb48 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    bb48:	defffc04 	addi	sp,sp,-16
    bb4c:	df000315 	stw	fp,12(sp)
    bb50:	df000304 	addi	fp,sp,12
    bb54:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    bb58:	e0bfff17 	ldw	r2,-4(fp)
    bb5c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    bb60:	e0bffe17 	ldw	r2,-8(fp)
    bb64:	10800017 	ldw	r2,0(r2)
    bb68:	10800104 	addi	r2,r2,4
    bb6c:	10800037 	ldwio	r2,0(r2)
    bb70:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    bb74:	e0bffd17 	ldw	r2,-12(fp)
    bb78:	1081000c 	andi	r2,r2,1024
    bb7c:	1005003a 	cmpeq	r2,r2,zero
    bb80:	10000c1e 	bne	r2,zero,bbb4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    bb84:	e0bffe17 	ldw	r2,-8(fp)
    bb88:	10800017 	ldw	r2,0(r2)
    bb8c:	11000104 	addi	r4,r2,4
    bb90:	e0bffe17 	ldw	r2,-8(fp)
    bb94:	10800817 	ldw	r2,32(r2)
    bb98:	10810014 	ori	r2,r2,1024
    bb9c:	1007883a 	mov	r3,r2
    bba0:	2005883a 	mov	r2,r4
    bba4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    bba8:	e0bffe17 	ldw	r2,-8(fp)
    bbac:	10000915 	stw	zero,36(r2)
    bbb0:	00000a06 	br	bbdc <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    bbb4:	e0bffe17 	ldw	r2,-8(fp)
    bbb8:	10c00917 	ldw	r3,36(r2)
    bbbc:	00a00034 	movhi	r2,32768
    bbc0:	10bfff04 	addi	r2,r2,-4
    bbc4:	10c00536 	bltu	r2,r3,bbdc <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    bbc8:	e0bffe17 	ldw	r2,-8(fp)
    bbcc:	10800917 	ldw	r2,36(r2)
    bbd0:	10c00044 	addi	r3,r2,1
    bbd4:	e0bffe17 	ldw	r2,-8(fp)
    bbd8:	10c00915 	stw	r3,36(r2)
    bbdc:	00800074 	movhi	r2,1
    bbe0:	1083b104 	addi	r2,r2,3780
    bbe4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    bbe8:	e037883a 	mov	sp,fp
    bbec:	df000017 	ldw	fp,0(sp)
    bbf0:	dec00104 	addi	sp,sp,4
    bbf4:	f800283a 	ret

0000bbf8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    bbf8:	defffc04 	addi	sp,sp,-16
    bbfc:	df000315 	stw	fp,12(sp)
    bc00:	df000304 	addi	fp,sp,12
    bc04:	e13ffd15 	stw	r4,-12(fp)
    bc08:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    bc0c:	00000706 	br	bc2c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    bc10:	e0bffe17 	ldw	r2,-8(fp)
    bc14:	1090000c 	andi	r2,r2,16384
    bc18:	1005003a 	cmpeq	r2,r2,zero
    bc1c:	1000031e 	bne	r2,zero,bc2c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    bc20:	00bffd44 	movi	r2,-11
    bc24:	e0bfff15 	stw	r2,-4(fp)
    bc28:	00000b06 	br	bc58 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    bc2c:	e0bffd17 	ldw	r2,-12(fp)
    bc30:	10c00d17 	ldw	r3,52(r2)
    bc34:	e0bffd17 	ldw	r2,-12(fp)
    bc38:	10800c17 	ldw	r2,48(r2)
    bc3c:	18800526 	beq	r3,r2,bc54 <altera_avalon_jtag_uart_close+0x5c>
    bc40:	e0bffd17 	ldw	r2,-12(fp)
    bc44:	10c00917 	ldw	r3,36(r2)
    bc48:	e0bffd17 	ldw	r2,-12(fp)
    bc4c:	10800117 	ldw	r2,4(r2)
    bc50:	18bfef36 	bltu	r3,r2,bc10 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    bc54:	e03fff15 	stw	zero,-4(fp)
    bc58:	e0bfff17 	ldw	r2,-4(fp)
}
    bc5c:	e037883a 	mov	sp,fp
    bc60:	df000017 	ldw	fp,0(sp)
    bc64:	dec00104 	addi	sp,sp,4
    bc68:	f800283a 	ret

0000bc6c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    bc6c:	defff804 	addi	sp,sp,-32
    bc70:	df000715 	stw	fp,28(sp)
    bc74:	df000704 	addi	fp,sp,28
    bc78:	e13ffb15 	stw	r4,-20(fp)
    bc7c:	e17ffc15 	stw	r5,-16(fp)
    bc80:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    bc84:	00bff9c4 	movi	r2,-25
    bc88:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    bc8c:	e0bffc17 	ldw	r2,-16(fp)
    bc90:	e0bfff15 	stw	r2,-4(fp)
    bc94:	e0ffff17 	ldw	r3,-4(fp)
    bc98:	189a8060 	cmpeqi	r2,r3,27137
    bc9c:	1000041e 	bne	r2,zero,bcb0 <altera_avalon_jtag_uart_ioctl+0x44>
    bca0:	e0ffff17 	ldw	r3,-4(fp)
    bca4:	189a80a0 	cmpeqi	r2,r3,27138
    bca8:	10001b1e 	bne	r2,zero,bd18 <altera_avalon_jtag_uart_ioctl+0xac>
    bcac:	00002706 	br	bd4c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    bcb0:	e0bffb17 	ldw	r2,-20(fp)
    bcb4:	10c00117 	ldw	r3,4(r2)
    bcb8:	00a00034 	movhi	r2,32768
    bcbc:	10bfffc4 	addi	r2,r2,-1
    bcc0:	18802226 	beq	r3,r2,bd4c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    bcc4:	e0bffd17 	ldw	r2,-12(fp)
    bcc8:	10800017 	ldw	r2,0(r2)
    bccc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    bcd0:	e0bff917 	ldw	r2,-28(fp)
    bcd4:	10800090 	cmplti	r2,r2,2
    bcd8:	1000071e 	bne	r2,zero,bcf8 <altera_avalon_jtag_uart_ioctl+0x8c>
    bcdc:	e0fff917 	ldw	r3,-28(fp)
    bce0:	00a00034 	movhi	r2,32768
    bce4:	10bfffc4 	addi	r2,r2,-1
    bce8:	18800326 	beq	r3,r2,bcf8 <altera_avalon_jtag_uart_ioctl+0x8c>
    bcec:	e0bff917 	ldw	r2,-28(fp)
    bcf0:	e0bffe15 	stw	r2,-8(fp)
    bcf4:	00000306 	br	bd04 <altera_avalon_jtag_uart_ioctl+0x98>
    bcf8:	00e00034 	movhi	r3,32768
    bcfc:	18ffff84 	addi	r3,r3,-2
    bd00:	e0fffe15 	stw	r3,-8(fp)
    bd04:	e0bffb17 	ldw	r2,-20(fp)
    bd08:	e0fffe17 	ldw	r3,-8(fp)
    bd0c:	10c00115 	stw	r3,4(r2)
      rc = 0;
    bd10:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    bd14:	00000d06 	br	bd4c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    bd18:	e0bffb17 	ldw	r2,-20(fp)
    bd1c:	10c00117 	ldw	r3,4(r2)
    bd20:	00a00034 	movhi	r2,32768
    bd24:	10bfffc4 	addi	r2,r2,-1
    bd28:	18800826 	beq	r3,r2,bd4c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    bd2c:	e13ffd17 	ldw	r4,-12(fp)
    bd30:	e0bffb17 	ldw	r2,-20(fp)
    bd34:	10c00917 	ldw	r3,36(r2)
    bd38:	e0bffb17 	ldw	r2,-20(fp)
    bd3c:	10800117 	ldw	r2,4(r2)
    bd40:	1885803a 	cmpltu	r2,r3,r2
    bd44:	20800015 	stw	r2,0(r4)
      rc = 0;
    bd48:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    bd4c:	e0bffa17 	ldw	r2,-24(fp)
}
    bd50:	e037883a 	mov	sp,fp
    bd54:	df000017 	ldw	fp,0(sp)
    bd58:	dec00104 	addi	sp,sp,4
    bd5c:	f800283a 	ret

0000bd60 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    bd60:	defff204 	addi	sp,sp,-56
    bd64:	dfc00d15 	stw	ra,52(sp)
    bd68:	df000c15 	stw	fp,48(sp)
    bd6c:	df000c04 	addi	fp,sp,48
    bd70:	e13ffb15 	stw	r4,-20(fp)
    bd74:	e17ffc15 	stw	r5,-16(fp)
    bd78:	e1bffd15 	stw	r6,-12(fp)
    bd7c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    bd80:	e0bffc17 	ldw	r2,-16(fp)
    bd84:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    bd88:	00004806 	br	beac <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    bd8c:	e0bffb17 	ldw	r2,-20(fp)
    bd90:	10800a17 	ldw	r2,40(r2)
    bd94:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    bd98:	e0bffb17 	ldw	r2,-20(fp)
    bd9c:	10800b17 	ldw	r2,44(r2)
    bda0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    bda4:	e0fff717 	ldw	r3,-36(fp)
    bda8:	e0bff617 	ldw	r2,-40(fp)
    bdac:	18800536 	bltu	r3,r2,bdc4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    bdb0:	e0bff717 	ldw	r2,-36(fp)
    bdb4:	e0fff617 	ldw	r3,-40(fp)
    bdb8:	10c5c83a 	sub	r2,r2,r3
    bdbc:	e0bff815 	stw	r2,-32(fp)
    bdc0:	00000406 	br	bdd4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    bdc4:	00820004 	movi	r2,2048
    bdc8:	e0fff617 	ldw	r3,-40(fp)
    bdcc:	10c5c83a 	sub	r2,r2,r3
    bdd0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    bdd4:	e0bff817 	ldw	r2,-32(fp)
    bdd8:	1005003a 	cmpeq	r2,r2,zero
    bddc:	10001f1e 	bne	r2,zero,be5c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    bde0:	e0fffd17 	ldw	r3,-12(fp)
    bde4:	e0bff817 	ldw	r2,-32(fp)
    bde8:	1880022e 	bgeu	r3,r2,bdf4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    bdec:	e0bffd17 	ldw	r2,-12(fp)
    bdf0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    bdf4:	e0bffb17 	ldw	r2,-20(fp)
    bdf8:	10c00e04 	addi	r3,r2,56
    bdfc:	e0bff617 	ldw	r2,-40(fp)
    be00:	1887883a 	add	r3,r3,r2
    be04:	e0bffa17 	ldw	r2,-24(fp)
    be08:	1009883a 	mov	r4,r2
    be0c:	180b883a 	mov	r5,r3
    be10:	e1bff817 	ldw	r6,-32(fp)
    be14:	00061480 	call	6148 <memcpy>
      ptr   += n;
    be18:	e0fff817 	ldw	r3,-32(fp)
    be1c:	e0bffa17 	ldw	r2,-24(fp)
    be20:	10c5883a 	add	r2,r2,r3
    be24:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    be28:	e0fffd17 	ldw	r3,-12(fp)
    be2c:	e0bff817 	ldw	r2,-32(fp)
    be30:	1885c83a 	sub	r2,r3,r2
    be34:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    be38:	e0fff617 	ldw	r3,-40(fp)
    be3c:	e0bff817 	ldw	r2,-32(fp)
    be40:	1885883a 	add	r2,r3,r2
    be44:	10c1ffcc 	andi	r3,r2,2047
    be48:	e0bffb17 	ldw	r2,-20(fp)
    be4c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    be50:	e0bffd17 	ldw	r2,-12(fp)
    be54:	10800048 	cmpgei	r2,r2,1
    be58:	103fcc1e 	bne	r2,zero,bd8c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    be5c:	e0fffa17 	ldw	r3,-24(fp)
    be60:	e0bffc17 	ldw	r2,-16(fp)
    be64:	1880141e 	bne	r3,r2,beb8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    be68:	e0bffe17 	ldw	r2,-8(fp)
    be6c:	1090000c 	andi	r2,r2,16384
    be70:	1004c03a 	cmpne	r2,r2,zero
    be74:	1000101e 	bne	r2,zero,beb8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    be78:	e0bffb17 	ldw	r2,-20(fp)
    be7c:	10c00a17 	ldw	r3,40(r2)
    be80:	e0bff717 	ldw	r2,-36(fp)
    be84:	1880051e 	bne	r3,r2,be9c <altera_avalon_jtag_uart_read+0x13c>
    be88:	e0bffb17 	ldw	r2,-20(fp)
    be8c:	10c00917 	ldw	r3,36(r2)
    be90:	e0bffb17 	ldw	r2,-20(fp)
    be94:	10800117 	ldw	r2,4(r2)
    be98:	18bff736 	bltu	r3,r2,be78 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    be9c:	e0bffb17 	ldw	r2,-20(fp)
    bea0:	10c00a17 	ldw	r3,40(r2)
    bea4:	e0bff717 	ldw	r2,-36(fp)
    bea8:	18800326 	beq	r3,r2,beb8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    beac:	e0bffd17 	ldw	r2,-12(fp)
    beb0:	10800048 	cmpgei	r2,r2,1
    beb4:	103fb51e 	bne	r2,zero,bd8c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    beb8:	e0fffa17 	ldw	r3,-24(fp)
    bebc:	e0bffc17 	ldw	r2,-16(fp)
    bec0:	18801926 	beq	r3,r2,bf28 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bec4:	0005303a 	rdctl	r2,status
    bec8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    becc:	e0fff517 	ldw	r3,-44(fp)
    bed0:	00bfff84 	movi	r2,-2
    bed4:	1884703a 	and	r2,r3,r2
    bed8:	1001703a 	wrctl	status,r2
  
  return context;
    bedc:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    bee0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bee4:	e0bffb17 	ldw	r2,-20(fp)
    bee8:	10800817 	ldw	r2,32(r2)
    beec:	10c00054 	ori	r3,r2,1
    bef0:	e0bffb17 	ldw	r2,-20(fp)
    bef4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bef8:	e0bffb17 	ldw	r2,-20(fp)
    befc:	10800017 	ldw	r2,0(r2)
    bf00:	11000104 	addi	r4,r2,4
    bf04:	e0bffb17 	ldw	r2,-20(fp)
    bf08:	10800817 	ldw	r2,32(r2)
    bf0c:	1007883a 	mov	r3,r2
    bf10:	2005883a 	mov	r2,r4
    bf14:	10c00035 	stwio	r3,0(r2)
    bf18:	e0bff917 	ldw	r2,-28(fp)
    bf1c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bf20:	e0bff417 	ldw	r2,-48(fp)
    bf24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    bf28:	e0fffa17 	ldw	r3,-24(fp)
    bf2c:	e0bffc17 	ldw	r2,-16(fp)
    bf30:	18800526 	beq	r3,r2,bf48 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    bf34:	e0fffa17 	ldw	r3,-24(fp)
    bf38:	e0bffc17 	ldw	r2,-16(fp)
    bf3c:	1887c83a 	sub	r3,r3,r2
    bf40:	e0ffff15 	stw	r3,-4(fp)
    bf44:	00000906 	br	bf6c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    bf48:	e0bffe17 	ldw	r2,-8(fp)
    bf4c:	1090000c 	andi	r2,r2,16384
    bf50:	1005003a 	cmpeq	r2,r2,zero
    bf54:	1000031e 	bne	r2,zero,bf64 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    bf58:	00bffd44 	movi	r2,-11
    bf5c:	e0bfff15 	stw	r2,-4(fp)
    bf60:	00000206 	br	bf6c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    bf64:	00bffec4 	movi	r2,-5
    bf68:	e0bfff15 	stw	r2,-4(fp)
    bf6c:	e0bfff17 	ldw	r2,-4(fp)
}
    bf70:	e037883a 	mov	sp,fp
    bf74:	dfc00117 	ldw	ra,4(sp)
    bf78:	df000017 	ldw	fp,0(sp)
    bf7c:	dec00204 	addi	sp,sp,8
    bf80:	f800283a 	ret

0000bf84 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    bf84:	defff204 	addi	sp,sp,-56
    bf88:	dfc00d15 	stw	ra,52(sp)
    bf8c:	df000c15 	stw	fp,48(sp)
    bf90:	df000c04 	addi	fp,sp,48
    bf94:	e13ffb15 	stw	r4,-20(fp)
    bf98:	e17ffc15 	stw	r5,-16(fp)
    bf9c:	e1bffd15 	stw	r6,-12(fp)
    bfa0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    bfa4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    bfa8:	e0bffc17 	ldw	r2,-16(fp)
    bfac:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    bfb0:	00003a06 	br	c09c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    bfb4:	e0bffb17 	ldw	r2,-20(fp)
    bfb8:	10800c17 	ldw	r2,48(r2)
    bfbc:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    bfc0:	e0bffb17 	ldw	r2,-20(fp)
    bfc4:	10800d17 	ldw	r2,52(r2)
    bfc8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    bfcc:	e0fffa17 	ldw	r3,-24(fp)
    bfd0:	e0bff917 	ldw	r2,-28(fp)
    bfd4:	1880062e 	bgeu	r3,r2,bff0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    bfd8:	e0fff917 	ldw	r3,-28(fp)
    bfdc:	e0bffa17 	ldw	r2,-24(fp)
    bfe0:	1885c83a 	sub	r2,r3,r2
    bfe4:	10bfffc4 	addi	r2,r2,-1
    bfe8:	e0bff815 	stw	r2,-32(fp)
    bfec:	00000c06 	br	c020 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    bff0:	e0bff917 	ldw	r2,-28(fp)
    bff4:	1005003a 	cmpeq	r2,r2,zero
    bff8:	1000051e 	bne	r2,zero,c010 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    bffc:	00820004 	movi	r2,2048
    c000:	e0fffa17 	ldw	r3,-24(fp)
    c004:	10c5c83a 	sub	r2,r2,r3
    c008:	e0bff815 	stw	r2,-32(fp)
    c00c:	00000406 	br	c020 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c010:	0081ffc4 	movi	r2,2047
    c014:	e0fffa17 	ldw	r3,-24(fp)
    c018:	10c5c83a 	sub	r2,r2,r3
    c01c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c020:	e0bff817 	ldw	r2,-32(fp)
    c024:	1005003a 	cmpeq	r2,r2,zero
    c028:	10001f1e 	bne	r2,zero,c0a8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    c02c:	e0fffd17 	ldw	r3,-12(fp)
    c030:	e0bff817 	ldw	r2,-32(fp)
    c034:	1880022e 	bgeu	r3,r2,c040 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    c038:	e0bffd17 	ldw	r2,-12(fp)
    c03c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    c040:	e0bffb17 	ldw	r2,-20(fp)
    c044:	10c20e04 	addi	r3,r2,2104
    c048:	e0bffa17 	ldw	r2,-24(fp)
    c04c:	1885883a 	add	r2,r3,r2
    c050:	e0fffc17 	ldw	r3,-16(fp)
    c054:	1009883a 	mov	r4,r2
    c058:	180b883a 	mov	r5,r3
    c05c:	e1bff817 	ldw	r6,-32(fp)
    c060:	00061480 	call	6148 <memcpy>
      ptr   += n;
    c064:	e0fff817 	ldw	r3,-32(fp)
    c068:	e0bffc17 	ldw	r2,-16(fp)
    c06c:	10c5883a 	add	r2,r2,r3
    c070:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    c074:	e0fffd17 	ldw	r3,-12(fp)
    c078:	e0bff817 	ldw	r2,-32(fp)
    c07c:	1885c83a 	sub	r2,r3,r2
    c080:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c084:	e0fffa17 	ldw	r3,-24(fp)
    c088:	e0bff817 	ldw	r2,-32(fp)
    c08c:	1885883a 	add	r2,r3,r2
    c090:	10c1ffcc 	andi	r3,r2,2047
    c094:	e0bffb17 	ldw	r2,-20(fp)
    c098:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c09c:	e0bffd17 	ldw	r2,-12(fp)
    c0a0:	10800048 	cmpgei	r2,r2,1
    c0a4:	103fc31e 	bne	r2,zero,bfb4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c0a8:	0005303a 	rdctl	r2,status
    c0ac:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c0b0:	e0fff517 	ldw	r3,-44(fp)
    c0b4:	00bfff84 	movi	r2,-2
    c0b8:	1884703a 	and	r2,r3,r2
    c0bc:	1001703a 	wrctl	status,r2
  
  return context;
    c0c0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    c0c4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c0c8:	e0bffb17 	ldw	r2,-20(fp)
    c0cc:	10800817 	ldw	r2,32(r2)
    c0d0:	10c00094 	ori	r3,r2,2
    c0d4:	e0bffb17 	ldw	r2,-20(fp)
    c0d8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c0dc:	e0bffb17 	ldw	r2,-20(fp)
    c0e0:	10800017 	ldw	r2,0(r2)
    c0e4:	11000104 	addi	r4,r2,4
    c0e8:	e0bffb17 	ldw	r2,-20(fp)
    c0ec:	10800817 	ldw	r2,32(r2)
    c0f0:	1007883a 	mov	r3,r2
    c0f4:	2005883a 	mov	r2,r4
    c0f8:	10c00035 	stwio	r3,0(r2)
    c0fc:	e0bff717 	ldw	r2,-36(fp)
    c100:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c104:	e0bff417 	ldw	r2,-48(fp)
    c108:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    c10c:	e0bffd17 	ldw	r2,-12(fp)
    c110:	10800050 	cmplti	r2,r2,1
    c114:	1000111e 	bne	r2,zero,c15c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    c118:	e0bffe17 	ldw	r2,-8(fp)
    c11c:	1090000c 	andi	r2,r2,16384
    c120:	1004c03a 	cmpne	r2,r2,zero
    c124:	1000101e 	bne	r2,zero,c168 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c128:	e0bffb17 	ldw	r2,-20(fp)
    c12c:	10c00d17 	ldw	r3,52(r2)
    c130:	e0bff917 	ldw	r2,-28(fp)
    c134:	1880051e 	bne	r3,r2,c14c <altera_avalon_jtag_uart_write+0x1c8>
    c138:	e0bffb17 	ldw	r2,-20(fp)
    c13c:	10c00917 	ldw	r3,36(r2)
    c140:	e0bffb17 	ldw	r2,-20(fp)
    c144:	10800117 	ldw	r2,4(r2)
    c148:	18bff736 	bltu	r3,r2,c128 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    c14c:	e0bffb17 	ldw	r2,-20(fp)
    c150:	10c00d17 	ldw	r3,52(r2)
    c154:	e0bff917 	ldw	r2,-28(fp)
    c158:	18800326 	beq	r3,r2,c168 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    c15c:	e0bffd17 	ldw	r2,-12(fp)
    c160:	10800048 	cmpgei	r2,r2,1
    c164:	103fcd1e 	bne	r2,zero,c09c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    c168:	e0fffc17 	ldw	r3,-16(fp)
    c16c:	e0bff617 	ldw	r2,-40(fp)
    c170:	18800526 	beq	r3,r2,c188 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    c174:	e0fffc17 	ldw	r3,-16(fp)
    c178:	e0bff617 	ldw	r2,-40(fp)
    c17c:	1887c83a 	sub	r3,r3,r2
    c180:	e0ffff15 	stw	r3,-4(fp)
    c184:	00000906 	br	c1ac <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    c188:	e0bffe17 	ldw	r2,-8(fp)
    c18c:	1090000c 	andi	r2,r2,16384
    c190:	1005003a 	cmpeq	r2,r2,zero
    c194:	1000031e 	bne	r2,zero,c1a4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    c198:	00bffd44 	movi	r2,-11
    c19c:	e0bfff15 	stw	r2,-4(fp)
    c1a0:	00000206 	br	c1ac <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    c1a4:	00bffec4 	movi	r2,-5
    c1a8:	e0bfff15 	stw	r2,-4(fp)
    c1ac:	e0bfff17 	ldw	r2,-4(fp)
}
    c1b0:	e037883a 	mov	sp,fp
    c1b4:	dfc00117 	ldw	ra,4(sp)
    c1b8:	df000017 	ldw	fp,0(sp)
    c1bc:	dec00204 	addi	sp,sp,8
    c1c0:	f800283a 	ret

0000c1c4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    c1c4:	defffa04 	addi	sp,sp,-24
    c1c8:	dfc00515 	stw	ra,20(sp)
    c1cc:	df000415 	stw	fp,16(sp)
    c1d0:	df000404 	addi	fp,sp,16
    c1d4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    c1d8:	e0bfff17 	ldw	r2,-4(fp)
    c1dc:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    c1e0:	e0bfff17 	ldw	r2,-4(fp)
    c1e4:	10800104 	addi	r2,r2,4
    c1e8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c1ec:	0005303a 	rdctl	r2,status
    c1f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c1f4:	e0fffd17 	ldw	r3,-12(fp)
    c1f8:	00bfff84 	movi	r2,-2
    c1fc:	1884703a 	and	r2,r3,r2
    c200:	1001703a 	wrctl	status,r2
  
  return context;
    c204:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    c208:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    c20c:	000b3c00 	call	b3c0 <alt_tick>
    c210:	e0bffe17 	ldw	r2,-8(fp)
    c214:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c218:	e0bffc17 	ldw	r2,-16(fp)
    c21c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    c220:	e037883a 	mov	sp,fp
    c224:	dfc00117 	ldw	ra,4(sp)
    c228:	df000017 	ldw	fp,0(sp)
    c22c:	dec00204 	addi	sp,sp,8
    c230:	f800283a 	ret

0000c234 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    c234:	defff804 	addi	sp,sp,-32
    c238:	dfc00715 	stw	ra,28(sp)
    c23c:	df000615 	stw	fp,24(sp)
    c240:	df000604 	addi	fp,sp,24
    c244:	e13ffc15 	stw	r4,-16(fp)
    c248:	e17ffd15 	stw	r5,-12(fp)
    c24c:	e1bffe15 	stw	r6,-8(fp)
    c250:	e1ffff15 	stw	r7,-4(fp)
    c254:	e0bfff17 	ldw	r2,-4(fp)
    c258:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    c25c:	00800074 	movhi	r2,1
    c260:	1083b104 	addi	r2,r2,3780
    c264:	10800017 	ldw	r2,0(r2)
    c268:	1004c03a 	cmpne	r2,r2,zero
    c26c:	1000041e 	bne	r2,zero,c280 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    c270:	00c00074 	movhi	r3,1
    c274:	18c3b104 	addi	r3,r3,3780
    c278:	e0bffb17 	ldw	r2,-20(fp)
    c27c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    c280:	e0bffc17 	ldw	r2,-16(fp)
    c284:	10800104 	addi	r2,r2,4
    c288:	1007883a 	mov	r3,r2
    c28c:	008001c4 	movi	r2,7
    c290:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    c294:	d8000015 	stw	zero,0(sp)
    c298:	e13ffd17 	ldw	r4,-12(fp)
    c29c:	e17ffe17 	ldw	r5,-8(fp)
    c2a0:	01800074 	movhi	r6,1
    c2a4:	31b07104 	addi	r6,r6,-15932
    c2a8:	e1fffc17 	ldw	r7,-16(fp)
    c2ac:	000c4d80 	call	c4d8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    c2b0:	e037883a 	mov	sp,fp
    c2b4:	dfc00117 	ldw	ra,4(sp)
    c2b8:	df000017 	ldw	fp,0(sp)
    c2bc:	dec00204 	addi	sp,sp,8
    c2c0:	f800283a 	ret

0000c2c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    c2c4:	deffff04 	addi	sp,sp,-4
    c2c8:	df000015 	stw	fp,0(sp)
    c2cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    c2d0:	e037883a 	mov	sp,fp
    c2d4:	df000017 	ldw	fp,0(sp)
    c2d8:	dec00104 	addi	sp,sp,4
    c2dc:	f800283a 	ret

0000c2e0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    c2e0:	defff904 	addi	sp,sp,-28
    c2e4:	dfc00615 	stw	ra,24(sp)
    c2e8:	df000515 	stw	fp,20(sp)
    c2ec:	df000504 	addi	fp,sp,20
    c2f0:	e13ffd15 	stw	r4,-12(fp)
    c2f4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    c2f8:	e0bffd17 	ldw	r2,-12(fp)
    c2fc:	1005003a 	cmpeq	r2,r2,zero
    c300:	1000041e 	bne	r2,zero,c314 <alt_dev_llist_insert+0x34>
    c304:	e0bffd17 	ldw	r2,-12(fp)
    c308:	10800217 	ldw	r2,8(r2)
    c30c:	1004c03a 	cmpne	r2,r2,zero
    c310:	1000071e 	bne	r2,zero,c330 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    c314:	000c3940 	call	c394 <alt_get_errno>
    c318:	1007883a 	mov	r3,r2
    c31c:	00800584 	movi	r2,22
    c320:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    c324:	00bffa84 	movi	r2,-22
    c328:	e0bfff15 	stw	r2,-4(fp)
    c32c:	00001306 	br	c37c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    c330:	e0fffd17 	ldw	r3,-12(fp)
    c334:	e0bffe17 	ldw	r2,-8(fp)
    c338:	e0bffb15 	stw	r2,-20(fp)
    c33c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c340:	e0fffc17 	ldw	r3,-16(fp)
    c344:	e0bffb17 	ldw	r2,-20(fp)
    c348:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    c34c:	e0bffb17 	ldw	r2,-20(fp)
    c350:	10c00017 	ldw	r3,0(r2)
    c354:	e0bffc17 	ldw	r2,-16(fp)
    c358:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c35c:	e0bffb17 	ldw	r2,-20(fp)
    c360:	10c00017 	ldw	r3,0(r2)
    c364:	e0bffc17 	ldw	r2,-16(fp)
    c368:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    c36c:	e0fffb17 	ldw	r3,-20(fp)
    c370:	e0bffc17 	ldw	r2,-16(fp)
    c374:	18800015 	stw	r2,0(r3)

  return 0;  
    c378:	e03fff15 	stw	zero,-4(fp)
    c37c:	e0bfff17 	ldw	r2,-4(fp)
}
    c380:	e037883a 	mov	sp,fp
    c384:	dfc00117 	ldw	ra,4(sp)
    c388:	df000017 	ldw	fp,0(sp)
    c38c:	dec00204 	addi	sp,sp,8
    c390:	f800283a 	ret

0000c394 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c394:	defffd04 	addi	sp,sp,-12
    c398:	dfc00215 	stw	ra,8(sp)
    c39c:	df000115 	stw	fp,4(sp)
    c3a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c3a4:	00800074 	movhi	r2,1
    c3a8:	10bd0704 	addi	r2,r2,-3044
    c3ac:	10800017 	ldw	r2,0(r2)
    c3b0:	1005003a 	cmpeq	r2,r2,zero
    c3b4:	1000061e 	bne	r2,zero,c3d0 <alt_get_errno+0x3c>
    c3b8:	00800074 	movhi	r2,1
    c3bc:	10bd0704 	addi	r2,r2,-3044
    c3c0:	10800017 	ldw	r2,0(r2)
    c3c4:	103ee83a 	callr	r2
    c3c8:	e0bfff15 	stw	r2,-4(fp)
    c3cc:	00000306 	br	c3dc <alt_get_errno+0x48>
    c3d0:	00800074 	movhi	r2,1
    c3d4:	1083aa04 	addi	r2,r2,3752
    c3d8:	e0bfff15 	stw	r2,-4(fp)
    c3dc:	e0bfff17 	ldw	r2,-4(fp)
}
    c3e0:	e037883a 	mov	sp,fp
    c3e4:	dfc00117 	ldw	ra,4(sp)
    c3e8:	df000017 	ldw	fp,0(sp)
    c3ec:	dec00204 	addi	sp,sp,8
    c3f0:	f800283a 	ret

0000c3f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    c3f4:	defffd04 	addi	sp,sp,-12
    c3f8:	dfc00215 	stw	ra,8(sp)
    c3fc:	df000115 	stw	fp,4(sp)
    c400:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c404:	00bfff04 	movi	r2,-4
    c408:	00c00074 	movhi	r3,1
    c40c:	18f57004 	addi	r3,r3,-10816
    c410:	1885883a 	add	r2,r3,r2
    c414:	e0bfff15 	stw	r2,-4(fp)
    c418:	00000606 	br	c434 <_do_ctors+0x40>
        (*ctor) (); 
    c41c:	e0bfff17 	ldw	r2,-4(fp)
    c420:	10800017 	ldw	r2,0(r2)
    c424:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c428:	e0bfff17 	ldw	r2,-4(fp)
    c42c:	10bfff04 	addi	r2,r2,-4
    c430:	e0bfff15 	stw	r2,-4(fp)
    c434:	e0ffff17 	ldw	r3,-4(fp)
    c438:	00800074 	movhi	r2,1
    c43c:	10b56f04 	addi	r2,r2,-10820
    c440:	18bff62e 	bgeu	r3,r2,c41c <_do_ctors+0x28>
        (*ctor) (); 
}
    c444:	e037883a 	mov	sp,fp
    c448:	dfc00117 	ldw	ra,4(sp)
    c44c:	df000017 	ldw	fp,0(sp)
    c450:	dec00204 	addi	sp,sp,8
    c454:	f800283a 	ret

0000c458 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    c458:	defffd04 	addi	sp,sp,-12
    c45c:	dfc00215 	stw	ra,8(sp)
    c460:	df000115 	stw	fp,4(sp)
    c464:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c468:	00bfff04 	movi	r2,-4
    c46c:	00c00074 	movhi	r3,1
    c470:	18f57004 	addi	r3,r3,-10816
    c474:	1885883a 	add	r2,r3,r2
    c478:	e0bfff15 	stw	r2,-4(fp)
    c47c:	00000606 	br	c498 <_do_dtors+0x40>
        (*dtor) (); 
    c480:	e0bfff17 	ldw	r2,-4(fp)
    c484:	10800017 	ldw	r2,0(r2)
    c488:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c48c:	e0bfff17 	ldw	r2,-4(fp)
    c490:	10bfff04 	addi	r2,r2,-4
    c494:	e0bfff15 	stw	r2,-4(fp)
    c498:	e0ffff17 	ldw	r3,-4(fp)
    c49c:	00800074 	movhi	r2,1
    c4a0:	10b57004 	addi	r2,r2,-10816
    c4a4:	18bff62e 	bgeu	r3,r2,c480 <_do_dtors+0x28>
        (*dtor) (); 
}
    c4a8:	e037883a 	mov	sp,fp
    c4ac:	dfc00117 	ldw	ra,4(sp)
    c4b0:	df000017 	ldw	fp,0(sp)
    c4b4:	dec00204 	addi	sp,sp,8
    c4b8:	f800283a 	ret

0000c4bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c4bc:	deffff04 	addi	sp,sp,-4
    c4c0:	df000015 	stw	fp,0(sp)
    c4c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    c4c8:	e037883a 	mov	sp,fp
    c4cc:	df000017 	ldw	fp,0(sp)
    c4d0:	dec00104 	addi	sp,sp,4
    c4d4:	f800283a 	ret

0000c4d8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c4d8:	defff904 	addi	sp,sp,-28
    c4dc:	dfc00615 	stw	ra,24(sp)
    c4e0:	df000515 	stw	fp,20(sp)
    c4e4:	df000504 	addi	fp,sp,20
    c4e8:	e13ffc15 	stw	r4,-16(fp)
    c4ec:	e17ffd15 	stw	r5,-12(fp)
    c4f0:	e1bffe15 	stw	r6,-8(fp)
    c4f4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    c4f8:	e0800217 	ldw	r2,8(fp)
    c4fc:	d8800015 	stw	r2,0(sp)
    c500:	e13ffc17 	ldw	r4,-16(fp)
    c504:	e17ffd17 	ldw	r5,-12(fp)
    c508:	e1bffe17 	ldw	r6,-8(fp)
    c50c:	e1ffff17 	ldw	r7,-4(fp)
    c510:	000c6ac0 	call	c6ac <alt_iic_isr_register>
}  
    c514:	e037883a 	mov	sp,fp
    c518:	dfc00117 	ldw	ra,4(sp)
    c51c:	df000017 	ldw	fp,0(sp)
    c520:	dec00204 	addi	sp,sp,8
    c524:	f800283a 	ret

0000c528 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    c528:	defff904 	addi	sp,sp,-28
    c52c:	df000615 	stw	fp,24(sp)
    c530:	df000604 	addi	fp,sp,24
    c534:	e13ffe15 	stw	r4,-8(fp)
    c538:	e17fff15 	stw	r5,-4(fp)
    c53c:	e0bfff17 	ldw	r2,-4(fp)
    c540:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c544:	0005303a 	rdctl	r2,status
    c548:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c54c:	e0fffb17 	ldw	r3,-20(fp)
    c550:	00bfff84 	movi	r2,-2
    c554:	1884703a 	and	r2,r3,r2
    c558:	1001703a 	wrctl	status,r2
  
  return context;
    c55c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c560:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    c564:	e0fffc17 	ldw	r3,-16(fp)
    c568:	00800044 	movi	r2,1
    c56c:	10c4983a 	sll	r2,r2,r3
    c570:	1007883a 	mov	r3,r2
    c574:	00800074 	movhi	r2,1
    c578:	1083b304 	addi	r2,r2,3788
    c57c:	10800017 	ldw	r2,0(r2)
    c580:	1886b03a 	or	r3,r3,r2
    c584:	00800074 	movhi	r2,1
    c588:	1083b304 	addi	r2,r2,3788
    c58c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c590:	00800074 	movhi	r2,1
    c594:	1083b304 	addi	r2,r2,3788
    c598:	10800017 	ldw	r2,0(r2)
    c59c:	100170fa 	wrctl	ienable,r2
    c5a0:	e0bffd17 	ldw	r2,-12(fp)
    c5a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c5a8:	e0bffa17 	ldw	r2,-24(fp)
    c5ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c5b0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    c5b4:	e037883a 	mov	sp,fp
    c5b8:	df000017 	ldw	fp,0(sp)
    c5bc:	dec00104 	addi	sp,sp,4
    c5c0:	f800283a 	ret

0000c5c4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    c5c4:	defff904 	addi	sp,sp,-28
    c5c8:	df000615 	stw	fp,24(sp)
    c5cc:	df000604 	addi	fp,sp,24
    c5d0:	e13ffe15 	stw	r4,-8(fp)
    c5d4:	e17fff15 	stw	r5,-4(fp)
    c5d8:	e0bfff17 	ldw	r2,-4(fp)
    c5dc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c5e0:	0005303a 	rdctl	r2,status
    c5e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c5e8:	e0fffb17 	ldw	r3,-20(fp)
    c5ec:	00bfff84 	movi	r2,-2
    c5f0:	1884703a 	and	r2,r3,r2
    c5f4:	1001703a 	wrctl	status,r2
  
  return context;
    c5f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c5fc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    c600:	e0fffc17 	ldw	r3,-16(fp)
    c604:	00800044 	movi	r2,1
    c608:	10c4983a 	sll	r2,r2,r3
    c60c:	0084303a 	nor	r2,zero,r2
    c610:	1007883a 	mov	r3,r2
    c614:	00800074 	movhi	r2,1
    c618:	1083b304 	addi	r2,r2,3788
    c61c:	10800017 	ldw	r2,0(r2)
    c620:	1886703a 	and	r3,r3,r2
    c624:	00800074 	movhi	r2,1
    c628:	1083b304 	addi	r2,r2,3788
    c62c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c630:	00800074 	movhi	r2,1
    c634:	1083b304 	addi	r2,r2,3788
    c638:	10800017 	ldw	r2,0(r2)
    c63c:	100170fa 	wrctl	ienable,r2
    c640:	e0bffd17 	ldw	r2,-12(fp)
    c644:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c648:	e0bffa17 	ldw	r2,-24(fp)
    c64c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c650:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    c654:	e037883a 	mov	sp,fp
    c658:	df000017 	ldw	fp,0(sp)
    c65c:	dec00104 	addi	sp,sp,4
    c660:	f800283a 	ret

0000c664 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    c664:	defffc04 	addi	sp,sp,-16
    c668:	df000315 	stw	fp,12(sp)
    c66c:	df000304 	addi	fp,sp,12
    c670:	e13ffe15 	stw	r4,-8(fp)
    c674:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    c678:	000530fa 	rdctl	r2,ienable
    c67c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    c680:	e0ffff17 	ldw	r3,-4(fp)
    c684:	00800044 	movi	r2,1
    c688:	10c4983a 	sll	r2,r2,r3
    c68c:	1007883a 	mov	r3,r2
    c690:	e0bffd17 	ldw	r2,-12(fp)
    c694:	1884703a 	and	r2,r3,r2
    c698:	1004c03a 	cmpne	r2,r2,zero
}
    c69c:	e037883a 	mov	sp,fp
    c6a0:	df000017 	ldw	fp,0(sp)
    c6a4:	dec00104 	addi	sp,sp,4
    c6a8:	f800283a 	ret

0000c6ac <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c6ac:	defff404 	addi	sp,sp,-48
    c6b0:	dfc00b15 	stw	ra,44(sp)
    c6b4:	df000a15 	stw	fp,40(sp)
    c6b8:	df000a04 	addi	fp,sp,40
    c6bc:	e13ffb15 	stw	r4,-20(fp)
    c6c0:	e17ffc15 	stw	r5,-16(fp)
    c6c4:	e1bffd15 	stw	r6,-12(fp)
    c6c8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    c6cc:	00bffa84 	movi	r2,-22
    c6d0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    c6d4:	e0bffc17 	ldw	r2,-16(fp)
    c6d8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c6dc:	e0bff917 	ldw	r2,-28(fp)
    c6e0:	10800808 	cmpgei	r2,r2,32
    c6e4:	1000291e 	bne	r2,zero,c78c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c6e8:	0005303a 	rdctl	r2,status
    c6ec:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c6f0:	e0fff717 	ldw	r3,-36(fp)
    c6f4:	00bfff84 	movi	r2,-2
    c6f8:	1884703a 	and	r2,r3,r2
    c6fc:	1001703a 	wrctl	status,r2
  
  return context;
    c700:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    c704:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    c708:	e0bff917 	ldw	r2,-28(fp)
    c70c:	00c00074 	movhi	r3,1
    c710:	18c41804 	addi	r3,r3,4192
    c714:	100490fa 	slli	r2,r2,3
    c718:	10c7883a 	add	r3,r2,r3
    c71c:	e0bffd17 	ldw	r2,-12(fp)
    c720:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    c724:	e0bff917 	ldw	r2,-28(fp)
    c728:	00c00074 	movhi	r3,1
    c72c:	18c41804 	addi	r3,r3,4192
    c730:	100490fa 	slli	r2,r2,3
    c734:	10c5883a 	add	r2,r2,r3
    c738:	10c00104 	addi	r3,r2,4
    c73c:	e0bffe17 	ldw	r2,-8(fp)
    c740:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    c744:	e0bffd17 	ldw	r2,-12(fp)
    c748:	1005003a 	cmpeq	r2,r2,zero
    c74c:	1000051e 	bne	r2,zero,c764 <alt_iic_isr_register+0xb8>
    c750:	e17ff917 	ldw	r5,-28(fp)
    c754:	e13ffb17 	ldw	r4,-20(fp)
    c758:	000c5280 	call	c528 <alt_ic_irq_enable>
    c75c:	e0bfff15 	stw	r2,-4(fp)
    c760:	00000406 	br	c774 <alt_iic_isr_register+0xc8>
    c764:	e17ff917 	ldw	r5,-28(fp)
    c768:	e13ffb17 	ldw	r4,-20(fp)
    c76c:	000c5c40 	call	c5c4 <alt_ic_irq_disable>
    c770:	e0bfff15 	stw	r2,-4(fp)
    c774:	e0bfff17 	ldw	r2,-4(fp)
    c778:	e0bffa15 	stw	r2,-24(fp)
    c77c:	e0bff817 	ldw	r2,-32(fp)
    c780:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c784:	e0bff617 	ldw	r2,-40(fp)
    c788:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    c78c:	e0bffa17 	ldw	r2,-24(fp)
}
    c790:	e037883a 	mov	sp,fp
    c794:	dfc00117 	ldw	ra,4(sp)
    c798:	df000017 	ldw	fp,0(sp)
    c79c:	dec00204 	addi	sp,sp,8
    c7a0:	f800283a 	ret

0000c7a4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c7a4:	defff804 	addi	sp,sp,-32
    c7a8:	dfc00715 	stw	ra,28(sp)
    c7ac:	df000615 	stw	fp,24(sp)
    c7b0:	dc000515 	stw	r16,20(sp)
    c7b4:	df000504 	addi	fp,sp,20
    c7b8:	e13ffc15 	stw	r4,-16(fp)
    c7bc:	e17ffd15 	stw	r5,-12(fp)
    c7c0:	e1bffe15 	stw	r6,-8(fp)
    c7c4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c7c8:	e13ffd17 	ldw	r4,-12(fp)
    c7cc:	e17ffe17 	ldw	r5,-8(fp)
    c7d0:	e1bfff17 	ldw	r6,-4(fp)
    c7d4:	000c9ec0 	call	c9ec <open>
    c7d8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c7dc:	e0bffb17 	ldw	r2,-20(fp)
    c7e0:	1004803a 	cmplt	r2,r2,zero
    c7e4:	10001f1e 	bne	r2,zero,c864 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    c7e8:	e13ffb17 	ldw	r4,-20(fp)
    c7ec:	04000074 	movhi	r16,1
    c7f0:	84388304 	addi	r16,r16,-7668
    c7f4:	01400304 	movi	r5,12
    c7f8:	0000c680 	call	c68 <__mulsi3>
    c7fc:	1405883a 	add	r2,r2,r16
    c800:	10c00017 	ldw	r3,0(r2)
    c804:	e0bffc17 	ldw	r2,-16(fp)
    c808:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c80c:	e13ffb17 	ldw	r4,-20(fp)
    c810:	04000074 	movhi	r16,1
    c814:	84388304 	addi	r16,r16,-7668
    c818:	01400304 	movi	r5,12
    c81c:	0000c680 	call	c68 <__mulsi3>
    c820:	1405883a 	add	r2,r2,r16
    c824:	10800104 	addi	r2,r2,4
    c828:	10c00017 	ldw	r3,0(r2)
    c82c:	e0bffc17 	ldw	r2,-16(fp)
    c830:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c834:	e13ffb17 	ldw	r4,-20(fp)
    c838:	04000074 	movhi	r16,1
    c83c:	84388304 	addi	r16,r16,-7668
    c840:	01400304 	movi	r5,12
    c844:	0000c680 	call	c68 <__mulsi3>
    c848:	1405883a 	add	r2,r2,r16
    c84c:	10800204 	addi	r2,r2,8
    c850:	10c00017 	ldw	r3,0(r2)
    c854:	e0bffc17 	ldw	r2,-16(fp)
    c858:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c85c:	e13ffb17 	ldw	r4,-20(fp)
    c860:	000b1f40 	call	b1f4 <alt_release_fd>
  }
} 
    c864:	e037883a 	mov	sp,fp
    c868:	dfc00217 	ldw	ra,8(sp)
    c86c:	df000117 	ldw	fp,4(sp)
    c870:	dc000017 	ldw	r16,0(sp)
    c874:	dec00304 	addi	sp,sp,12
    c878:	f800283a 	ret

0000c87c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c87c:	defffb04 	addi	sp,sp,-20
    c880:	dfc00415 	stw	ra,16(sp)
    c884:	df000315 	stw	fp,12(sp)
    c888:	df000304 	addi	fp,sp,12
    c88c:	e13ffd15 	stw	r4,-12(fp)
    c890:	e17ffe15 	stw	r5,-8(fp)
    c894:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c898:	01000074 	movhi	r4,1
    c89c:	21388604 	addi	r4,r4,-7656
    c8a0:	e17ffd17 	ldw	r5,-12(fp)
    c8a4:	01800044 	movi	r6,1
    c8a8:	01c07fc4 	movi	r7,511
    c8ac:	000c7a40 	call	c7a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c8b0:	01000074 	movhi	r4,1
    c8b4:	21388304 	addi	r4,r4,-7668
    c8b8:	e17ffe17 	ldw	r5,-8(fp)
    c8bc:	000d883a 	mov	r6,zero
    c8c0:	01c07fc4 	movi	r7,511
    c8c4:	000c7a40 	call	c7a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c8c8:	01000074 	movhi	r4,1
    c8cc:	21388904 	addi	r4,r4,-7644
    c8d0:	e17fff17 	ldw	r5,-4(fp)
    c8d4:	01800044 	movi	r6,1
    c8d8:	01c07fc4 	movi	r7,511
    c8dc:	000c7a40 	call	c7a4 <alt_open_fd>
}  
    c8e0:	e037883a 	mov	sp,fp
    c8e4:	dfc00117 	ldw	ra,4(sp)
    c8e8:	df000017 	ldw	fp,0(sp)
    c8ec:	dec00204 	addi	sp,sp,8
    c8f0:	f800283a 	ret

0000c8f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c8f4:	defffa04 	addi	sp,sp,-24
    c8f8:	dfc00515 	stw	ra,20(sp)
    c8fc:	df000415 	stw	fp,16(sp)
    c900:	dc000315 	stw	r16,12(sp)
    c904:	df000304 	addi	fp,sp,12
    c908:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c90c:	e0bffe17 	ldw	r2,-8(fp)
    c910:	10800217 	ldw	r2,8(r2)
    c914:	10d00034 	orhi	r3,r2,16384
    c918:	e0bffe17 	ldw	r2,-8(fp)
    c91c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c920:	e03ffd15 	stw	zero,-12(fp)
    c924:	00002306 	br	c9b4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c928:	e13ffd17 	ldw	r4,-12(fp)
    c92c:	04000074 	movhi	r16,1
    c930:	84388304 	addi	r16,r16,-7668
    c934:	01400304 	movi	r5,12
    c938:	0000c680 	call	c68 <__mulsi3>
    c93c:	1405883a 	add	r2,r2,r16
    c940:	10c00017 	ldw	r3,0(r2)
    c944:	e0bffe17 	ldw	r2,-8(fp)
    c948:	10800017 	ldw	r2,0(r2)
    c94c:	1880161e 	bne	r3,r2,c9a8 <alt_file_locked+0xb4>
    c950:	e13ffd17 	ldw	r4,-12(fp)
    c954:	04000074 	movhi	r16,1
    c958:	84388304 	addi	r16,r16,-7668
    c95c:	01400304 	movi	r5,12
    c960:	0000c680 	call	c68 <__mulsi3>
    c964:	1405883a 	add	r2,r2,r16
    c968:	10800204 	addi	r2,r2,8
    c96c:	10800017 	ldw	r2,0(r2)
    c970:	1004403a 	cmpge	r2,r2,zero
    c974:	10000c1e 	bne	r2,zero,c9a8 <alt_file_locked+0xb4>
    c978:	e13ffd17 	ldw	r4,-12(fp)
    c97c:	01400304 	movi	r5,12
    c980:	0000c680 	call	c68 <__mulsi3>
    c984:	1007883a 	mov	r3,r2
    c988:	00800074 	movhi	r2,1
    c98c:	10b88304 	addi	r2,r2,-7668
    c990:	1887883a 	add	r3,r3,r2
    c994:	e0bffe17 	ldw	r2,-8(fp)
    c998:	18800326 	beq	r3,r2,c9a8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c99c:	00bffcc4 	movi	r2,-13
    c9a0:	e0bfff15 	stw	r2,-4(fp)
    c9a4:	00000a06 	br	c9d0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c9a8:	e0bffd17 	ldw	r2,-12(fp)
    c9ac:	10800044 	addi	r2,r2,1
    c9b0:	e0bffd15 	stw	r2,-12(fp)
    c9b4:	00800074 	movhi	r2,1
    c9b8:	10bd0604 	addi	r2,r2,-3048
    c9bc:	10800017 	ldw	r2,0(r2)
    c9c0:	1007883a 	mov	r3,r2
    c9c4:	e0bffd17 	ldw	r2,-12(fp)
    c9c8:	18bfd72e 	bgeu	r3,r2,c928 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c9cc:	e03fff15 	stw	zero,-4(fp)
    c9d0:	e0bfff17 	ldw	r2,-4(fp)
}
    c9d4:	e037883a 	mov	sp,fp
    c9d8:	dfc00217 	ldw	ra,8(sp)
    c9dc:	df000117 	ldw	fp,4(sp)
    c9e0:	dc000017 	ldw	r16,0(sp)
    c9e4:	dec00304 	addi	sp,sp,12
    c9e8:	f800283a 	ret

0000c9ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c9ec:	defff404 	addi	sp,sp,-48
    c9f0:	dfc00b15 	stw	ra,44(sp)
    c9f4:	df000a15 	stw	fp,40(sp)
    c9f8:	df000a04 	addi	fp,sp,40
    c9fc:	e13ffb15 	stw	r4,-20(fp)
    ca00:	e17ffc15 	stw	r5,-16(fp)
    ca04:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    ca08:	00bfffc4 	movi	r2,-1
    ca0c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    ca10:	00bffb44 	movi	r2,-19
    ca14:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    ca18:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    ca1c:	e13ffb17 	ldw	r4,-20(fp)
    ca20:	01400074 	movhi	r5,1
    ca24:	297d0404 	addi	r5,r5,-3056
    ca28:	000cbf80 	call	cbf8 <alt_find_dev>
    ca2c:	e0bffa15 	stw	r2,-24(fp)
    ca30:	e0bffa17 	ldw	r2,-24(fp)
    ca34:	1004c03a 	cmpne	r2,r2,zero
    ca38:	1000051e 	bne	r2,zero,ca50 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    ca3c:	e13ffb17 	ldw	r4,-20(fp)
    ca40:	000cc8c0 	call	cc8c <alt_find_file>
    ca44:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    ca48:	00800044 	movi	r2,1
    ca4c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    ca50:	e0bffa17 	ldw	r2,-24(fp)
    ca54:	1005003a 	cmpeq	r2,r2,zero
    ca58:	1000311e 	bne	r2,zero,cb20 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    ca5c:	e13ffa17 	ldw	r4,-24(fp)
    ca60:	000cdac0 	call	cdac <alt_get_fd>
    ca64:	e0bff815 	stw	r2,-32(fp)
    ca68:	e0bff817 	ldw	r2,-32(fp)
    ca6c:	1004403a 	cmpge	r2,r2,zero
    ca70:	1000031e 	bne	r2,zero,ca80 <open+0x94>
    {
      status = index;
    ca74:	e0bff817 	ldw	r2,-32(fp)
    ca78:	e0bff715 	stw	r2,-36(fp)
    ca7c:	00002a06 	br	cb28 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    ca80:	e13ff817 	ldw	r4,-32(fp)
    ca84:	01400304 	movi	r5,12
    ca88:	0000c680 	call	c68 <__mulsi3>
    ca8c:	1007883a 	mov	r3,r2
    ca90:	00800074 	movhi	r2,1
    ca94:	10b88304 	addi	r2,r2,-7668
    ca98:	1885883a 	add	r2,r3,r2
    ca9c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    caa0:	e0fffc17 	ldw	r3,-16(fp)
    caa4:	00900034 	movhi	r2,16384
    caa8:	10bfffc4 	addi	r2,r2,-1
    caac:	1886703a 	and	r3,r3,r2
    cab0:	e0bff917 	ldw	r2,-28(fp)
    cab4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    cab8:	e0bff617 	ldw	r2,-40(fp)
    cabc:	1004c03a 	cmpne	r2,r2,zero
    cac0:	1000061e 	bne	r2,zero,cadc <open+0xf0>
    cac4:	e13ff917 	ldw	r4,-28(fp)
    cac8:	000c8f40 	call	c8f4 <alt_file_locked>
    cacc:	e0bff715 	stw	r2,-36(fp)
    cad0:	e0bff717 	ldw	r2,-36(fp)
    cad4:	1004803a 	cmplt	r2,r2,zero
    cad8:	1000131e 	bne	r2,zero,cb28 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    cadc:	e0bffa17 	ldw	r2,-24(fp)
    cae0:	10800317 	ldw	r2,12(r2)
    cae4:	1005003a 	cmpeq	r2,r2,zero
    cae8:	1000091e 	bne	r2,zero,cb10 <open+0x124>
    caec:	e0bffa17 	ldw	r2,-24(fp)
    caf0:	10800317 	ldw	r2,12(r2)
    caf4:	e13ff917 	ldw	r4,-28(fp)
    caf8:	e17ffb17 	ldw	r5,-20(fp)
    cafc:	e1bffc17 	ldw	r6,-16(fp)
    cb00:	e1fffd17 	ldw	r7,-12(fp)
    cb04:	103ee83a 	callr	r2
    cb08:	e0bfff15 	stw	r2,-4(fp)
    cb0c:	00000106 	br	cb14 <open+0x128>
    cb10:	e03fff15 	stw	zero,-4(fp)
    cb14:	e0bfff17 	ldw	r2,-4(fp)
    cb18:	e0bff715 	stw	r2,-36(fp)
    cb1c:	00000206 	br	cb28 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    cb20:	00bffb44 	movi	r2,-19
    cb24:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    cb28:	e0bff717 	ldw	r2,-36(fp)
    cb2c:	1004403a 	cmpge	r2,r2,zero
    cb30:	1000091e 	bne	r2,zero,cb58 <open+0x16c>
  {
    alt_release_fd (index);  
    cb34:	e13ff817 	ldw	r4,-32(fp)
    cb38:	000b1f40 	call	b1f4 <alt_release_fd>
    ALT_ERRNO = -status;
    cb3c:	000cb780 	call	cb78 <alt_get_errno>
    cb40:	e0fff717 	ldw	r3,-36(fp)
    cb44:	00c7c83a 	sub	r3,zero,r3
    cb48:	10c00015 	stw	r3,0(r2)
    return -1;
    cb4c:	00bfffc4 	movi	r2,-1
    cb50:	e0bffe15 	stw	r2,-8(fp)
    cb54:	00000206 	br	cb60 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    cb58:	e0bff817 	ldw	r2,-32(fp)
    cb5c:	e0bffe15 	stw	r2,-8(fp)
    cb60:	e0bffe17 	ldw	r2,-8(fp)
}
    cb64:	e037883a 	mov	sp,fp
    cb68:	dfc00117 	ldw	ra,4(sp)
    cb6c:	df000017 	ldw	fp,0(sp)
    cb70:	dec00204 	addi	sp,sp,8
    cb74:	f800283a 	ret

0000cb78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cb78:	defffd04 	addi	sp,sp,-12
    cb7c:	dfc00215 	stw	ra,8(sp)
    cb80:	df000115 	stw	fp,4(sp)
    cb84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    cb88:	00800074 	movhi	r2,1
    cb8c:	10bd0704 	addi	r2,r2,-3044
    cb90:	10800017 	ldw	r2,0(r2)
    cb94:	1005003a 	cmpeq	r2,r2,zero
    cb98:	1000061e 	bne	r2,zero,cbb4 <alt_get_errno+0x3c>
    cb9c:	00800074 	movhi	r2,1
    cba0:	10bd0704 	addi	r2,r2,-3044
    cba4:	10800017 	ldw	r2,0(r2)
    cba8:	103ee83a 	callr	r2
    cbac:	e0bfff15 	stw	r2,-4(fp)
    cbb0:	00000306 	br	cbc0 <alt_get_errno+0x48>
    cbb4:	00800074 	movhi	r2,1
    cbb8:	1083aa04 	addi	r2,r2,3752
    cbbc:	e0bfff15 	stw	r2,-4(fp)
    cbc0:	e0bfff17 	ldw	r2,-4(fp)
}
    cbc4:	e037883a 	mov	sp,fp
    cbc8:	dfc00117 	ldw	ra,4(sp)
    cbcc:	df000017 	ldw	fp,0(sp)
    cbd0:	dec00204 	addi	sp,sp,8
    cbd4:	f800283a 	ret

0000cbd8 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    cbd8:	deffff04 	addi	sp,sp,-4
    cbdc:	df000015 	stw	fp,0(sp)
    cbe0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    cbe4:	000170fa 	wrctl	ienable,zero
}
    cbe8:	e037883a 	mov	sp,fp
    cbec:	df000017 	ldw	fp,0(sp)
    cbf0:	dec00104 	addi	sp,sp,4
    cbf4:	f800283a 	ret

0000cbf8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    cbf8:	defff904 	addi	sp,sp,-28
    cbfc:	dfc00615 	stw	ra,24(sp)
    cc00:	df000515 	stw	fp,20(sp)
    cc04:	df000504 	addi	fp,sp,20
    cc08:	e13ffd15 	stw	r4,-12(fp)
    cc0c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    cc10:	e0bffe17 	ldw	r2,-8(fp)
    cc14:	10800017 	ldw	r2,0(r2)
    cc18:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    cc1c:	e13ffd17 	ldw	r4,-12(fp)
    cc20:	00015a40 	call	15a4 <strlen>
    cc24:	10800044 	addi	r2,r2,1
    cc28:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    cc2c:	00000d06 	br	cc64 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    cc30:	e0bffc17 	ldw	r2,-16(fp)
    cc34:	11000217 	ldw	r4,8(r2)
    cc38:	e1bffb17 	ldw	r6,-20(fp)
    cc3c:	e17ffd17 	ldw	r5,-12(fp)
    cc40:	000cec80 	call	cec8 <memcmp>
    cc44:	1004c03a 	cmpne	r2,r2,zero
    cc48:	1000031e 	bne	r2,zero,cc58 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    cc4c:	e0bffc17 	ldw	r2,-16(fp)
    cc50:	e0bfff15 	stw	r2,-4(fp)
    cc54:	00000706 	br	cc74 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    cc58:	e0bffc17 	ldw	r2,-16(fp)
    cc5c:	10800017 	ldw	r2,0(r2)
    cc60:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    cc64:	e0fffe17 	ldw	r3,-8(fp)
    cc68:	e0bffc17 	ldw	r2,-16(fp)
    cc6c:	10fff01e 	bne	r2,r3,cc30 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    cc70:	e03fff15 	stw	zero,-4(fp)
    cc74:	e0bfff17 	ldw	r2,-4(fp)
}
    cc78:	e037883a 	mov	sp,fp
    cc7c:	dfc00117 	ldw	ra,4(sp)
    cc80:	df000017 	ldw	fp,0(sp)
    cc84:	dec00204 	addi	sp,sp,8
    cc88:	f800283a 	ret

0000cc8c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    cc8c:	defffa04 	addi	sp,sp,-24
    cc90:	dfc00515 	stw	ra,20(sp)
    cc94:	df000415 	stw	fp,16(sp)
    cc98:	df000404 	addi	fp,sp,16
    cc9c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    cca0:	00800074 	movhi	r2,1
    cca4:	10bd0204 	addi	r2,r2,-3064
    cca8:	10800017 	ldw	r2,0(r2)
    ccac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ccb0:	00003306 	br	cd80 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    ccb4:	e0bffd17 	ldw	r2,-12(fp)
    ccb8:	11000217 	ldw	r4,8(r2)
    ccbc:	00015a40 	call	15a4 <strlen>
    ccc0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    ccc4:	e0bffd17 	ldw	r2,-12(fp)
    ccc8:	10c00217 	ldw	r3,8(r2)
    cccc:	e0bffc17 	ldw	r2,-16(fp)
    ccd0:	1885883a 	add	r2,r3,r2
    ccd4:	10bfffc4 	addi	r2,r2,-1
    ccd8:	10800003 	ldbu	r2,0(r2)
    ccdc:	10803fcc 	andi	r2,r2,255
    cce0:	1080201c 	xori	r2,r2,128
    cce4:	10bfe004 	addi	r2,r2,-128
    cce8:	10800bd8 	cmpnei	r2,r2,47
    ccec:	1000031e 	bne	r2,zero,ccfc <alt_find_file+0x70>
    {
      len -= 1;
    ccf0:	e0bffc17 	ldw	r2,-16(fp)
    ccf4:	10bfffc4 	addi	r2,r2,-1
    ccf8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ccfc:	e0bffc17 	ldw	r2,-16(fp)
    cd00:	1007883a 	mov	r3,r2
    cd04:	e0bffe17 	ldw	r2,-8(fp)
    cd08:	1885883a 	add	r2,r3,r2
    cd0c:	10800003 	ldbu	r2,0(r2)
    cd10:	10803fcc 	andi	r2,r2,255
    cd14:	1080201c 	xori	r2,r2,128
    cd18:	10bfe004 	addi	r2,r2,-128
    cd1c:	10800be0 	cmpeqi	r2,r2,47
    cd20:	10000a1e 	bne	r2,zero,cd4c <alt_find_file+0xc0>
    cd24:	e0bffc17 	ldw	r2,-16(fp)
    cd28:	1007883a 	mov	r3,r2
    cd2c:	e0bffe17 	ldw	r2,-8(fp)
    cd30:	1885883a 	add	r2,r3,r2
    cd34:	10800003 	ldbu	r2,0(r2)
    cd38:	10803fcc 	andi	r2,r2,255
    cd3c:	1080201c 	xori	r2,r2,128
    cd40:	10bfe004 	addi	r2,r2,-128
    cd44:	1004c03a 	cmpne	r2,r2,zero
    cd48:	10000a1e 	bne	r2,zero,cd74 <alt_find_file+0xe8>
    cd4c:	e0bffd17 	ldw	r2,-12(fp)
    cd50:	11000217 	ldw	r4,8(r2)
    cd54:	e1bffc17 	ldw	r6,-16(fp)
    cd58:	e17ffe17 	ldw	r5,-8(fp)
    cd5c:	000cec80 	call	cec8 <memcmp>
    cd60:	1004c03a 	cmpne	r2,r2,zero
    cd64:	1000031e 	bne	r2,zero,cd74 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    cd68:	e0bffd17 	ldw	r2,-12(fp)
    cd6c:	e0bfff15 	stw	r2,-4(fp)
    cd70:	00000806 	br	cd94 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    cd74:	e0bffd17 	ldw	r2,-12(fp)
    cd78:	10800017 	ldw	r2,0(r2)
    cd7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    cd80:	00c00074 	movhi	r3,1
    cd84:	18fd0204 	addi	r3,r3,-3064
    cd88:	e0bffd17 	ldw	r2,-12(fp)
    cd8c:	10ffc91e 	bne	r2,r3,ccb4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    cd90:	e03fff15 	stw	zero,-4(fp)
    cd94:	e0bfff17 	ldw	r2,-4(fp)
}
    cd98:	e037883a 	mov	sp,fp
    cd9c:	dfc00117 	ldw	ra,4(sp)
    cda0:	df000017 	ldw	fp,0(sp)
    cda4:	dec00204 	addi	sp,sp,8
    cda8:	f800283a 	ret

0000cdac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    cdac:	defffa04 	addi	sp,sp,-24
    cdb0:	dfc00515 	stw	ra,20(sp)
    cdb4:	df000415 	stw	fp,16(sp)
    cdb8:	dc000315 	stw	r16,12(sp)
    cdbc:	df000304 	addi	fp,sp,12
    cdc0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    cdc4:	00bffa04 	movi	r2,-24
    cdc8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cdcc:	e03ffe15 	stw	zero,-8(fp)
    cdd0:	00002006 	br	ce54 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    cdd4:	e13ffe17 	ldw	r4,-8(fp)
    cdd8:	04000074 	movhi	r16,1
    cddc:	84388304 	addi	r16,r16,-7668
    cde0:	01400304 	movi	r5,12
    cde4:	0000c680 	call	c68 <__mulsi3>
    cde8:	1405883a 	add	r2,r2,r16
    cdec:	10800017 	ldw	r2,0(r2)
    cdf0:	1004c03a 	cmpne	r2,r2,zero
    cdf4:	1000141e 	bne	r2,zero,ce48 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    cdf8:	e13ffe17 	ldw	r4,-8(fp)
    cdfc:	04000074 	movhi	r16,1
    ce00:	84388304 	addi	r16,r16,-7668
    ce04:	01400304 	movi	r5,12
    ce08:	0000c680 	call	c68 <__mulsi3>
    ce0c:	1407883a 	add	r3,r2,r16
    ce10:	e0bfff17 	ldw	r2,-4(fp)
    ce14:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    ce18:	00800074 	movhi	r2,1
    ce1c:	10bd0604 	addi	r2,r2,-3048
    ce20:	10c00017 	ldw	r3,0(r2)
    ce24:	e0bffe17 	ldw	r2,-8(fp)
    ce28:	1880040e 	bge	r3,r2,ce3c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    ce2c:	00c00074 	movhi	r3,1
    ce30:	18fd0604 	addi	r3,r3,-3048
    ce34:	e0bffe17 	ldw	r2,-8(fp)
    ce38:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    ce3c:	e0bffe17 	ldw	r2,-8(fp)
    ce40:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    ce44:	00000606 	br	ce60 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ce48:	e0bffe17 	ldw	r2,-8(fp)
    ce4c:	10800044 	addi	r2,r2,1
    ce50:	e0bffe15 	stw	r2,-8(fp)
    ce54:	e0bffe17 	ldw	r2,-8(fp)
    ce58:	10800810 	cmplti	r2,r2,32
    ce5c:	103fdd1e 	bne	r2,zero,cdd4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    ce60:	e0bffd17 	ldw	r2,-12(fp)
}
    ce64:	e037883a 	mov	sp,fp
    ce68:	dfc00217 	ldw	ra,8(sp)
    ce6c:	df000117 	ldw	fp,4(sp)
    ce70:	dc000017 	ldw	r16,0(sp)
    ce74:	dec00304 	addi	sp,sp,12
    ce78:	f800283a 	ret

0000ce7c <atexit>:
    ce7c:	200b883a 	mov	r5,r4
    ce80:	000d883a 	mov	r6,zero
    ce84:	0009883a 	mov	r4,zero
    ce88:	000f883a 	mov	r7,zero
    ce8c:	000d2741 	jmpi	d274 <__register_exitproc>

0000ce90 <exit>:
    ce90:	defffe04 	addi	sp,sp,-8
    ce94:	000b883a 	mov	r5,zero
    ce98:	dc000015 	stw	r16,0(sp)
    ce9c:	dfc00115 	stw	ra,4(sp)
    cea0:	2021883a 	mov	r16,r4
    cea4:	000d3ac0 	call	d3ac <__call_exitprocs>
    cea8:	00800074 	movhi	r2,1
    ceac:	10bcff04 	addi	r2,r2,-3076
    ceb0:	11000017 	ldw	r4,0(r2)
    ceb4:	20800f17 	ldw	r2,60(r4)
    ceb8:	10000126 	beq	r2,zero,cec0 <exit+0x30>
    cebc:	103ee83a 	callr	r2
    cec0:	8009883a 	mov	r4,r16
    cec4:	000d59c0 	call	d59c <_exit>

0000cec8 <memcmp>:
    cec8:	00c000c4 	movi	r3,3
    cecc:	1980032e 	bgeu	r3,r6,cedc <memcmp+0x14>
    ced0:	2144b03a 	or	r2,r4,r5
    ced4:	10c4703a 	and	r2,r2,r3
    ced8:	10000f26 	beq	r2,zero,cf18 <memcmp+0x50>
    cedc:	31ffffc4 	addi	r7,r6,-1
    cee0:	3000061e 	bne	r6,zero,cefc <memcmp+0x34>
    cee4:	00000a06 	br	cf10 <memcmp+0x48>
    cee8:	39ffffc4 	addi	r7,r7,-1
    ceec:	00bfffc4 	movi	r2,-1
    cef0:	21000044 	addi	r4,r4,1
    cef4:	29400044 	addi	r5,r5,1
    cef8:	38800526 	beq	r7,r2,cf10 <memcmp+0x48>
    cefc:	20c00003 	ldbu	r3,0(r4)
    cf00:	28800003 	ldbu	r2,0(r5)
    cf04:	18bff826 	beq	r3,r2,cee8 <memcmp+0x20>
    cf08:	1885c83a 	sub	r2,r3,r2
    cf0c:	f800283a 	ret
    cf10:	0005883a 	mov	r2,zero
    cf14:	f800283a 	ret
    cf18:	180f883a 	mov	r7,r3
    cf1c:	20c00017 	ldw	r3,0(r4)
    cf20:	28800017 	ldw	r2,0(r5)
    cf24:	18bfed1e 	bne	r3,r2,cedc <memcmp+0x14>
    cf28:	31bfff04 	addi	r6,r6,-4
    cf2c:	21000104 	addi	r4,r4,4
    cf30:	29400104 	addi	r5,r5,4
    cf34:	39bff936 	bltu	r7,r6,cf1c <memcmp+0x54>
    cf38:	003fe806 	br	cedc <memcmp+0x14>

0000cf3c <putc>:
    cf3c:	defffc04 	addi	sp,sp,-16
    cf40:	dc800215 	stw	r18,8(sp)
    cf44:	04800074 	movhi	r18,1
    cf48:	94bcfe04 	addi	r18,r18,-3080
    cf4c:	90c00017 	ldw	r3,0(r18)
    cf50:	dc400115 	stw	r17,4(sp)
    cf54:	dc000015 	stw	r16,0(sp)
    cf58:	dfc00315 	stw	ra,12(sp)
    cf5c:	2023883a 	mov	r17,r4
    cf60:	2821883a 	mov	r16,r5
    cf64:	18000226 	beq	r3,zero,cf70 <putc+0x34>
    cf68:	18800e17 	ldw	r2,56(r3)
    cf6c:	10001126 	beq	r2,zero,cfb4 <putc+0x78>
    cf70:	80800217 	ldw	r2,8(r16)
    cf74:	10ffffc4 	addi	r3,r2,-1
    cf78:	80c00215 	stw	r3,8(r16)
    cf7c:	18001316 	blt	r3,zero,cfcc <putc+0x90>
    cf80:	80800017 	ldw	r2,0(r16)
    cf84:	14400005 	stb	r17,0(r2)
    cf88:	80c00017 	ldw	r3,0(r16)
    cf8c:	18800044 	addi	r2,r3,1
    cf90:	18c00003 	ldbu	r3,0(r3)
    cf94:	80800015 	stw	r2,0(r16)
    cf98:	1805883a 	mov	r2,r3
    cf9c:	dfc00317 	ldw	ra,12(sp)
    cfa0:	dc800217 	ldw	r18,8(sp)
    cfa4:	dc400117 	ldw	r17,4(sp)
    cfa8:	dc000017 	ldw	r16,0(sp)
    cfac:	dec00404 	addi	sp,sp,16
    cfb0:	f800283a 	ret
    cfb4:	1809883a 	mov	r4,r3
    cfb8:	00051240 	call	5124 <__sinit>
    cfbc:	80800217 	ldw	r2,8(r16)
    cfc0:	10ffffc4 	addi	r3,r2,-1
    cfc4:	80c00215 	stw	r3,8(r16)
    cfc8:	183fed0e 	bge	r3,zero,cf80 <putc+0x44>
    cfcc:	80800617 	ldw	r2,24(r16)
    cfd0:	18800f16 	blt	r3,r2,d010 <putc+0xd4>
    cfd4:	80800017 	ldw	r2,0(r16)
    cfd8:	14400005 	stb	r17,0(r2)
    cfdc:	81000017 	ldw	r4,0(r16)
    cfe0:	00800284 	movi	r2,10
    cfe4:	20c00003 	ldbu	r3,0(r4)
    cfe8:	18801226 	beq	r3,r2,d034 <putc+0xf8>
    cfec:	20800044 	addi	r2,r4,1
    cff0:	80800015 	stw	r2,0(r16)
    cff4:	1805883a 	mov	r2,r3
    cff8:	dfc00317 	ldw	ra,12(sp)
    cffc:	dc800217 	ldw	r18,8(sp)
    d000:	dc400117 	ldw	r17,4(sp)
    d004:	dc000017 	ldw	r16,0(sp)
    d008:	dec00404 	addi	sp,sp,16
    d00c:	f800283a 	ret
    d010:	91000017 	ldw	r4,0(r18)
    d014:	880b883a 	mov	r5,r17
    d018:	800d883a 	mov	r6,r16
    d01c:	dfc00317 	ldw	ra,12(sp)
    d020:	dc800217 	ldw	r18,8(sp)
    d024:	dc400117 	ldw	r17,4(sp)
    d028:	dc000017 	ldw	r16,0(sp)
    d02c:	dec00404 	addi	sp,sp,16
    d030:	000d1281 	jmpi	d128 <__swbuf_r>
    d034:	91000017 	ldw	r4,0(r18)
    d038:	180b883a 	mov	r5,r3
    d03c:	003ff606 	br	d018 <putc+0xdc>

0000d040 <_putc_r>:
    d040:	defffc04 	addi	sp,sp,-16
    d044:	dc400215 	stw	r17,8(sp)
    d048:	dc000115 	stw	r16,4(sp)
    d04c:	dfc00315 	stw	ra,12(sp)
    d050:	2021883a 	mov	r16,r4
    d054:	2823883a 	mov	r17,r5
    d058:	20000226 	beq	r4,zero,d064 <_putc_r+0x24>
    d05c:	20800e17 	ldw	r2,56(r4)
    d060:	10001026 	beq	r2,zero,d0a4 <_putc_r+0x64>
    d064:	30800217 	ldw	r2,8(r6)
    d068:	10ffffc4 	addi	r3,r2,-1
    d06c:	30c00215 	stw	r3,8(r6)
    d070:	18001316 	blt	r3,zero,d0c0 <_putc_r+0x80>
    d074:	30800017 	ldw	r2,0(r6)
    d078:	14400005 	stb	r17,0(r2)
    d07c:	30c00017 	ldw	r3,0(r6)
    d080:	18800044 	addi	r2,r3,1
    d084:	18c00003 	ldbu	r3,0(r3)
    d088:	30800015 	stw	r2,0(r6)
    d08c:	1805883a 	mov	r2,r3
    d090:	dfc00317 	ldw	ra,12(sp)
    d094:	dc400217 	ldw	r17,8(sp)
    d098:	dc000117 	ldw	r16,4(sp)
    d09c:	dec00404 	addi	sp,sp,16
    d0a0:	f800283a 	ret
    d0a4:	d9800015 	stw	r6,0(sp)
    d0a8:	00051240 	call	5124 <__sinit>
    d0ac:	d9800017 	ldw	r6,0(sp)
    d0b0:	30800217 	ldw	r2,8(r6)
    d0b4:	10ffffc4 	addi	r3,r2,-1
    d0b8:	30c00215 	stw	r3,8(r6)
    d0bc:	183fed0e 	bge	r3,zero,d074 <_putc_r+0x34>
    d0c0:	30800617 	ldw	r2,24(r6)
    d0c4:	18800e16 	blt	r3,r2,d100 <_putc_r+0xc0>
    d0c8:	30800017 	ldw	r2,0(r6)
    d0cc:	14400005 	stb	r17,0(r2)
    d0d0:	31000017 	ldw	r4,0(r6)
    d0d4:	00800284 	movi	r2,10
    d0d8:	20c00003 	ldbu	r3,0(r4)
    d0dc:	18800f26 	beq	r3,r2,d11c <_putc_r+0xdc>
    d0e0:	20800044 	addi	r2,r4,1
    d0e4:	30800015 	stw	r2,0(r6)
    d0e8:	1805883a 	mov	r2,r3
    d0ec:	dfc00317 	ldw	ra,12(sp)
    d0f0:	dc400217 	ldw	r17,8(sp)
    d0f4:	dc000117 	ldw	r16,4(sp)
    d0f8:	dec00404 	addi	sp,sp,16
    d0fc:	f800283a 	ret
    d100:	8009883a 	mov	r4,r16
    d104:	880b883a 	mov	r5,r17
    d108:	dfc00317 	ldw	ra,12(sp)
    d10c:	dc400217 	ldw	r17,8(sp)
    d110:	dc000117 	ldw	r16,4(sp)
    d114:	dec00404 	addi	sp,sp,16
    d118:	000d1281 	jmpi	d128 <__swbuf_r>
    d11c:	8009883a 	mov	r4,r16
    d120:	180b883a 	mov	r5,r3
    d124:	003ff806 	br	d108 <_putc_r+0xc8>

0000d128 <__swbuf_r>:
    d128:	defffc04 	addi	sp,sp,-16
    d12c:	dc400215 	stw	r17,8(sp)
    d130:	dc000115 	stw	r16,4(sp)
    d134:	dfc00315 	stw	ra,12(sp)
    d138:	2023883a 	mov	r17,r4
    d13c:	2821883a 	mov	r16,r5
    d140:	20000226 	beq	r4,zero,d14c <__swbuf_r+0x24>
    d144:	20800e17 	ldw	r2,56(r4)
    d148:	10002f26 	beq	r2,zero,d208 <__swbuf_r+0xe0>
    d14c:	3080030b 	ldhu	r2,12(r6)
    d150:	30c00617 	ldw	r3,24(r6)
    d154:	1080020c 	andi	r2,r2,8
    d158:	30c00215 	stw	r3,8(r6)
    d15c:	10002226 	beq	r2,zero,d1e8 <__swbuf_r+0xc0>
    d160:	30c00417 	ldw	r3,16(r6)
    d164:	18002026 	beq	r3,zero,d1e8 <__swbuf_r+0xc0>
    d168:	31000017 	ldw	r4,0(r6)
    d16c:	30800517 	ldw	r2,20(r6)
    d170:	20c7c83a 	sub	r3,r4,r3
    d174:	18802f0e 	bge	r3,r2,d234 <__swbuf_r+0x10c>
    d178:	19400044 	addi	r5,r3,1
    d17c:	30800217 	ldw	r2,8(r6)
    d180:	84003fcc 	andi	r16,r16,255
    d184:	20c00044 	addi	r3,r4,1
    d188:	10bfffc4 	addi	r2,r2,-1
    d18c:	30800215 	stw	r2,8(r6)
    d190:	24000005 	stb	r16,0(r4)
    d194:	30800517 	ldw	r2,20(r6)
    d198:	30c00015 	stw	r3,0(r6)
    d19c:	11400c26 	beq	r2,r5,d1d0 <__swbuf_r+0xa8>
    d1a0:	3080030b 	ldhu	r2,12(r6)
    d1a4:	1080004c 	andi	r2,r2,1
    d1a8:	1005003a 	cmpeq	r2,r2,zero
    d1ac:	10000626 	beq	r2,zero,d1c8 <__swbuf_r+0xa0>
    d1b0:	8005883a 	mov	r2,r16
    d1b4:	dfc00317 	ldw	ra,12(sp)
    d1b8:	dc400217 	ldw	r17,8(sp)
    d1bc:	dc000117 	ldw	r16,4(sp)
    d1c0:	dec00404 	addi	sp,sp,16
    d1c4:	f800283a 	ret
    d1c8:	00800284 	movi	r2,10
    d1cc:	80bff81e 	bne	r16,r2,d1b0 <__swbuf_r+0x88>
    d1d0:	8809883a 	mov	r4,r17
    d1d4:	300b883a 	mov	r5,r6
    d1d8:	0004e8c0 	call	4e8c <_fflush_r>
    d1dc:	103ff426 	beq	r2,zero,d1b0 <__swbuf_r+0x88>
    d1e0:	043fffc4 	movi	r16,-1
    d1e4:	003ff206 	br	d1b0 <__swbuf_r+0x88>
    d1e8:	300b883a 	mov	r5,r6
    d1ec:	8809883a 	mov	r4,r17
    d1f0:	d9800015 	stw	r6,0(sp)
    d1f4:	00035580 	call	3558 <__swsetup_r>
    d1f8:	d9800017 	ldw	r6,0(sp)
    d1fc:	1000061e 	bne	r2,zero,d218 <__swbuf_r+0xf0>
    d200:	30c00417 	ldw	r3,16(r6)
    d204:	003fd806 	br	d168 <__swbuf_r+0x40>
    d208:	d9800015 	stw	r6,0(sp)
    d20c:	00051240 	call	5124 <__sinit>
    d210:	d9800017 	ldw	r6,0(sp)
    d214:	003fcd06 	br	d14c <__swbuf_r+0x24>
    d218:	3080030b 	ldhu	r2,12(r6)
    d21c:	00c00244 	movi	r3,9
    d220:	043fffc4 	movi	r16,-1
    d224:	10801014 	ori	r2,r2,64
    d228:	3080030d 	sth	r2,12(r6)
    d22c:	88c00015 	stw	r3,0(r17)
    d230:	003fdf06 	br	d1b0 <__swbuf_r+0x88>
    d234:	300b883a 	mov	r5,r6
    d238:	8809883a 	mov	r4,r17
    d23c:	d9800015 	stw	r6,0(sp)
    d240:	0004e8c0 	call	4e8c <_fflush_r>
    d244:	d9800017 	ldw	r6,0(sp)
    d248:	103fe51e 	bne	r2,zero,d1e0 <__swbuf_r+0xb8>
    d24c:	31000017 	ldw	r4,0(r6)
    d250:	01400044 	movi	r5,1
    d254:	003fc906 	br	d17c <__swbuf_r+0x54>

0000d258 <__swbuf>:
    d258:	01800074 	movhi	r6,1
    d25c:	31bcfe04 	addi	r6,r6,-3080
    d260:	2007883a 	mov	r3,r4
    d264:	31000017 	ldw	r4,0(r6)
    d268:	280d883a 	mov	r6,r5
    d26c:	180b883a 	mov	r5,r3
    d270:	000d1281 	jmpi	d128 <__swbuf_r>

0000d274 <__register_exitproc>:
    d274:	defffa04 	addi	sp,sp,-24
    d278:	00800074 	movhi	r2,1
    d27c:	10bcff04 	addi	r2,r2,-3076
    d280:	dc000015 	stw	r16,0(sp)
    d284:	14000017 	ldw	r16,0(r2)
    d288:	dd000415 	stw	r20,16(sp)
    d28c:	2829883a 	mov	r20,r5
    d290:	81405217 	ldw	r5,328(r16)
    d294:	dcc00315 	stw	r19,12(sp)
    d298:	dc800215 	stw	r18,8(sp)
    d29c:	dc400115 	stw	r17,4(sp)
    d2a0:	dfc00515 	stw	ra,20(sp)
    d2a4:	2023883a 	mov	r17,r4
    d2a8:	3027883a 	mov	r19,r6
    d2ac:	3825883a 	mov	r18,r7
    d2b0:	28002526 	beq	r5,zero,d348 <__register_exitproc+0xd4>
    d2b4:	29000117 	ldw	r4,4(r5)
    d2b8:	008007c4 	movi	r2,31
    d2bc:	11002716 	blt	r2,r4,d35c <__register_exitproc+0xe8>
    d2c0:	8800101e 	bne	r17,zero,d304 <__register_exitproc+0x90>
    d2c4:	2105883a 	add	r2,r4,r4
    d2c8:	1085883a 	add	r2,r2,r2
    d2cc:	20c00044 	addi	r3,r4,1
    d2d0:	1145883a 	add	r2,r2,r5
    d2d4:	0009883a 	mov	r4,zero
    d2d8:	15000215 	stw	r20,8(r2)
    d2dc:	28c00115 	stw	r3,4(r5)
    d2e0:	2005883a 	mov	r2,r4
    d2e4:	dfc00517 	ldw	ra,20(sp)
    d2e8:	dd000417 	ldw	r20,16(sp)
    d2ec:	dcc00317 	ldw	r19,12(sp)
    d2f0:	dc800217 	ldw	r18,8(sp)
    d2f4:	dc400117 	ldw	r17,4(sp)
    d2f8:	dc000017 	ldw	r16,0(sp)
    d2fc:	dec00604 	addi	sp,sp,24
    d300:	f800283a 	ret
    d304:	29802204 	addi	r6,r5,136
    d308:	00800044 	movi	r2,1
    d30c:	110e983a 	sll	r7,r2,r4
    d310:	30c04017 	ldw	r3,256(r6)
    d314:	2105883a 	add	r2,r4,r4
    d318:	1085883a 	add	r2,r2,r2
    d31c:	1185883a 	add	r2,r2,r6
    d320:	19c6b03a 	or	r3,r3,r7
    d324:	14802015 	stw	r18,128(r2)
    d328:	14c00015 	stw	r19,0(r2)
    d32c:	00800084 	movi	r2,2
    d330:	30c04015 	stw	r3,256(r6)
    d334:	88bfe31e 	bne	r17,r2,d2c4 <__register_exitproc+0x50>
    d338:	30804117 	ldw	r2,260(r6)
    d33c:	11c4b03a 	or	r2,r2,r7
    d340:	30804115 	stw	r2,260(r6)
    d344:	003fdf06 	br	d2c4 <__register_exitproc+0x50>
    d348:	00800074 	movhi	r2,1
    d34c:	10845804 	addi	r2,r2,4448
    d350:	100b883a 	mov	r5,r2
    d354:	80805215 	stw	r2,328(r16)
    d358:	003fd606 	br	d2b4 <__register_exitproc+0x40>
    d35c:	00800034 	movhi	r2,0
    d360:	10832d04 	addi	r2,r2,3252
    d364:	1000021e 	bne	r2,zero,d370 <__register_exitproc+0xfc>
    d368:	013fffc4 	movi	r4,-1
    d36c:	003fdc06 	br	d2e0 <__register_exitproc+0x6c>
    d370:	01006404 	movi	r4,400
    d374:	103ee83a 	callr	r2
    d378:	1007883a 	mov	r3,r2
    d37c:	103ffa26 	beq	r2,zero,d368 <__register_exitproc+0xf4>
    d380:	80805217 	ldw	r2,328(r16)
    d384:	180b883a 	mov	r5,r3
    d388:	18000115 	stw	zero,4(r3)
    d38c:	18800015 	stw	r2,0(r3)
    d390:	80c05215 	stw	r3,328(r16)
    d394:	18006215 	stw	zero,392(r3)
    d398:	18006315 	stw	zero,396(r3)
    d39c:	0009883a 	mov	r4,zero
    d3a0:	883fc826 	beq	r17,zero,d2c4 <__register_exitproc+0x50>
    d3a4:	003fd706 	br	d304 <__register_exitproc+0x90>

0000d3a8 <register_fini>:
    d3a8:	f800283a 	ret

0000d3ac <__call_exitprocs>:
    d3ac:	00800074 	movhi	r2,1
    d3b0:	10bcff04 	addi	r2,r2,-3076
    d3b4:	10800017 	ldw	r2,0(r2)
    d3b8:	defff304 	addi	sp,sp,-52
    d3bc:	df000b15 	stw	fp,44(sp)
    d3c0:	d8800115 	stw	r2,4(sp)
    d3c4:	00800034 	movhi	r2,0
    d3c8:	10832804 	addi	r2,r2,3232
    d3cc:	1005003a 	cmpeq	r2,r2,zero
    d3d0:	d8800215 	stw	r2,8(sp)
    d3d4:	d8800117 	ldw	r2,4(sp)
    d3d8:	dd400815 	stw	r21,32(sp)
    d3dc:	dd000715 	stw	r20,28(sp)
    d3e0:	10805204 	addi	r2,r2,328
    d3e4:	dfc00c15 	stw	ra,48(sp)
    d3e8:	ddc00a15 	stw	r23,40(sp)
    d3ec:	dd800915 	stw	r22,36(sp)
    d3f0:	dcc00615 	stw	r19,24(sp)
    d3f4:	dc800515 	stw	r18,20(sp)
    d3f8:	dc400415 	stw	r17,16(sp)
    d3fc:	dc000315 	stw	r16,12(sp)
    d400:	282b883a 	mov	r21,r5
    d404:	2039883a 	mov	fp,r4
    d408:	d8800015 	stw	r2,0(sp)
    d40c:	2829003a 	cmpeq	r20,r5,zero
    d410:	d8800117 	ldw	r2,4(sp)
    d414:	14405217 	ldw	r17,328(r2)
    d418:	88001026 	beq	r17,zero,d45c <__call_exitprocs+0xb0>
    d41c:	ddc00017 	ldw	r23,0(sp)
    d420:	88800117 	ldw	r2,4(r17)
    d424:	8c802204 	addi	r18,r17,136
    d428:	143fffc4 	addi	r16,r2,-1
    d42c:	80000916 	blt	r16,zero,d454 <__call_exitprocs+0xa8>
    d430:	05bfffc4 	movi	r22,-1
    d434:	a000151e 	bne	r20,zero,d48c <__call_exitprocs+0xe0>
    d438:	8409883a 	add	r4,r16,r16
    d43c:	2105883a 	add	r2,r4,r4
    d440:	1485883a 	add	r2,r2,r18
    d444:	10c02017 	ldw	r3,128(r2)
    d448:	a8c01126 	beq	r21,r3,d490 <__call_exitprocs+0xe4>
    d44c:	843fffc4 	addi	r16,r16,-1
    d450:	85bff81e 	bne	r16,r22,d434 <__call_exitprocs+0x88>
    d454:	d8800217 	ldw	r2,8(sp)
    d458:	10003126 	beq	r2,zero,d520 <__call_exitprocs+0x174>
    d45c:	dfc00c17 	ldw	ra,48(sp)
    d460:	df000b17 	ldw	fp,44(sp)
    d464:	ddc00a17 	ldw	r23,40(sp)
    d468:	dd800917 	ldw	r22,36(sp)
    d46c:	dd400817 	ldw	r21,32(sp)
    d470:	dd000717 	ldw	r20,28(sp)
    d474:	dcc00617 	ldw	r19,24(sp)
    d478:	dc800517 	ldw	r18,20(sp)
    d47c:	dc400417 	ldw	r17,16(sp)
    d480:	dc000317 	ldw	r16,12(sp)
    d484:	dec00d04 	addi	sp,sp,52
    d488:	f800283a 	ret
    d48c:	8409883a 	add	r4,r16,r16
    d490:	88c00117 	ldw	r3,4(r17)
    d494:	2105883a 	add	r2,r4,r4
    d498:	1445883a 	add	r2,r2,r17
    d49c:	18ffffc4 	addi	r3,r3,-1
    d4a0:	11800217 	ldw	r6,8(r2)
    d4a4:	1c001526 	beq	r3,r16,d4fc <__call_exitprocs+0x150>
    d4a8:	10000215 	stw	zero,8(r2)
    d4ac:	303fe726 	beq	r6,zero,d44c <__call_exitprocs+0xa0>
    d4b0:	00c00044 	movi	r3,1
    d4b4:	1c06983a 	sll	r3,r3,r16
    d4b8:	90804017 	ldw	r2,256(r18)
    d4bc:	8cc00117 	ldw	r19,4(r17)
    d4c0:	1884703a 	and	r2,r3,r2
    d4c4:	10001426 	beq	r2,zero,d518 <__call_exitprocs+0x16c>
    d4c8:	90804117 	ldw	r2,260(r18)
    d4cc:	1884703a 	and	r2,r3,r2
    d4d0:	10000c1e 	bne	r2,zero,d504 <__call_exitprocs+0x158>
    d4d4:	2105883a 	add	r2,r4,r4
    d4d8:	1485883a 	add	r2,r2,r18
    d4dc:	11400017 	ldw	r5,0(r2)
    d4e0:	e009883a 	mov	r4,fp
    d4e4:	303ee83a 	callr	r6
    d4e8:	88800117 	ldw	r2,4(r17)
    d4ec:	98bfc81e 	bne	r19,r2,d410 <__call_exitprocs+0x64>
    d4f0:	b8800017 	ldw	r2,0(r23)
    d4f4:	147fd526 	beq	r2,r17,d44c <__call_exitprocs+0xa0>
    d4f8:	003fc506 	br	d410 <__call_exitprocs+0x64>
    d4fc:	8c000115 	stw	r16,4(r17)
    d500:	003fea06 	br	d4ac <__call_exitprocs+0x100>
    d504:	2105883a 	add	r2,r4,r4
    d508:	1485883a 	add	r2,r2,r18
    d50c:	11000017 	ldw	r4,0(r2)
    d510:	303ee83a 	callr	r6
    d514:	003ff406 	br	d4e8 <__call_exitprocs+0x13c>
    d518:	303ee83a 	callr	r6
    d51c:	003ff206 	br	d4e8 <__call_exitprocs+0x13c>
    d520:	88800117 	ldw	r2,4(r17)
    d524:	1000081e 	bne	r2,zero,d548 <__call_exitprocs+0x19c>
    d528:	89000017 	ldw	r4,0(r17)
    d52c:	20000726 	beq	r4,zero,d54c <__call_exitprocs+0x1a0>
    d530:	b9000015 	stw	r4,0(r23)
    d534:	8809883a 	mov	r4,r17
    d538:	0000ca00 	call	ca0 <free>
    d53c:	bc400017 	ldw	r17,0(r23)
    d540:	883fb71e 	bne	r17,zero,d420 <__call_exitprocs+0x74>
    d544:	003fc506 	br	d45c <__call_exitprocs+0xb0>
    d548:	89000017 	ldw	r4,0(r17)
    d54c:	882f883a 	mov	r23,r17
    d550:	2023883a 	mov	r17,r4
    d554:	883fb21e 	bne	r17,zero,d420 <__call_exitprocs+0x74>
    d558:	003fc006 	br	d45c <__call_exitprocs+0xb0>

0000d55c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    d55c:	defffd04 	addi	sp,sp,-12
    d560:	df000215 	stw	fp,8(sp)
    d564:	df000204 	addi	fp,sp,8
    d568:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    d56c:	e0bfff17 	ldw	r2,-4(fp)
    d570:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    d574:	e0bffe17 	ldw	r2,-8(fp)
    d578:	1005003a 	cmpeq	r2,r2,zero
    d57c:	1000021e 	bne	r2,zero,d588 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    d580:	002af070 	cmpltui	zero,zero,43969
    d584:	00000106 	br	d58c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    d588:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    d58c:	e037883a 	mov	sp,fp
    d590:	df000017 	ldw	fp,0(sp)
    d594:	dec00104 	addi	sp,sp,4
    d598:	f800283a 	ret

0000d59c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    d59c:	defffd04 	addi	sp,sp,-12
    d5a0:	dfc00215 	stw	ra,8(sp)
    d5a4:	df000115 	stw	fp,4(sp)
    d5a8:	df000104 	addi	fp,sp,4
    d5ac:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    d5b0:	e13fff17 	ldw	r4,-4(fp)
    d5b4:	000d55c0 	call	d55c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    d5b8:	003fff06 	br	d5b8 <_exit+0x1c>
    d5bc:	0000d3a8 	cmpgeui	zero,zero,846
